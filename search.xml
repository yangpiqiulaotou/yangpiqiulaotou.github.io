<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS7安装PostgreSQL12</title>
    <url>/2021/01/05/CentOS7%E5%AE%89%E8%A3%85PostgreSQL12/</url>
    <content><![CDATA[<h3 id="1、进入官网下载所需版本"><a href="#1、进入官网下载所需版本" class="headerlink" title="1、进入官网下载所需版本"></a>1、进入官网下载所需版本</h3><p><a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303095053134.png" alt="image-20200303095053134"></p>
<h3 id="2、开始安装"><a href="#2、开始安装" class="headerlink" title="2、开始安装"></a>2、开始安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">yum install https:<span class="hljs-regexp">//</span>download.postgresql.org<span class="hljs-regexp">/pub/</span>repos<span class="hljs-regexp">/yum/</span>reporpms<span class="hljs-regexp">/EL-7-x86_64/</span>pgdg-redhat-repo-latest.noarch.rpm -y<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303095233768.png" alt="image-20200303095233768"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install postgresql<span class="hljs-number">12</span> -y<br><span class="hljs-attribute">yum</span> install postgresql<span class="hljs-number">12</span>-server -y<br></code></pre></td></tr></table></figure>
<h3 id="3、数据库初始化与设置自启动"><a href="#3、数据库初始化与设置自启动" class="headerlink" title="3、数据库初始化与设置自启动"></a>3、数据库初始化与设置自启动</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>pgsql-<span class="hljs-number">12</span><span class="hljs-regexp">/bin/</span>postgresql-<span class="hljs-number">12</span>-setup initdb<br>systemctl enable postgresql-<span class="hljs-number">12</span><br>systemctl start postgresql-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303100416097.png" alt="image-20200303100416097"></p>
<p>​        这一步初始化数据库命令会在 /var/lib/pgsql 目录下创建名称为12文件夹，12为数据库版本。这里如果已经有对应版本的文件夹了，初始化这一步会报错，需要你自行去删除对应的文件夹，再去初始化。</p>
<h3 id="4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改"><a href="#4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改" class="headerlink" title="4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改"></a>4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303100954704.png" alt="image-20200303100954704"></p>
<h3 id="5、修改配置文件"><a href="#5、修改配置文件" class="headerlink" title="5、修改配置文件"></a>5、修改配置文件</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303102201925.png" alt="image-20200303102201925"></p>
<h4 id="5-1修改postgresql-conf"><a href="#5-1修改postgresql-conf" class="headerlink" title="5.1修改postgresql.conf"></a>5.1修改postgresql.conf</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">修改：<span class="hljs-meta">#listen_addresses = <span class="hljs-string">&#x27;localhost&#x27;</span>为listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span></span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303102710321.png" alt="image-20200303102710321"></p>
<h4 id="5-2修改pg-hba-conf"><a href="#5-2修改pg-hba-conf" class="headerlink" title="5.2修改pg_hba.conf"></a>5.2修改pg_hba.conf</h4><p>修改前</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303103002192.png" alt="image-20200303103002192"></p>
<p>修改后</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303103124544.png" alt="image-20200303103124544"></p>
<p>并重新启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs undefined">systemctl restart postgresql-12<br></code></pre></td></tr></table></figure>
<h3 id="6、设置登录数据库账密"><a href="#6、设置登录数据库账密" class="headerlink" title="6、设置登录数据库账密"></a>6、设置登录数据库账密</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">su postgres              <span class="hljs-meta">#不能使用root用户登录，切换到普通用户</span><br>psql -U postgres<br>\password                <span class="hljs-meta">#设置用户密码</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">version</span>(<span class="hljs-params"></span>)</span>;        <span class="hljs-meta">#查看版本</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303104354374.png" alt="image-20200303104354374"></p>
<h3 id="7、登录并测试数据库连接"><a href="#7、登录并测试数据库连接" class="headerlink" title="7、登录并测试数据库连接"></a>7、登录并测试数据库连接</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303105037116.png" alt="image-20200303105037116"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303105103983.png" alt="image-20200303105103983"></p>
<p>参考文章：<a href="https://www.jianshu.com/p/b4a759c2208f">https://www.jianshu.com/p/b4a759c2208f</a></p>
]]></content>
      <categories>
        <category>关系型数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo自定义域名</title>
    <url>/2020/12/30/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h2 id="阿里云购买域名"><a href="#阿里云购买域名" class="headerlink" title="阿里云购买域名"></a>阿里云购买域名</h2><p>购买地址: <a href="https://wanwang.aliyun.com/domain/searchresult/#/?keyword=&amp;suffix=com">https://wanwang.aliyun.com/domain/searchresult/#/?keyword=&amp;suffix=com</a></p>
<h3 id="通过CNAME解析"><a href="#通过CNAME解析" class="headerlink" title="通过CNAME解析"></a>通过CNAME解析</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230094445258.png" alt="image-20201230094445258"></p>
<p>登录github仓库，在根目录下创建CNAME文件</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230094345833.png" alt="image-20201230094345833"></p>
<h2 id="Github配置HTTPS"><a href="#Github配置HTTPS" class="headerlink" title="Github配置HTTPS"></a>Github配置HTTPS</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230091906008.png" alt="image-20201230091906008"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230094113159.png" alt="image-20201230094113159"></p>
<h3 id="登录域名界面"><a href="#登录域名界面" class="headerlink" title="登录域名界面"></a>登录域名界面</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230095210959.png" alt="image-20201230095210959"></p>
<p>修改网站标题blog/_config.yml</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站的关键词。支援多个关键词。</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230111015211.png" alt="image-20201230111015211"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo集成Valine评论系统</title>
    <url>/2020/12/30/Hexo%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h2><p>评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号</p>
<p>官网：<a href="https://leancloud.cn/">https://leancloud.cn/</a></p>
<p>认证完成后创建应用</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230150742969.png" alt="image-20201230150742969"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230150811967.png" alt="image-20201230150811967"></p>
<p>点击设置获取appid 和 appkey</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230150940084.png" alt="image-20201230150940084"></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>打开主题配置文件 搜索 valine，填入appid 和 appkey</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span>  <span class="hljs-comment"># 从 LeanCloud 的应用中得到的 appId</span><br>  <span class="hljs-attr">appkey:</span>  <span class="hljs-comment"># 从 LeanCloud 的应用中得到的 APP Key</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">吐槽</span> <span class="hljs-comment"># 评论框占位提示符</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span> <span class="hljs-comment"># 当前文章页路径，用于区分不同的文章页，以保证正确读取该文章页下的评论列表</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span> <span class="hljs-comment"># Gravatar 头像展示方式</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]  <span class="hljs-comment"># 评论者相关属性</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 评论列表分页，每页条数</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment"># zh-CN | zh-TW | en | ja</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否记录评论者IP</span><br>  <span class="hljs-attr">serverURLs:</span>  <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br></code></pre></td></tr></table></figure>
<p>并修改评论插件为valine</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 评论</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启评论</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span>  <span class="hljs-comment"># 指定使用的评论模块</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins主机之上部署SonarQube Scanner</title>
    <url>/2021/01/05/Jenkins%E4%B8%BB%E6%9C%BA%E4%B9%8B%E4%B8%8A%E9%83%A8%E7%BD%B2SonarQube-Scanner/</url>
    <content><![CDATA[<h3 id="1、在jenkins中安装插件：SonarQube-Scanner"><a href="#1、在jenkins中安装插件：SonarQube-Scanner" class="headerlink" title="1、在jenkins中安装插件：SonarQube Scanner"></a>1、在jenkins中安装插件：SonarQube Scanner</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303154952665.png" alt="image-20200303154952665"></p>
<h3 id="2、在jenkins主机之上安装-SonarQube-Scanner-部件，将其安装到jenkins用户之下"><a href="#2、在jenkins主机之上安装-SonarQube-Scanner-部件，将其安装到jenkins用户之下" class="headerlink" title="2、在jenkins主机之上安装 SonarQube Scanner 部件，将其安装到jenkins用户之下"></a>2、在jenkins主机之上安装 SonarQube Scanner 部件，将其安装到jenkins用户之下</h3><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span>  /usr/local<br>unzip sonar-scanner-cli-<span class="hljs-number">4.2</span>.<span class="hljs-number">0.1873</span>-linux.zip<br><span class="hljs-keyword">ln</span> -s sonar-scanner-<span class="hljs-number">4.2</span>.<span class="hljs-number">0.1873</span>-linux sonar-scanner<br>chown -R jenkin<span class="hljs-variable">s:</span> sonar-scanner-<span class="hljs-number">4.2</span>.<span class="hljs-number">0.1873</span>-linux<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;export SONAR_SCANNER_HOME=/usr/local/sonar-scanner&#x27;</span>&gt;&gt;/etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;export PATH=$SONAR_SCANNER_HOME/bin:$PATH&#x27;</span>&gt;&gt;/etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">source</span> /etc/<span class="hljs-keyword">profile</span><br><br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">conf</span>/sonar-scanner.properties<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303155825904.png" alt="image-20200303155825904"></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sonar-scanner -h</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303155945854.png" alt="image-20200303155945854"></p>
<h3 id="3、整合Jenkins和SonarQube："><a href="#3、整合Jenkins和SonarQube：" class="headerlink" title="3、整合Jenkins和SonarQube："></a>3、整合Jenkins和SonarQube：</h3><p>网页登录jenkins，系统管理，全局工具配置，SonarQube Scanner，将安装的sonar-scanner配置上去</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303170347797.png" alt="image-20200303170347797"></p>
<p>网页登录sonar创建token</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303170456840.png" alt="image-20200303170456840"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303170548345.png" alt="image-20200303170548345"></p>
<p>网页登录jenkins，凭据，jenkins，全局凭据，添加凭据，Secret text类型，将上一步的token填入</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/20191119155139175.png" alt="在这里插入图片描述"></p>
<p>网页登录jenkins，系统管理，系统设置，SonarQube servers，配置名字和url，选择上一步添加的凭据</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303171838307.png" alt="image-20200303171838307"></p>
<p>4、配置Jenkins任务</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305133622078.png" alt="image-20200305133622078"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305133650304.png" alt="image-20200305133650304"></p>
<ul>
<li>Task to run: 输入 scan，即分析代码；</li>
<li>JDK :选择 SonarQube Scanner 使用的 JDK（注意这里必须是 JDK 不能是 JRE）；</li>
<li>Path to project properties : 这里可以指定一个sonar-project.properties 文件，如果不指定的话会使用项目默认的 properties文件；</li>
<li>Analysis properties: 这里需要输入一些配置参数用来传递给 SonarQube，这里的参数优先级高于sonar-project.properties文件里面的参数，所以可以在这里来配置所有的参数以替代sonar-project.properties文件，下面列出了一些参数，sonar.language指定了要分析的开发语言（特定的开发语言对应了特定的规则），sonar.sources定义了需要分析的源代码位置（示例中的.所指示的是当前 Jenkins项目的目录），</li>
<li>sonar.java.binaries 定义了需要分析代码的编译后文件位置；</li>
<li>Additional arguments 输入框中可以输入一些附加的参数，示例中的-X 意思是进入SonarQube Scanner的Debug 模式，这样会输出更多的日志信息；</li>
<li>JVM Options 可以输入在执行 SonarQube Scanner是需要的JVM参数。</li>
</ul>
<p>5、测试构建</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305134512002.png" alt="image-20200305134512002"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305134441603.png" alt="image-20200305134441603"></p>
<p>构建项目时错误信息：Caused by: Please provide compiled classes of your project with sonar.java.binaries property，这个问题是sonar扫描的项目工程中没有找到相应的class文件</p>
<p>解决办法：在Analysis properties一项中，增加sonar.java.binaries的配置，这个路径是项目工程中，编译的.class文件的路径。</p>
<p>6、登录sonarqube查看</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305134927195.png" alt="image-20200305134927195"></p>
]]></content>
      <tags>
        <tag>Jenkins</tag>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装sonarqube8.2</title>
    <url>/2021/01/05/Linux%E5%AE%89%E8%A3%85sonarqube8-2/</url>
    <content><![CDATA[<p>社区版下载地址：<a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a></p>
<p>环境介绍：（本文使用Oracle jdk 11.0.6，postgreSQL 12）</p>
<h3 id="1、解压缩包"><a href="#1、解压缩包" class="headerlink" title="1、解压缩包"></a>1、解压缩包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unzip</span> sonarqube-<span class="hljs-number">8.2.0.329</span><span class="hljs-number">29</span>.zip<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303112854371.png" alt="image-20200303112854371"></p>
<h3 id="2、创建postgreSQL用户"><a href="#2、创建postgreSQL用户" class="headerlink" title="2、创建postgreSQL用户"></a>2、创建postgreSQL用户</h3><p>安装完后会自动创建postgres用户 su - postgres切换进去</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">psql                     #进入命令行模式<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> sonar；	#创建sonar数据库<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> sonar；	    #创建sonar用户<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> sonar <span class="hljs-keyword">with</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;postgres&#x27;</span>;           #设置sonar用户密码(否则会导致连不上数据库)<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">role</span> sonar <span class="hljs-keyword">createdb</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">role</span> sonar <span class="hljs-keyword">superuser</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">role</span> sonar <span class="hljs-keyword">createrole</span>;    #给sonar授权<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> sonar <span class="hljs-keyword">owner</span> <span class="hljs-keyword">to</span> sonar；      #更改sonar数据库拥有者(这一步是必须的，否则会sonarqube会连接失败)<br><br>psql进入命令行模式 <br>\l查看数据库 <br>\du 查看用户<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303115321618.png" alt="image-20200303115321618"></p>
<h3 id="3、修改系统配置"><a href="#3、修改系统配置" class="headerlink" title="3、修改系统配置"></a>3、修改系统配置</h3><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">1.不能用root起！<br>2.切换用户必须 <span class="hljs-keyword">su</span> - username <br>3.切换好用户千万别忘记给这个用户授权你的sonarQube根目录<br>4.更改一些系统配置<br></code></pre></td></tr></table></figure>
<p>根据需要执行下述命令以使内核参数符合sonar安装需求</p>
<p>#可以使用以下命令查看这些值：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sysctl <span class="hljs-keyword">vm</span>.max_map_count <br>sysctl fs.<span class="hljs-keyword">file</span>-<span class="hljs-built_in">max</span> <br>ulimit -n <br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303120223176.png" alt="image-20200303120223176"></p>
<p>#可以通过以root身份运行以下命令来为当前会话动态设置：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sysctl -w vm.<span class="hljs-attribute">max_map_count</span>=262144<br>sysctl -w fs.<span class="hljs-attribute">file-max</span>=65536<br>ulimit -n 65536<br></code></pre></td></tr></table></figure>
<p>#为了更永久设置这些值，则必须修改/etc/sysctl.d/99-sonarqube.conf（或/etc/sysctl.conf文件）#文件末尾添加下述两行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/sysctl.<span class="hljs-keyword">conf</span><br><br><span class="hljs-keyword">vm</span>.max_map_count=<span class="hljs-number">262144</span><br>fs.<span class="hljs-keyword">file</span>-<span class="hljs-built_in">max</span>=<span class="hljs-number">65536</span><br></code></pre></td></tr></table></figure>
<p>#在/etc/profile文件末尾添加ulimit -n 65536</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">vi <span class="hljs-regexp">/etc/</span>profile<br><br>ulimit -n <span class="hljs-number">65536</span>           #保存后运行#<span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile 使其生效<br><br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure>
<p>创建sonar用户</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">useradd sonar</span><br><span class="hljs-attribute">passwd sonar</span><br></code></pre></td></tr></table></figure>
<p>密码自己设置。</p>
<p>目录授权</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">chown -R sonar:sonar <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span><br></code></pre></td></tr></table></figure>
<h3 id="4、设置对数据库的访问"><a href="#4、设置对数据库的访问" class="headerlink" title="4、设置对数据库的访问"></a>4、设置对数据库的访问</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span>conf/sonar.properties<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303134739877.png" alt="image-20200303134739877"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303151110546.png" alt="image-20200303151110546"></p>
<p>配置自己机器的IP跟端口，保存退出即可</p>
<h3 id="5、配置Elasticsearch存储路径"><a href="#5、配置Elasticsearch存储路径" class="headerlink" title="5、配置Elasticsearch存储路径"></a>5、配置Elasticsearch存储路径</h3><p>默认情况下，Elasticsearch数据存储在*$ SONARQUBE-HOME / data中*，但不建议将其用于生产实例。相反，您应该将此数据存储在其他位置，最好是在具有快速I / O的专用卷中。除了保持可接受的性能外，这样做还可以简化SonarQube的升级</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span>conf/sonar.properties<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303141448981.png" alt="image-20200303141448981"></p>
<p>用于启动SonarQube的用户必须具有对这些目录的读写权限</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">mkdir</span> -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/sonarqube/<span class="hljs-keyword">data</span></span><br><span class="hljs-title">mkdir</span> -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/sonarqube/temp</span><br><span class="hljs-title">chown</span> -<span class="hljs-type">R</span> sonar:sonar /<span class="hljs-class"><span class="hljs-keyword">data</span>/</span><br></code></pre></td></tr></table></figure>
<h3 id="6、Sonar-Scanner扫描器安装及使用方法"><a href="#6、Sonar-Scanner扫描器安装及使用方法" class="headerlink" title="6、Sonar-Scanner扫描器安装及使用方法"></a>6、Sonar-Scanner扫描器安装及使用方法</h3><p>光弄SonarQube是没法扫描项目的，所以还需要装一下sonar-scanner</p>
<p>官方下载地址：<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/">https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#丢到/usr/local/下面解压</span><br><span class="hljs-attribute">unzip</span> sonar-scanner-cli-<span class="hljs-number">4.2.0.187</span><span class="hljs-number">3</span>-linux.zip<br><span class="hljs-attribute">cd</span> sonar-scanner-<span class="hljs-number">4.2.0.187</span><span class="hljs-number">3</span>-linux/<br><br><span class="hljs-attribute">vim</span> conf/sonar-scanner.propertie          #改下配置<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303135545387.png" alt="image-20200303135545387"></p>
<p>保存退出后，创建软连接，将sonar-scanner改为全局即可使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonar-scanner-4.2.0.1873-linux/</span>bin<span class="hljs-regexp">/sonar-scanner /u</span>sr<span class="hljs-regexp">/bin/</span>sonar-scanner<br></code></pre></td></tr></table></figure>
<h3 id="7、启动服务"><a href="#7、启动服务" class="headerlink" title="7、启动服务"></a>7、启动服务</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">su - sonar 别忘了切用户<br><br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span> <br>bin<span class="hljs-regexp">/linux-x86-64/</span>sonar.sh<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303140123972.png" alt="image-20200303140123972"></p>
<p>访问web界面</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303151227710.png" alt="image-20200303151227710"></p>
<p>账户密码：admin/admin</p>
<p>安装中文版，然后点击从新启动</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/20191119153859725.png" alt="在这里插入图片描述"></p>
<p>参考文章：<a href="https://blog.csdn.net/qq_42207325/article/details/100998453">https://blog.csdn.net/qq_42207325/article/details/100998453</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+PicGo+Gitee写博客和个人博客图床</title>
    <url>/2020/12/30/Typora-PicGo-Gitee%E5%86%99%E5%8D%9A%E5%AE%A2%E5%92%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="图床简介"><a href="#图床简介" class="headerlink" title="图床简介"></a>图床简介</h2><p>​        在写博客的过程中，我们都会遇到<strong>插入图片</strong>的情况，图片存在本地的话，我们把博客上传到网站后，会没有办法显示，而且存放在本地移植性也不太好，我们就需要图床辅助我们。</p>
<p>​        图床就是一个便于在博文中插入在线图片连接的个人图片仓库。设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除非自己亲自删除。</p>
<p>备注：需要nodejs环境</p>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><ul>
<li><code>Typora</code>: Markdown工具，写Markdown文件的神器，简洁、方便、免费</li>
<li><code>PicGo</code> 开源的图片管理工具，可以自己上传图片到各种图床</li>
<li><code>gitee-uploader</code>: PicGo依赖这个插件进行上传到<code>gitee</code> 仓库</li>
<li><code>gitee码云</code>: 借助<code>gitee</code> 码云建立自己的仓库，构建<strong>免费</strong>图床，国内速度快</li>
</ul>
<h3 id="Picgo-介绍"><a href="#Picgo-介绍" class="headerlink" title="Picgo 介绍"></a>Picgo 介绍</h3><p>详情请看github地址： <a href="https://github.com/Molunerfinn/">https://github.com/Molunerfinn/</a></p>
<p>安装完成后打开，选择插件安装gitee</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229153454132.png" alt="image-20201229153454132"></p>
<h2 id="gitee-建立自己的图片仓库"><a href="#gitee-建立自己的图片仓库" class="headerlink" title="gitee 建立自己的图片仓库"></a>gitee 建立自己的图片仓库</h2><p>官网：<a href="https://gitee.com/login">https://gitee.com/login</a></p>
<p>创建存放图片的库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229154329807.png" alt="image-20201229154329807"></p>
<p>获取私人令牌</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229154433314.png" alt="image-20201229154433314"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229154601830.png" alt="image-20201229154601830"></p>
<p>token令牌，进行复制后面会PicGo会用到，路径直接写名称就好，不用加/号</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229155712389.png" alt="image-20201229155712389"></p>
<p>测试上传</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229155810273.png" alt="image-20201229155810273"></p>
<p>在gitee查看</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229155830364.png" alt="image-20201229155830364"></p>
<h2 id="Typora-设置支持PicGo"><a href="#Typora-设置支持PicGo" class="headerlink" title="Typora 设置支持PicGo"></a>Typora 设置支持PicGo</h2><blockquote>
<p>设置Typora工具，当插入图片的时候，触发上传图片操作，然后上传服务选择PicGo.app来支持</p>
</blockquote>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20201229160054210.png" alt="image-20201229160054210"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>rancher:v2.3安装创建K8s集群</title>
    <url>/2021/01/04/rancher-v2-3%E5%AE%89%E8%A3%85%E5%88%9B%E5%BB%BAK8s%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="1、rancher介绍"><a href="#1、rancher介绍" class="headerlink" title="1、rancher介绍"></a>1、rancher介绍</h3><p>每个团队都可以在他们选择的公共云或私有云上部署应用程序，Rancher 在 IT 和 DevOps 组织中扮演的角色如下：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125105835491.png" alt="image-20191125105835491"></p>
<p>同时具备多种功能：</p>
<ul>
<li>内置 CI/CD 流水线</li>
<li>告警和日志收集功能</li>
<li>多集群管理功能</li>
<li>集成 Rancher Kubernetes Engine (RKE)</li>
<li>与各云 Kubernetes 服务(如 GKE、EKS、AKS) 集成</li>
</ul>
<h3 id="2、安装要求"><a href="#2、安装要求" class="headerlink" title="2、安装要求"></a>2、安装要求</h3><h4 id="2-1操作系统和Docker要求"><a href="#2-1操作系统和Docker要求" class="headerlink" title="2.1操作系统和Docker要求"></a>2.1操作系统和Docker要求</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104210860.png" alt="image-20191125104210860"></p>
<h4 id="2-2硬件需求"><a href="#2-2硬件需求" class="headerlink" title="2.2硬件需求"></a>2.2硬件需求</h4><p>HA集群</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104545019.png" alt="image-20191125104545019"></p>
<p>单节点</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104610584.png" alt="image-20191125104610584"></p>
<h4 id="2-3Rancher与用户群集通信的端口要求"><a href="#2-3Rancher与用户群集通信的端口要求" class="headerlink" title="2.3Rancher与用户群集通信的端口要求"></a>2.3Rancher与用户群集通信的端口要求</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104812067.png" alt="image-20191125104812067"></p>
<h3 id="3、单节点安装"><a href="#3、单节点安装" class="headerlink" title="3、单节点安装"></a>3、单节点安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">docker run -d --restart=unless-stopped \<br>  -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> \<br>  -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rancher:/u</span>sr<span class="hljs-regexp">/local/</span>rancher \<br>  rancher/rancher:latest<br></code></pre></td></tr></table></figure>
<h3 id="4、rancher的web界面"><a href="#4、rancher的web界面" class="headerlink" title="4、rancher的web界面"></a>4、rancher的web界面</h3><h4 id="4-1自定义集群"><a href="#4-1自定义集群" class="headerlink" title="4.1自定义集群"></a>4.1自定义集群</h4><p>通过宿主机的IP登录</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125110853326.png" alt="image-20191125110853326"></p>
<p>设置需要访问的URL地址</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125110956934.png" alt="image-20191125110956934"></p>
<p>设置中文字体</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111044885.png" alt="image-20191125111044885"></p>
<p>添加集群</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111137103.png" alt="image-20191125111137103"></p>
<p>生成自己的集群</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111225387.png" alt="image-20191125111225387"></p>
<p>可以自定义RKE集群，也可以导入自己已经建好的集群。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111408862.png" alt="image-20191125111408862"></p>
<p>设置自定义集群的名字 ，选择需要安装的集群的版本。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111607904.png" alt="image-20191125111607904"></p>
<p>选择需要的网络策略。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111641275.png" alt="image-20191125111641275"></p>
<p>自己私有仓库地址，以及账密。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111756334.png" alt="image-20191125111756334"></p>
<p>根据自己需求设置。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111943481.png" alt="image-20191125111943481"></p>
<p>master节点选择后在你需要安装成master节点运行下面的命令</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125112055397.png" alt="image-20191125112055397"></p>
<p>在工作节点运行以下命令。</p>
<p>运行过程会去拉取所需镜像，时间视自己网络情况而定。</p>
<p>所有容器运行好之后可以看到以下界面，表示你的集群已经好了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125112358230.png" alt="image-20191125112358230"></p>
<p>复制kubeconfig文件在master节点下执行</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 添加Kubernetes的yum源</span><br><span class="hljs-variable">$ </span>cat &gt;&gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt;EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mirrors.aliyun.com/kubernetes</span><span class="hljs-regexp">/yum/repos</span><span class="hljs-regexp">/kubernetes-el7-x86_64/</span><br>enabled=<span class="hljs-number">1</span><br>gpgcheck=0<br>EOF<br><br><span class="hljs-comment"># 查看可安装的版本</span><br><span class="hljs-variable">$ </span>yum list kubectl –showduplicates<br><br><span class="hljs-comment"># yum方式安装kubectl</span><br><span class="hljs-variable">$ </span>yum install -y kubectl.x86_64<br><br>[root<span class="hljs-variable">@node1</span> ~]<span class="hljs-comment"># mkdir -p .kube</span><br>[root<span class="hljs-variable">@node1</span> ~]<span class="hljs-comment"># vim .kube/config</span><br></code></pre></td></tr></table></figure>
<p>即可在master节点通过命令行查看整个集群信息。</p>
<h4 id="4-2导入集群"><a href="#4-2导入集群" class="headerlink" title="4.2导入集群"></a>4.2导入集群</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125113210838.png" alt="image-20191125113210838"></p>
<p>随便定义一个集群名。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125113405043.png" alt="image-20191125113405043"></p>
<p>复制下面两条命令在master节点运行，运行第一条命令时，由于是自签证书会报x509错误，在执行下面一条命令跳过错误就好。</p>
<p>当在master节点看到</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125113631090.png" alt="image-20191125113631090"></p>
<p>则表示集群导入成功，如果pod状态报错，根据报错信息处理即可。</p>
]]></content>
      <categories>
        <category>rancher</category>
      </categories>
      <tags>
        <tag>rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>rancher流水线&lt;后端&gt;</title>
    <url>/2021/01/04/rancher%E6%B5%81%E6%B0%B4%E7%BA%BF-%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h3 id="1、Pipeline授权设置"><a href="#1、Pipeline授权设置" class="headerlink" title="1、Pipeline授权设置"></a>1、Pipeline授权设置</h3><p>Gitlab版本需要在9以上，授权账号必须是项目的Maintainer（gitlab 8 里面是master）,在gitlab中创建application，callbackurl在rancher上复制</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193027408.png" alt="image-20191214193027408"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193138485.png" alt="image-20191214193138485"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193217867.png" alt="image-20191214193217867"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193509071.png" alt="image-20191214193509071"></p>
<p>生成需要的ID和Key</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193835277.png" alt="image-20191214193835277"></p>
<p>将刚才生成的ID和Key填入，地址输入自己gitlab的URL</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193949412.png" alt="image-20191214193949412"></p>
<p>授权完成后，给流水线的运行设置资源限制</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194027442.png" alt="image-20191214194027442"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194108099.png" alt="image-20191214194108099"></p>
<h3 id="2、配置流水线"><a href="#2、配置流水线" class="headerlink" title="2、配置流水线"></a>2、配置流水线</h3><p>现在就可以开始设置流水线了，先设置代码库，开启需要运行的代码库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194230120.png" alt="image-20191214194230120"></p>
<p>设置什么条件可以触发流水线</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194305401.png" alt="image-20191214194305401"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194325948.png" alt="image-20191214194325948"></p>
<p>开始配置流水线流程，选择你需要配置的分支</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194356585.png" alt="image-20191214194356585"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194421735.png" alt="image-20191214194421735"></p>
<h3 id="3、流水线配置"><a href="#3、流水线配置" class="headerlink" title="3、流水线配置"></a>3、流水线配置</h3><p>第一步是系统已经设定好的，我们只需要根据自己的需要设置后面的步骤</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194540875.png" alt="image-20191214194540875"></p>
<p>第二步 build，选择的类型是运行脚本，执行mvn clean package命令，选用的镜像是我自己打包maven3.6镜像。  公司有自己的maven私服，那么打包maven镜像的时候，可以设置好setting.xml文件，上传到前面配置的harbor仓库就可以了。如果不知道setting文件放到mvn镜像中的位置，就先运行 mvn  -X查看mvn读取配置文件的顺序，再把setting文件copy进去即可</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194705581.png" alt="image-20191214194705581"></p>
<p>这一步主要是用build构建后的包，根据代码中的Dockerfile打包成镜像，当前目录依然是git  clone后的目录，指定Dockerfile的相对位置，并命名打包后的惊醒名，其中镜像名中的:${CICD_GIT_COMMIT}是rancher提供的变量。这里Dockerfile路径和构建上下文路径是gitlab库中的dockerfile文件的路径。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194801709.png" alt="image-20191214194801709"></p>
<p>下面讲下dockerfile的配置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">registry</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">jdk</span><span class="hljs-selector-pseudo">:1.8_232</span>    #这里是我私仓自己的<span class="hljs-selector-tag">jdk</span>镜像<br><br><span class="hljs-selector-tag">ADD</span> ./<span class="hljs-selector-tag">target</span>/<span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span>  <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span><br><br><span class="hljs-selector-tag">CMD</span>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;java  -jar app.jar  -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;</span>]</span><br></code></pre></td></tr></table></figure>
<p>最后一步部署Deployment.yaml文件，yaml路径是你gitlab仓库中项目下的路径</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194824641.png" alt="image-20191214194824641"></p>
<p>保存完成后就可以看到正在构建了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214195024989.png" alt="image-20191214195024989"></p>
<p>全部运行成功后，就可以在工作负载看到pod的运行状态</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214195120170.png" alt="image-20191214195120170"></p>
]]></content>
      <categories>
        <category>rancher</category>
      </categories>
      <tags>
        <tag>rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>sonarqube使用钉钉告警</title>
    <url>/2021/01/05/sonarqube%E4%BD%BF%E7%94%A8%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<p>说明：因项目需求，创建的是一个Jenkins自由项目，需要sonar代码扫描通过再继续maven构建、并且不发送钉钉告警，扫描不通过则停止构建、并发送钉钉告警。</p>
<h3 id="1、安装告警插件"><a href="#1、安装告警插件" class="headerlink" title="1、安装告警插件"></a>1、安装告警插件</h3><p>#下载release包 /releases/dingding-sonar-1.0-SNAPSHOT.jar</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/chejiangyi/</span>dingding-sonar<span class="hljs-regexp">/repository/</span>archive/master.zip<br><br>unzip master.zip<br></code></pre></td></tr></table></figure>
<p>#运行jar包 sonar.url为sonar安装地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dingding-sonar/releases<br></code></pre></td></tr></table></figure>
<p>#启动服务</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> java -jar dingding-sonar-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT.jar \ --server.port=<span class="hljs-number">8082</span> \ --sonar.url=http://<span class="hljs-number">192.168.0.129:9000</span> \ &gt; /dev/null <span class="hljs-number">2</span> &gt;&amp; <span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure>
<p>#检查部署成功 sonar-project-id 为sonar的项目id:task-dev</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">curl <span class="hljs-attr">http:</span><span class="hljs-comment">//&lt;your dingding-sonar-server IP&gt;:8082/?projectname=&#123;sonar-project-id&#125;</span><br></code></pre></td></tr></table></figure>
<p>#返回结果</p>
<p>bug:0,漏洞:0,坏味道:58,覆盖率:0.0,重复:0.0,状态:OK</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305135649539.png" alt="image-20200305135649539"></p>
<h3 id="2、发送告警通知"><a href="#2、发送告警通知" class="headerlink" title="2、发送告警通知"></a>2、发送告警通知</h3><p>钉钉通知发布脚本内容示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#!/bin/bash</span><br>projectName=task<span class="hljs-literal">-dev</span><br>projectId=task<span class="hljs-literal">-dev</span><br>dingdingToken=a9c7f0dff01a01cefda6af09e5d0ec068a55d755008c2f559ec2598e9f377djl    <span class="hljs-comment">#钉钉群组创建一个自由的webhook的token</span><br>sonarreport=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">0.121</span>:<span class="hljs-number">8082</span>/?projectname=<span class="hljs-variable">$</span>&#123;projectName&#125;)<br>sonar=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">0.121</span>:<span class="hljs-number">8082</span>/?projectname=task<span class="hljs-literal">-dev</span> |awk <span class="hljs-operator">-F</span> <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-string">&#x27;&#123;print $7&#125;&#x27;</span>|<span class="hljs-built_in">tee</span> dev.txt)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$sonar</span>&quot;</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$sonar</span>&quot;</span> == <span class="hljs-string">&quot;ERROR&quot;</span> ]]<br>then<br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$</span>&#123;sonarreport&#125;<br>  <span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=<span class="hljs-variable">$</span>&#123;dingdingToken&#125;&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type: application/json&quot;</span>  <span class="hljs-literal">-d</span> <span class="hljs-string">&quot;&#123; \&quot;</span>msgtype\<span class="hljs-string">&quot;: \&quot;</span>markdown\<span class="hljs-string">&quot;, \&quot;</span>markdown\<span class="hljs-string">&quot;: &#123; \&quot;</span>title\<span class="hljs-string">&quot;:\&quot;</span>sonar代码<br>质量\<span class="hljs-string">&quot;, \&quot;</span>text\<span class="hljs-string">&quot;: \&quot;</span><span class="hljs-comment">## Sonar代码质量报告 \n</span><br>&gt;<span class="hljs-variable">$</span>&#123;projectName&#125; \n<br>&gt; [<span class="hljs-type">sonar</span>地址](http://<span class="hljs-number">192.168</span>.<span class="hljs-number">0.129</span>:<span class="hljs-number">9000</span>/dashboard?id=<span class="hljs-variable">$</span>&#123;projectId&#125;) \n<br>&gt; <span class="hljs-variable">$</span>&#123;sonarreport&#125; \n\<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;&quot;</span><br>  <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$</span>&#123;sonarreport&#125;<br>fi<br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://www.cnblogs.com/chejiangyi/p/10844232.html">https://www.cnblogs.com/chejiangyi/p/10844232.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Hexo个人博客</title>
    <url>/2020/12/30/%E5%AE%89%E8%A3%85Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><p>nodejs: 包含俩个命令 node<code> </code>npm</p>
<p>hexo: 快速、简洁且高效的博客框架,支持markdown 插件和扩展性很好</p>
<p>git：需要安装git 通过git 命令来操作github</p>
<p>github账号：申请注册一个github账号，github提供了一个github pages功能可以支持站点软件版本</p>
<h2 id="windows安装git"><a href="#windows安装git" class="headerlink" title="windows安装git"></a>windows安装git</h2><p>1、打开Git的官方网站：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>2、找到下载页：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>3、找到Windows版本下载页面：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<h2 id="windows安装nodejs"><a href="#windows安装nodejs" class="headerlink" title="windows安装nodejs"></a>windows安装nodejs</h2><p>官网下载地址：<a href="https://npm.taobao.org/mirrors/node/v14.15.3/node-v14.15.3-x64.msi">https://npm.taobao.org/mirrors/node/v14.15.3/node-v14.15.3-x64.msi</a></p>
<p>运行msi文件，按照提示一直走下去，安装完成后通过命令行检测结果</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span>  -v<br></code></pre></td></tr></table></figure>
<p>临时更换npm 源 (为了后面快速下载安装hexo，更换为国内的源)</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br>npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry<br><br>#看看终端显示信息，如果看到这行信息，说明配置成功: https:<span class="hljs-comment">//registry.npm.taobao.org/</span><br></code></pre></td></tr></table></figure>
<p>备注：按照系统默认安装，不要修改或设置config文件路径，否则会在安装hexo找不到命令</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="windows初始化hexo"><a href="#windows初始化hexo" class="headerlink" title="windows初始化hexo"></a>windows初始化hexo</h3><p>通过npm来安装hexo，下面前俩个命令安装需要一点时间，blog目录就是博客目录，根据自己情况选择目录</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-cli -g<br>hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword">cd </span><span class="hljs-keyword">blog</span><br><span class="hljs-keyword">npm </span><span class="hljs-keyword">install</span><br><span class="hljs-keyword">hexo </span>server<br></code></pre></td></tr></table></figure>
<p>终端显示如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  Validating config<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure>
<p>在本地浏览器访问<a href="http://localhost:4000/">http://localhost:4000</a></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228134458558-1609204893841.png" alt="image-20201228134458558"></p>
<h2 id="Github准备"><a href="#Github准备" class="headerlink" title="Github准备"></a>Github准备</h2><p>1、注册账号并登录 <a href="https://github.com/">https://github.com</a></p>
<p>2、新建一个仓库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228135107663-1609204887387.png" alt="image-20201228135107663"></p>
<p><strong>注意： 创建repository之前，点击settings更改下默认仓库分支名字 由 main 改为master</strong></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140042861-1609204885284.png" alt="image-20201228140042861"></p>
<p>然后打开仓库创建一个 index.html 文件，并随意先写点内容，比如: 你能看到我 说明部署成功~</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140248390-1609204879899.png" alt="image-20201228140248390"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140336250.png" alt="image-20201228140336250"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140351507-1609204877084.png" alt="image-20201228140351507"></p>
<p>现在打开http://[用户名].github.io就能看到自己的站点了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140625169-1609204875332.png" alt="image-20201228140625169"></p>
<h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH  key"></a>配置SSH  key</h2><p>执行以下命令全局配置一下本地账户</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;用户名&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>
<p>生成一对密钥 SSH key</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228141002999-1609204872669.png" alt="image-20201228141002999"></p>
<p>然后登录github 在github 上添加刚刚生成的ssh key 把公钥复制粘贴上去</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228145139217-1609204870370.png" alt="image-20201228145139217"></p>
<p>创建一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认创建，搞定！！这样在你的 SSH keys 列表里就会看到你刚刚添加的密钥</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228145222267-1609204868175.png" alt="image-20201228145222267"></p>
<p>首次使用还需要确认并添加主机到本机ssh 信任列表 下面可以看到success 返回成功</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228145421096-1609204866268.png" alt="image-20201228145421096"></p>
<h2 id="将hexo部署到github仓库"><a href="#将hexo部署到github仓库" class="headerlink" title="将hexo部署到github仓库"></a>将hexo部署到github仓库</h2><p>​        这个时候我们把本地hexo 和github pages部署已经完成了，接下来我们要把本地的hexo静态站点部署到github pages中，然后通过github pages 我们就可以在互联网上浏览到博客了。</p>
<h3 id="部署之前需要更改hexo-配置-和安装部署插件"><a href="#部署之前需要更改hexo-配置-和安装部署插件" class="headerlink" title="部署之前需要更改hexo 配置 和安装部署插件"></a>部署之前需要更改hexo 配置 和安装部署插件</h3><p>第一: 进入blog 目录，打开仓库_config.yml 配置文件，拉到文件末尾，填上如下配置（也可同时部署到多个仓库，比如也可以支持gitee ）</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  branch:</span> master<br><span class="hljs-symbol">  repo:</span><br><span class="hljs-symbol">    github:</span> git@github.com:yangpiqiulaotou/yangpiqiulaotou.github.io.git <span class="hljs-meta">#仓库名字改成自己的</span><br></code></pre></td></tr></table></figure>
<p>第二: 要安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>
<p>第三: 最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228150622519-1609204863417.png" alt="image-20201228150622519"></p>
<p>稍等一会，在浏览器访问网址： <a href="https://你的用户名.github.io/">https://你的用户名.github.io</a> 就会看到你的博客</p>
<h4 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>hexo clean</td>
<td>清除所有生成的页面文件</td>
</tr>
<tr>
<td>hexo g</td>
<td>生成页面</td>
</tr>
<tr>
<td>hexo deploy</td>
<td>推送部署到远程服务器</td>
</tr>
<tr>
<td>hexo n xxx</td>
<td>新建一篇名为xxx的文章</td>
</tr>
</tbody></table>
<h4 id="命令行测试发布博客"><a href="#命令行测试发布博客" class="headerlink" title="命令行测试发布博客"></a>命令行测试发布博客</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228150806161-1609204859471.png" alt="image-20201228150806161"></p>
<p>编辑完成保存，然后进行发布，注意： 一定要在blog目录下执行命令，然后通过域名进行访问</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/blog</span><br>hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228170456678-1609204857122.png" alt="image-20201228170456678"></p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>主题官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd ~/blog<br>git@github.com:fluid-dev<span class="hljs-regexp">/hexo-theme-fluid.git themes/</span>fluid<br></code></pre></td></tr></table></figure>
<p>在_config.yml 配置文件中，替换theme 参数，我们 把原来的注释掉加#，然后新增一行theme:  next</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta">#theme: landscape</span><br><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN   <span class="hljs-meta">#修改为中文</span><br></code></pre></td></tr></table></figure>
<h3 id="配置主题fluid"><a href="#配置主题fluid" class="headerlink" title="配置主题fluid"></a>配置主题fluid</h3><p>fluid官网：<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE</a></p>
<p>根据官网修改自己的需求选项，比如博客名称、个人简介、自己狂拽酷帅吊炸天的昵称…</p>
<p>修改页面图片</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229150548121-1609225775674.png" alt="image-20201229150548121"></p>
<p>将自己选好的图片放到这个文件夹下，图片格式为xx.png类型，然后在主题下面的_config.yaml配置文件中修改图片名称，比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">/<span class="hljs-selector-tag">avatar</span><span class="hljs-selector-class">.png</span>     #然后改成<span class="hljs-selector-tag">ss</span><span class="hljs-selector-class">.png</span><br></code></pre></td></tr></table></figure>
<p>新建about 关于页面</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure>
<p>更新到github</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g -d</span><br></code></pre></td></tr></table></figure>
<p>最后效果图</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229150931869.png" alt="image-20201229150931869"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
