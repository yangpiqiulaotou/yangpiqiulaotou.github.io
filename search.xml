<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Calico  IPIP模式</title>
    <url>/2021/03/18/Calico-IPIP%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1、IPIP模式简介"><a href="#1、IPIP模式简介" class="headerlink" title="1、IPIP模式简介"></a>1、IPIP模式简介</h2><p>​    IPIP模式是一种将各Node的路由之间做一个tunnel，再把网络连接起来的模式：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200513144018535.png" alt="image-20200513144018535"></p>
<p>​    从字面上说，就是将一个IP数据包套在另一个IP包里，使用到了Linux提供的隧道技术。可以理解为一个基于IP层的网桥，将两个本不通的网络通过点对点连接起来。</p>
<h2 id="2、准备环境"><a href="#2、准备环境" class="headerlink" title="2、准备环境"></a>2、准备环境</h2><p>​    准备一套k8s环境，并安装好IPIP模式的calico网络</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200513144603641.png" alt="image-20200513144603641"></p>
<p>master节点去污点，所以工作节点有两个</p>
<p>为了实验自己制作了一个tomcat镜像，Dockerfile文件如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> tomcat<br>COPY sources.list /etc/apt/<br><span class="hljs-builtin-name">RUN</span> rm -rf /etc/apt/sources.list.d/stretch.list<br><span class="hljs-builtin-name">RUN</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5<br><span class="hljs-builtin-name">RUN</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32<br><span class="hljs-builtin-name">RUN</span> apt-<span class="hljs-builtin-name">get</span> update<br><span class="hljs-builtin-name">RUN</span> apt-<span class="hljs-builtin-name">get</span> install curl --assume-yes<br><span class="hljs-builtin-name">RUN</span> apt-<span class="hljs-builtin-name">get</span> install net-tools --assume-yes<br><span class="hljs-builtin-name">RUN</span> apt-<span class="hljs-builtin-name">get</span> install tcpdump --assume-yes<br></code></pre></td></tr></table></figure>
<p>sources.list 是更新 apt 源为阿里源，因为默认的源速度基本为零，你会崩溃，如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-backports main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-proposed main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-security main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-updates main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-backports main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-proposed main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-security main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-updates main multiverse restricted universe<br></code></pre></td></tr></table></figure>
<p>分别在两台worker节点运行一个pod，简易pod的yaml文件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span>   <span class="hljs-string">tomcat-1.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-1</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br></code></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">label</span> <span class="hljs-string">nodes</span> <span class="hljs-string">node1</span> <span class="hljs-string">worker=node1</span><br><span class="hljs-string">cat</span>  <span class="hljs-string">tomcat-2.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">worker:</span> <span class="hljs-string">node1</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-2</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br></code></pre></td></tr></table></figure>
<p>运行成功后</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514145652207.png" alt="image-20200514145652207"></p>
<h2 id="3、网络结构解析"><a href="#3、网络结构解析" class="headerlink" title="3、网络结构解析"></a>3、网络结构解析</h2><h3 id="3-1-pod网络"><a href="#3-1-pod网络" class="headerlink" title="3.1 pod网络"></a>3.1 pod网络</h3><p>进入tomcat-1查看pod的网络</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">kubectl <span class="hljs-keyword">exec</span>  tomcat<span class="hljs-number">-1</span> <span class="hljs-comment">-- ip  a</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514145955617.png" alt="image-20200514145955617"></p>
<p>tomcat-2的网络</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514150112451.png" alt="image-20200514150112451"></p>
<p>可以看到，pod有tunl0、loopback和eth0。</p>
<h3 id="3-2-node网络"><a href="#3-2-node网络" class="headerlink" title="3.2 node网络"></a>3.2 node网络</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514150244522.png" alt="image-20200514150244522"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514150259938.png" alt="image-20200514150259938"></p>
<p>node2中除了enss33外，多了docker0和calib9c0cd39e90@if4（下面简称为cali.90），tunl0就是Calico在IPIP模式下的隧道名称 ，而cali.90是啥子类，该设备的编号为14。让我们回到pod2中，查看pod2内的ip link：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> exec tomcat-<span class="hljs-number">2</span> -- ip link show eth<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514150643688.png" alt="image-20200514150643688"></p>
<p>​    eth0@if14是这里eth0连接的设备号也是14！其实这个设备就是veth pair，K8s在创建Pod的时候，会创建一个veth pair设备。设备的一端是pod1的网卡，另一端就是我们在node中看见的cali.90了</p>
<h3 id="3-3-查看node路由信息"><a href="#3-3-查看node路由信息" class="headerlink" title="3.3 查看node路由信息"></a>3.3 查看node路由信息</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514151240574.png" alt="image-20200514151240574"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514151259199.png" alt="image-20200514151259199"></p>
<p>根据上节的信息，绘出当前实验网络的主要设备图</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20210317170658185.png" alt="image-20210317170658185"></p>
<h3 id="3-4-node之间连接"><a href="#3-4-node之间连接" class="headerlink" title="3.4 node之间连接"></a>3.4 node之间连接</h3><p>分别在两个node的Cali.4a、tunl0、eth0出进行抓包分析，结果如下图所示，其中Cali.4a与tunl0的ip完全一致，因此合并输出。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20210317172500934.png" alt="image-20210317172500934"></p>
<p>按照标志的1、2、3、4来依次分析：<br>1：pod-2中的eth0(即图中的vthe0)与Cali.4a是一对veth pair，因此，Cali.4a接收到的ip流向一定与vthe0相同，为 192.168.166.145&gt;192.168.104.20。查看之前的node1 route表，发现有一条 ：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514162458346.png" alt="image-20200514162458346"></p>
<p>​    所有发往192.168.104.0/255.255.255.192的ip报都需要通过tunl0，经过192.168.10.12作为gateway发送。因此，cali.4a的ip报会发往tunl0。</p>
<p>2、：经过tunl0的ip报会被再封上一层ip。通过node1的route规则，会发往ens33，因此我们在ens33处的抓包结果为 192.168.10.11 &gt; 192.168.10.12: IP 192.168.166.145&gt;192.168.104.20</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514162915550.png" alt="image-20200514162915550"></p>
<p>3、4：三和四其实就是1、2的逆过程，检查node2的route表即可知道流向。ens33将ipip拆封后，将流量发给tunl0，tunl0再转发给cali.90。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514163125773.png" alt="image-20200514163125773"></p>
<h2 id="4、node内连接"><a href="#4、node内连接" class="headerlink" title="4、node内连接"></a>4、node内连接</h2><p>​    如果是同一个node内的两个pod进行访问，通过上节的route规则就可以知道，Calico会为每一个node分配一小段网络，同时会为每个pod创建一个“入”的ip route规则。如下图所示，当从pod2访问pod3时，Cali.90是直接发出192.168.104.20-&gt; 192.168.104.21流量的，在node2的ip route中，发往192.168.104.21的ip报直接会被转发到cali.2f，不会用到tunl0，只有在node间访问的时候才会使用tunl0进行ipip封装！</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514163913189.png" alt="image-20200514163913189"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200514164536511.png" alt="image-20200514164536511"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20210317174206307.png" alt="image-20210317174206307"></p>
<p>参考文章：<a href="https://blog.csdn.net/u010771890/article/details/103224004">https://blog.csdn.net/u010771890/article/details/103224004</a></p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico策略演示</title>
    <url>/2021/03/17/Calico%E7%AD%96%E7%95%A5%E6%BC%94%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="1、创建前端，后端，客户端和管理用户界面应用程序"><a href="#1、创建前端，后端，客户端和管理用户界面应用程序" class="headerlink" title="1、创建前端，后端，客户端和管理用户界面应用程序"></a>1、创建前端，后端，客户端和管理用户界面应用程序</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/m</span>anifests/<span class="hljs-number">00</span>-namespace.yaml<br>kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/m</span>anifests/<span class="hljs-number">01</span>-management-ui.yaml<br>kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/m</span>anifests/<span class="hljs-number">02</span>-backend.yaml<br>kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/m</span>anifests/<span class="hljs-number">03</span>-frontend.yaml<br>kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/m</span>anifests/<span class="hljs-number">04</span>-client.yaml<br></code></pre></td></tr></table></figure>
<p>等待所有pod状态为running</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-comment">--all-namespaces</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426163641814.png" alt="image-20200426163641814"></p>
<p>可以通过<code>http://worker IP:30002</code>在浏览器中访问来查看UI 。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426163809157.png" alt="image-20200426163809157"></p>
<p>一旦所有Pod启动，它们就应该具有完全的连接性。您可以通过访问UI来查看。每个服务由图中的单个节点表示。</p>
<ul>
<li><code>backend</code>   -&gt;节点“ B”</li>
<li><code>frontend</code> -&gt;节点“ F”</li>
<li><code>client</code>     -&gt;节点“ C”</li>
</ul>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426163827895.png" alt="image-20200426163827895"></p>
<h2 id="2、启用隔离"><a href="#2、启用隔离" class="headerlink" title="2、启用隔离"></a>2、启用隔离</h2><p>运行以下命令将阻止所有对前端，后端和客户端服务的访问</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl create -n stars -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/</span>policies/default-deny.yaml<br>kubectl create -n client -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/</span>policies/default-deny.yaml<br></code></pre></td></tr></table></figure>
<h4 id="确认隔离"><a href="#确认隔离" class="headerlink" title="确认隔离"></a>确认隔离</h4><p>刷新管理用户界面（更改最多可能需要10秒钟才能反映在用户界面中）。现在我们启用了隔离，UI将不再能够访问窗格，因此它们将不再显示在UI中。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426164115133.png" alt="image-20200426164115133"></p>
<h2 id="3、允许UI使用网络策略对象访问服务"><a href="#3、允许UI使用网络策略对象访问服务" class="headerlink" title="3、允许UI使用网络策略对象访问服务"></a>3、允许UI使用网络策略对象访问服务</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/</span>policies/allow-ui.yaml<br>kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/</span>policies/allow-ui-client.yaml<br></code></pre></td></tr></table></figure>
<p>几秒钟后，刷新UI-现在应该显示服务，但它们之间不再能够访问彼此</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426164307545.png" alt="image-20200426164307545"></p>
<h2 id="4、创建backend-policy-yaml文件，以允许从前端到后端的流量"><a href="#4、创建backend-policy-yaml文件，以允许从前端到后端的流量" class="headerlink" title="4、创建backend-policy.yaml文件，以允许从前端到后端的流量"></a>4、创建backend-policy.yaml文件，以允许从前端到后端的流量</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/</span>policies/backend-policy.yaml<br></code></pre></td></tr></table></figure>
<p>刷新UI。您应该看到以下内容：</p>
<ul>
<li>前端现在可以访问后端（仅在TCP端口6379上）。</li>
<li>后端根本无法访问前端。</li>
<li>客户端无法访问前端，也无法访问后端。</li>
</ul>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426165939524.png" alt="image-20200426165939524"></p>
<h2 id="5、将前端服务公开到客户端名称空间"><a href="#5、将前端服务公开到客户端名称空间" class="headerlink" title="5、将前端服务公开到客户端名称空间"></a>5、将前端服务公开到客户端名称空间</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl create -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/security/</span>tutorials<span class="hljs-regexp">/kubernetes-policy-demo/</span>policies/frontend-policy.yaml<br></code></pre></td></tr></table></figure>
<p>客户端现在可以访问前端，但不能访问后端。前端和后端都无法启动与客户端的连接。前端仍然可以访问后端</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426170048710.png" alt="image-20200426170048710"></p>
<h2 id="6、清理名称空间"><a href="#6、清理名称空间" class="headerlink" title="6、清理名称空间"></a>6、清理名称空间</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">delete</span> ns client stars management-ui<br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://docs.projectcalico.org/security/tutorials/kubernetes-policy-demo/kubernetes-demo">https://docs.projectcalico.org/security/tutorials/kubernetes-policy-demo/kubernetes-demo</a></p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico网络策略基础</title>
    <url>/2021/03/17/Calico%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1、创建服务"><a href="#1、创建服务" class="headerlink" title="1、创建服务"></a>1、创建服务</h2><p>创建名称空间</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">create</span> ns <span class="hljs-keyword">policy</span>-demo<br></code></pre></td></tr></table></figure>
<p>在policy-demo命名空间中创建两个副本的Nginx Pod</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=policy-demo nginx <span class="hljs-attribute">--replicas</span>=2 <span class="hljs-attribute">--image</span>=nginx<br></code></pre></td></tr></table></figure>
<p>如果你和我反馈一样：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs oxygene">Flag --replicas <span class="hljs-keyword">has</span> been <span class="hljs-keyword">deprecated</span>, <span class="hljs-keyword">has</span> no effect <span class="hljs-keyword">and</span> will be removed <span class="hljs-keyword">in</span> the <span class="hljs-keyword">future</span><br></code></pre></td></tr></table></figure>
<p>是因为在K8S v1.18.0以后，–replicas已弃用 ,推荐用 deployment  创建 pods</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">vim</span> <span class="hljs-string">nginx-deployment.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">policy-demo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">nginx-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<p>通过服务暴露nginx的80端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl expose <span class="hljs-attribute">--namespace</span>=policy-demo deployment nginx <span class="hljs-attribute">--port</span>=80<br>kubectl <span class="hljs-builtin-name">get</span> all -n policy-demo<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424163428333.png" alt="image-20200424163428333"></p>
<p>通过busybox的pod去访问nginx服务</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">kubectl run <span class="hljs-params">--namespace=policy-demo</span> access <span class="hljs-params">--rm</span> -ti <span class="hljs-params">--image</span> busybox <span class="hljs-string">/bin/sh</span><br>wget -q nginx -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424163757094.png" alt="image-20200424163757094"></p>
<h2 id="2、启用网络隔离"><a href="#2、启用网络隔离" class="headerlink" title="2、启用网络隔离"></a>2、启用网络隔离</h2><p>​        在<code>policy-demo</code>命名空间中打开隔离。然后，Calico将阻止连接到该命名空间中的Pod。运行以下命令将创建一个NetworkPolicy，该策略将对<code>policy-demo</code>名称空间中的所有Pod实现默认的拒绝行为。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">kubectl</span> <span class="hljs-string">create -f - &lt;&lt;EOF</span><br><span class="hljs-attr">kind</span>: <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">apiVersion</span>: <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">metadata</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">default-deny</span><br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">policy-demo</span><br><span class="hljs-attr">spec</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">podSelector</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">matchLabels</span>: <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">EOF</span><br></code></pre></td></tr></table></figure>
<h2 id="3、测试隔离"><a href="#3、测试隔离" class="headerlink" title="3、测试隔离"></a>3、测试隔离</h2><p>将阻止所有对Nginx服务的访问。通过尝试再次访问该服务，可以看到效果</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=policy-demo access --rm -ti --image busybox /bin/sh<br>wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br></code></pre></td></tr></table></figure>
<p>会发现连接超时</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424164137593.png" alt="image-20200424164137593"></p>
<h2 id="4、允许通过网络策略进行访问"><a href="#4、允许通过网络策略进行访问" class="headerlink" title="4、允许通过网络策略进行访问"></a>4、允许通过网络策略进行访问</h2><p>​        现在，使用NetworkPolicy启用对nginx服务的访问。这将允许从<code>access</code>Pod 传入的连接，但不能从其他任何地方传入。</p>
<p>创建<code>access-nginx</code>具有以下内容的网络策略：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">access-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">policy-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">podSelector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ingress:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">from:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">podSelector:</span><br>          <span class="hljs-attr">matchLabels:</span><br>            <span class="hljs-attr">run:</span> <span class="hljs-string">access</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>
<p>从<code>access</code>Pod 访问该服务</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=policy-demo access --rm -ti --image busybox /bin/sh<br>wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424170231380.png" alt="image-20200424170231380"></p>
<p>如果没有标签run: access，仍然无法从访问服务，验证如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=policy-demo cant-access --rm -ti --image busybox /bin/sh<br>wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424170446307.png" alt="image-20200424170446307"></p>
<p>最后可以根据自己需求通过删除名称空间</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">delete</span> ns policy-<span class="hljs-built_in">demo</span><br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://docs.projectcalico.org/security/tutorials/kubernetes-policy-basic">https://docs.projectcalico.org/security/tutorials/kubernetes-policy-basic</a></p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico网络进阶</title>
    <url>/2021/03/17/Calico%E7%BD%91%E7%BB%9C%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="1、创建服务"><a href="#1、创建服务" class="headerlink" title="1、创建服务"></a>1、创建服务</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">create</span> ns advanced-<span class="hljs-keyword">policy</span>-demo<br></code></pre></td></tr></table></figure>
<p>由于k8s的v1.18.2版本启用了replicas命令，使用yaml文件创建nginx服务</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">vim</span> <span class="hljs-string">nginx-deployment.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">advanced-policy-demo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">nginx-deployment.yaml</span><br></code></pre></td></tr></table></figure>
<p>创建nginx的服务并暴露80端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl expose <span class="hljs-attribute">--namespace</span>=advanced-policy-demo deployment nginx <span class="hljs-attribute">--port</span>=80<br></code></pre></td></tr></table></figure>
<p>验证访问权限</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=advanced-policy-demo access --rm -ti --image busybox /bin/sh<br>wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426100838971.png" alt="image-20200426100838971"></p>
<p>并访问百度测试</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">wget -<span class="hljs-selector-tag">q</span> --timeout=<span class="hljs-number">5</span> www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426101419865.png" alt="image-20200426101419865"></p>
<h2 id="2、拒绝所有入口流量"><a href="#2、拒绝所有入口流量" class="headerlink" title="2、拒绝所有入口流量"></a>2、拒绝所有入口流量</h2><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">kubectl</span> <span class="hljs-string">create -f - &lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion</span>: <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind</span>: <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">metadata</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">default-deny-ingress</span><br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">advanced-policy-demo</span><br><span class="hljs-attr">spec</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">podSelector</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">matchLabels</span>: <span class="hljs-string">&#123;&#125;</span><br>  <span class="hljs-attr">policyTypes</span>:<span class="hljs-string"></span><br>  <span class="hljs-meta">-</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">EOF</span><br></code></pre></td></tr></table></figure>
<h3 id="2-1-验证访问权限"><a href="#2-1-验证访问权限" class="headerlink" title="2.1 验证访问权限"></a>2.1 验证访问权限</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=advanced-policy-demo access --rm -ti --image busybox /bin/sh<br>wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br>wget -q <span class="hljs-attribute">--timeout</span>=5 www.baidu.com -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426101818756.png" alt="image-20200426101818756"></p>
<p>可以看到，对Nginx服务的入口访问被拒绝，而仍然允许对出站Internet的出口访问。</p>
<h2 id="3、允许进入nginx的流量"><a href="#3、允许进入nginx的流量" class="headerlink" title="3、允许进入nginx的流量"></a>3、允许进入nginx的流量</h2><p>​        运行以下命令以创建一个<code>NetworkPolicy</code>，允许流量从<code>advanced-policy-demo</code>命名空间中的任何Pod到Nginx Pod</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">access-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">advanced-policy-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">podSelector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ingress:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">from:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">podSelector:</span><br>          <span class="hljs-attr">matchLabels:</span> &#123;&#125;<br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>
<p>验证访问nginx服务</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=advanced-policy-demo access --rm -ti --image busybox /bin/sh<br>wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426102539607.png" alt="image-20200426102539607"></p>
<p>创建策略后，我们现在可以访问nginx服务。</p>
<h2 id="4、拒绝所有出口流量"><a href="#4、拒绝所有出口流量" class="headerlink" title="4、拒绝所有出口流量"></a>4、拒绝所有出口流量</h2><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">kubectl</span> <span class="hljs-string">create -f - &lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion</span>: <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind</span>: <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">metadata</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">default-deny-egress</span><br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">advanced-policy-demo</span><br><span class="hljs-attr">spec</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">podSelector</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">matchLabels</span>: <span class="hljs-string">&#123;&#125;</span><br>  <span class="hljs-attr">policyTypes</span>:<span class="hljs-string"></span><br>  <span class="hljs-meta">-</span> <span class="hljs-string">Egress</span><br><span class="hljs-attr">EOF</span><br></code></pre></td></tr></table></figure>
<h3 id="4-1-验证访问权限，拒绝所有出口"><a href="#4-1-验证访问权限，拒绝所有出口" class="headerlink" title="4.1 验证访问权限，拒绝所有出口"></a>4.1 验证访问权限，拒绝所有出口</h3><p>现在，任何策略未明确允许的入站或出站流量都将被拒绝。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--namespace</span>=advanced-policy-demo access --rm -ti --image busybox /bin/sh<br>nslookup nginx<br>wget -q <span class="hljs-attribute">--timeout</span>=5 www.baidu.com -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426112302427.png" alt="image-20200426112302427"></p>
<h2 id="5、允许DNS出口流量"><a href="#5、允许DNS出口流量" class="headerlink" title="5、允许DNS出口流量"></a>5、允许DNS出口流量</h2><p>​    运行以下命令<code>name: kube-system</code>在<code>kube-system</code>名称空间上创建一个标签，并在上创建一个标签，该标签<code>NetworkPolicy</code>允许DNS从<code>advanced-policy-demo</code>名称空间中的任何Pod到名称空间<code>kube-system</code>的出站流量</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">label</span> <span class="hljs-string">namespace</span> <span class="hljs-string">kube-system</span> <span class="hljs-string">name=kube-system</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">allow-dns-access</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">advanced-policy-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">podSelector:</span><br>    <span class="hljs-attr">matchLabels:</span> &#123;&#125;<br>  <span class="hljs-attr">policyTypes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Egress</span><br>  <span class="hljs-attr">egress:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">namespaceSelector:</span><br>        <span class="hljs-attr">matchLabels:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">kube-system</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>
<h3 id="5-1-验证访问权限-允许DNS访问"><a href="#5-1-验证访问权限-允许DNS访问" class="headerlink" title="5.1 验证访问权限-允许DNS访问"></a>5.1 验证访问权限-允许DNS访问</h3><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">nslookup</span> <span class="hljs-selector-tag">nginx</span><br><span class="hljs-selector-tag">nslookup</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426113833101.png" alt="image-20200426113833101"></p>
<p>​        即使DNS出口流量现在正在工作，来自Advanced-policy-demo命名空间中所有pod的所有其他出口流量仍被阻止。因此，来自<code>wget</code>调用的HTTP出口流量仍将失败</p>
<h2 id="6、允许出口流量到nginx"><a href="#6、允许出口流量到nginx" class="headerlink" title="6、允许出口流量到nginx"></a>6、允许出口流量到nginx</h2><p>​        运行以下命令以创建一个<code>NetworkPolicy</code>，该命令允许从<code>advanced-policy-demo</code>名称空间中的任何Pod 到具有<code>app: nginx</code>相同名称空间中标签匹配的Pod的出站流量</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">NetworkPolicy</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">allow-egress-to-advance-policy-ns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">advanced-policy-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">podSelector:</span><br>    <span class="hljs-attr">matchLabels:</span> &#123;&#125;<br>  <span class="hljs-attr">policyTypes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Egress</span><br>  <span class="hljs-attr">egress:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">podSelector:</span><br>        <span class="hljs-attr">matchLabels:</span><br>          <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>
<h3 id="6-1-验证访问权限-允许对nginx进行出口访问"><a href="#6-1-验证访问权限-允许对nginx进行出口访问" class="headerlink" title="6.1 验证访问权限-允许对nginx进行出口访问"></a>6.1 验证访问权限-允许对nginx进行出口访问</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">wget -q <span class="hljs-attribute">--timeout</span>=5 nginx -O -<br>wget -q <span class="hljs-attribute">--timeout</span>=5 www.baidu.com -O -<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200426114229234.png" alt="image-20200426114229234"></p>
<p>​        访问百度超时，因为它可以解决DNS匹配标签以外的其他任何出口访问<code>app: nginx</code>的<code>advanced-policy-demo</code>命名空间</p>
<h2 id="7、清理名称空间"><a href="#7、清理名称空间" class="headerlink" title="7、清理名称空间"></a>7、清理名称空间</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">delete</span> ns advanced-policy-<span class="hljs-built_in">demo</span><br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://docs.projectcalico.org/security/tutorials/kubernetes-policy-advanced">https://docs.projectcalico.org/security/tutorials/kubernetes-policy-advanced</a></p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装PostgreSQL12</title>
    <url>/2021/01/05/CentOS7%E5%AE%89%E8%A3%85PostgreSQL12/</url>
    <content><![CDATA[<h3 id="1、进入官网下载所需版本"><a href="#1、进入官网下载所需版本" class="headerlink" title="1、进入官网下载所需版本"></a>1、进入官网下载所需版本</h3><p><a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303095053134.png" alt="image-20200303095053134"></p>
<h3 id="2、开始安装"><a href="#2、开始安装" class="headerlink" title="2、开始安装"></a>2、开始安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">yum install https:<span class="hljs-regexp">//</span>download.postgresql.org<span class="hljs-regexp">/pub/</span>repos<span class="hljs-regexp">/yum/</span>reporpms<span class="hljs-regexp">/EL-7-x86_64/</span>pgdg-redhat-repo-latest.noarch.rpm -y<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303095233768.png" alt="image-20200303095233768"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install postgresql<span class="hljs-number">12</span> -y<br><span class="hljs-attribute">yum</span> install postgresql<span class="hljs-number">12</span>-server -y<br></code></pre></td></tr></table></figure>
<h3 id="3、数据库初始化与设置自启动"><a href="#3、数据库初始化与设置自启动" class="headerlink" title="3、数据库初始化与设置自启动"></a>3、数据库初始化与设置自启动</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>pgsql-<span class="hljs-number">12</span><span class="hljs-regexp">/bin/</span>postgresql-<span class="hljs-number">12</span>-setup initdb<br>systemctl enable postgresql-<span class="hljs-number">12</span><br>systemctl start postgresql-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303100416097.png" alt="image-20200303100416097"></p>
<p>​        这一步初始化数据库命令会在 /var/lib/pgsql 目录下创建名称为12文件夹，12为数据库版本。这里如果已经有对应版本的文件夹了，初始化这一步会报错，需要你自行去删除对应的文件夹，再去初始化。</p>
<h3 id="4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改"><a href="#4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改" class="headerlink" title="4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改"></a>4、默认会创建一个名为postgres的linux登录用户，这里进行密码修改</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303100954704.png" alt="image-20200303100954704"></p>
<h3 id="5、修改配置文件"><a href="#5、修改配置文件" class="headerlink" title="5、修改配置文件"></a>5、修改配置文件</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303102201925.png" alt="image-20200303102201925"></p>
<h4 id="5-1修改postgresql-conf"><a href="#5-1修改postgresql-conf" class="headerlink" title="5.1修改postgresql.conf"></a>5.1修改postgresql.conf</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">修改：<span class="hljs-meta">#listen_addresses = <span class="hljs-string">&#x27;localhost&#x27;</span>为listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span></span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303102710321.png" alt="image-20200303102710321"></p>
<h4 id="5-2修改pg-hba-conf"><a href="#5-2修改pg-hba-conf" class="headerlink" title="5.2修改pg_hba.conf"></a>5.2修改pg_hba.conf</h4><p>修改前</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303103002192.png" alt="image-20200303103002192"></p>
<p>修改后</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303103124544.png" alt="image-20200303103124544"></p>
<p>并重新启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs undefined">systemctl restart postgresql-12<br></code></pre></td></tr></table></figure>
<h3 id="6、设置登录数据库账密"><a href="#6、设置登录数据库账密" class="headerlink" title="6、设置登录数据库账密"></a>6、设置登录数据库账密</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">su postgres              <span class="hljs-meta">#不能使用root用户登录，切换到普通用户</span><br>psql -U postgres<br>\password                <span class="hljs-meta">#设置用户密码</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">version</span>(<span class="hljs-params"></span>)</span>;        <span class="hljs-meta">#查看版本</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303104354374.png" alt="image-20200303104354374"></p>
<h3 id="7、登录并测试数据库连接"><a href="#7、登录并测试数据库连接" class="headerlink" title="7、登录并测试数据库连接"></a>7、登录并测试数据库连接</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303105037116.png" alt="image-20200303105037116"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303105103983.png" alt="image-20200303105103983"></p>
<p>参考文章：<a href="https://www.jianshu.com/p/b4a759c2208f">https://www.jianshu.com/p/b4a759c2208f</a></p>
]]></content>
      <categories>
        <category>关系型数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos记录所有用户登录和操作的详细日志</title>
    <url>/2021/01/20/Centos%E8%AE%B0%E5%BD%95%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%92%8C%E6%93%8D%E4%BD%9C%E7%9A%84%E8%AF%A6%E7%BB%86%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="1、起因"><a href="#1、起因" class="headerlink" title="1、起因"></a>1、起因</h2><p>​        最近Linux服务器上一些文件被篡改，想追查已经查不到记录了，所以得想个办法记录下所有用户的操作记录。</p>
<p>​        一般大家通常会采用history来记录，但是history有个缺陷就是默认是1000行，当然你也可以vim /etc/profile将1000修改成1000000行，但是这只是比较笼统的做法，看不到详细的用户来源已经操作记录，比如来源ip地址、操作时间、操作用户等。</p>
<h2 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cat  <span class="hljs-regexp">/etc/</span>passwd              <span class="hljs-comment">#查看可以登录的用户</span><br>mkdir  -p  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span>admin           <span class="hljs-comment">#创建可登录用户的目录</span><br>chown  -R admin:admin  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span>admin         <span class="hljs-comment">#给各个用户赋予权限</span><br></code></pre></td></tr></table></figure>
<h2 id="3、自动记录脚本"><a href="#3、自动记录脚本" class="headerlink" title="3、自动记录脚本"></a>3、自动记录脚本</h2><p>在/etc/profile文件的末尾追加编写脚本如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#set user history</span><br>history<br>USER=`whoami`<br>USER_IP=`who -u am i <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span>null| awk <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span>|sed -e <span class="hljs-string">&#x27;s/[()]//g&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$USER_IP&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]; then<br>    USER_IP=`hostname`<br>fi<br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-regexp">/var/</span>log/history ]; then<br>    mkdir <span class="hljs-regexp">/var/</span>log/history<br>    chmod <span class="hljs-number">777</span> <span class="hljs-regexp">/var/</span>log/history<br>fi<br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span><span class="hljs-variable">$&#123;LOGNAME&#125;</span> ]; then<br>    mkdir <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span><span class="hljs-variable">$&#123;LOGNAME&#125;</span><br>    chown -R <span class="hljs-variable">$&#123;LOGNAME&#125;</span>:<span class="hljs-variable">$&#123;LOGNAME&#125;</span> <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span><span class="hljs-variable">$&#123;LOGNAME&#125;</span><br>    chmod <span class="hljs-number">770</span> <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span><span class="hljs-variable">$&#123;LOGNAME&#125;</span><br>fi<br>export HISTSIZE=<span class="hljs-number">4096</span><br>DT=`date +<span class="hljs-string">&quot;%Y%m%d_%H:%M:%S&quot;</span>`<br>export HISTFILE=<span class="hljs-string">&quot;/var/log/history/$&#123;LOGNAME&#125;/$&#123;USER&#125;@$&#123;USER_IP&#125;_$DT&quot;</span><br>chmod <span class="hljs-number">660</span> <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/history/</span><span class="hljs-variable">$&#123;LOGNAME&#125;</span><span class="hljs-regexp">/*history* 2&gt;/</span>dev/null<br></code></pre></td></tr></table></figure>
<p>最后刷新配置</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span>   <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure>
<p>而每次用户登录到退出都会产生以用户名、登录ip地址、操作时间为文件名的文件，文件里面包含本次用户的所有操作记录。</p>
<p>参考文章：<a href="https://www.cnblogs.com/harlanzhang/p/10273379.html">https://www.cnblogs.com/harlanzhang/p/10273379.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 最实用命令行</title>
    <url>/2021/03/22/Docker-%E6%9C%80%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><p>为了整理CLI，Docker 1.13引进了新的管理命令，如下：</p>
<ul>
<li>system</li>
<li>container</li>
<li>image</li>
</ul>
<p>Docker的老版本中已经有了 network, node, service, swarm 和 volume 。这些新命令组子命令过去作为root命令直接实现。</p>
<h2 id="Docker系统"><a href="#Docker系统" class="headerlink" title="Docker系统"></a>Docker系统</h2><p>​        现在有一个新管理命令 system 。它有4个子命令分别是 df, events, info 和 prune  。命令 docker system df  提供Docker整体磁盘使用率的概况，包括镜像、容器和（本地）volume。所以我们现在随时都可以查看Docker使用了多少资源。</p>
<p>​        如果之前的命令展示出 docker 已经占用了太多空间，我们会开始清理。有一个包办一切的命令：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">docker <span class="hljs-keyword">system</span> prune<br></code></pre></td></tr></table></figure>
<p>​        这个命令会删除当前没有被使用的一切项目，它按照一种正确的序列进行清理，所以会达到最大化的输出结果。首先删除没有被使用的容器，然后是volume和网络，最后是挂起的镜像。通过使用 y 回复来确认操作。如果想在脚本中使用这个命令，可以使用参数 –force 或者 -f 告诉Docker不要发来确认请求。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">docker <span class="hljs-keyword">system</span> prune后可以加额外的参数，如：<br>docker <span class="hljs-keyword">system</span> prune -<span class="hljs-keyword">a</span> ： 一并清除所有未被使用的镜像和没有tag镜像。<br>docker <span class="hljs-keyword">system</span> prune -f ： 用以强制删除，不提示信息。<br></code></pre></td></tr></table></figure>
<h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p>​        我们已经知道许多 docker container 的子命令。它们过去（现在也是）是 docker 的直接子命令。可以通过下面的命令得到完整的子命令列表：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">docker <span class="hljs-built_in">container</span> prune<br></code></pre></td></tr></table></figure>
<p>​        在列表中会看到一个 prune 命令。如果使用它，那么只会删除无用的容器。因此这条命令比 docker system prune 命令更局限。使用 –force 或者 -f 同意可以让CLI不再进行确认请求。</p>
<h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>这里也有一个 prune 命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network prune</span><br></code></pre></td></tr></table></figure>
<p>删除所有没有使用的网络。</p>
<h2 id="Docker-Volume"><a href="#Docker-Volume" class="headerlink" title="Docker Volume"></a>Docker Volume</h2><p>volume也有新的 prune 命令了：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="bash"> prune</span><br></code></pre></td></tr></table></figure>
<p>删除所有（本地）没有被容器使用的volume。</p>
<h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>新的镜像命令也是 prune 子命令。–force 用法如上面一样， –all 可以删除所有不用的镜像，不只挂起的镜像。</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">docker</span> <span class="hljs-comment">image</span> <span class="hljs-comment">prune</span> --<span class="hljs-comment">force</span> --<span class="hljs-comment">all</span><br></code></pre></td></tr></table></figure>
<p>这个命令可以删除所有不使用的镜像并且不再请求确认。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK收集K8s日志</title>
    <url>/2021/03/16/EFK%E6%94%B6%E9%9B%86K8s%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>备注：所需镜像都会去外网拉取，所以镜像需要自己想办法！！！</p>
<p>环境介绍：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311104450873.png" alt="image-20200311104450873"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311104505003.png" alt="image-20200311104505003"></p>
<h3 id="一、下载elasticsearch安装包"><a href="#一、下载elasticsearch安装包" class="headerlink" title="一、下载elasticsearch安装包"></a>一、下载elasticsearch安装包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> pull stable/elasticsearch<br><span class="hljs-attribute">tar</span> xvf elasticsearch-<span class="hljs-number">1</span>.<span class="hljs-number">32</span>.<span class="hljs-number">4</span>.tgz      #可以根据自己需求修改elasticsearch/values.yaml文件<br><span class="hljs-attribute">helm</span> install elasticsearch -n efk ./elasticsearch<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311105442100.png" alt="image-20200311105442100"></p>
<p>创建pv</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311115637255.png" alt="image-20200311115637255"></p>
<p>查看pod状态</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311115704635.png" alt="image-20200311115704635"></p>
<h3 id="二、安装kibana"><a href="#二、安装kibana" class="headerlink" title="二、安装kibana"></a>二、安装kibana</h3><p>下载解压</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> pull stable/kibana<br><span class="hljs-attribute">tar</span> xvf kibana-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.tgz<br><span class="hljs-attribute">vim</span> kibana/values.yaml             #修改类型为NodePort<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311135212537.png" alt="image-20200311135212537"></p>
<p>安装</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311135317733.png" alt="image-20200311135317733"></p>
<p>关联es</p>
<p>通过svc可以看到es的service名称为elasticsearch-client</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311135913621.png" alt="image-20200311135913621"></p>
<p>修改kibana的ConfigMap文件</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311140103657.png" alt="image-20200311140103657"></p>
<h3 id="三、安装fluentd"><a href="#三、安装fluentd" class="headerlink" title="三、安装fluentd"></a>三、安装fluentd</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> pull stable/fluentd<br><span class="hljs-attribute">tar</span> xvf fluentd-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.tgz<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311150432250.png" alt="image-20200311150432250"></p>
<p>修改输出的es地址</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311151240927.png" alt="image-20200311151240927"></p>
<p>挂载日志目录</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311154522739.png" alt="image-20200311154522739"></p>
<p>修改fluetd的configmap文件</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200311155734588.png" alt="image-20200311155734588"></p>
<p>添加以下</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">containers.<span class="hljs-built_in">input</span>.conf: |-<br>  &lt;source&gt;<br>    @id fluentd-containers.<span class="hljs-built_in">log</span><br>    @<span class="hljs-built_in">type</span> tail<br>    <span class="hljs-built_in">path</span> /var/<span class="hljs-built_in">log</span>/*/*.<span class="hljs-built_in">log</span>    #fluentd容器中所挂载的日志目录<br>    pos_file /var/<span class="hljs-built_in">log</span>/es-containers.<span class="hljs-built_in">log</span>.pos<br>    tag raw.kubernetes.*<br>    read_from_head <span class="hljs-literal">true</span><br>    &lt;parse&gt;<br>      @<span class="hljs-built_in">type</span> multi_format<br>      &lt;pattern&gt;<br>        <span class="hljs-built_in">format</span> json<br>        time_key <span class="hljs-built_in">time</span><br>        time_format %Y-%m-%dT%H:%M:%S.%NZ<br>      &lt;/pattern&gt;<br>      &lt;pattern&gt;<br>        <span class="hljs-built_in">format</span> /^(?&lt;<span class="hljs-built_in">time</span>&gt;.+) (?&lt;stream&gt;<span class="hljs-built_in">stdout</span>|<span class="hljs-built_in">stderr</span>) [^ ]* (?&lt;<span class="hljs-built_in">log</span>&gt;.*)$/<br>        time_format %Y-%m-%dT%H:%M:%S.%N%:z<br>      &lt;/pattern&gt;<br>    &lt;/parse&gt;<br>  &lt;/source&gt;<br>  # Detect exceptions <span class="hljs-keyword">in</span> the <span class="hljs-built_in">log</span> <span class="hljs-built_in">output</span> <span class="hljs-keyword">and</span> forward them as one <span class="hljs-built_in">log</span> entry.<br>  &lt;<span class="hljs-built_in">match</span> raw.kubernetes.**&gt;<br>    @id raw.kubernetes<br>    @<span class="hljs-built_in">type</span> detect_exceptions<br>    remove_tag_prefix raw<br>    message <span class="hljs-built_in">log</span><br>    stream stream<br>    multiline_flush_interval <span class="hljs-number">5</span><br>    max_bytes <span class="hljs-number">500000</span><br>    max_lines <span class="hljs-number">1000</span><br>  &lt;/<span class="hljs-built_in">match</span>&gt;<br></code></pre></td></tr></table></figure>
<h3 id="四、访问kibana"><a href="#四、访问kibana" class="headerlink" title="四、访问kibana"></a>四、访问kibana</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200312102202960.png" alt="image-20200312102202960"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200312102235114.png" alt="image-20200312102235114"></p>
<p>参考文章：<a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/fluentd-elasticsearch">https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/fluentd-elasticsearch</a></p>
]]></content>
      <categories>
        <category>Elk</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言for循环控制</title>
    <url>/2021/04/09/Go%E8%AF%AD%E8%A8%80for%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="for-循环的基本语法"><a href="#for-循环的基本语法" class="headerlink" title="for 循环的基本语法"></a>for 循环的基本语法</h2><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">语法格式<br>for 循环变量初始化<span class="hljs-comment">; 循环条件; 循环变量迭代 &#123;</span><br>循环操作(语句)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>对上面的语法格式说明</p>
<ol>
<li><p>循环变量初始化</p>
</li>
<li><p>循环条件</p>
</li>
<li><p>循环操作(语句) ,有人也叫循环体。</p>
</li>
<li><p>循环变量迭代</p>
</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> 循环执行的顺序说明：<br><span class="hljs-attribute">1</span>) 执行循环变量初始化，比如 i := <span class="hljs-number">1</span><br><span class="hljs-attribute">2</span>) 执行循环条件， 比如 i &lt;= <span class="hljs-number">10</span><br><span class="hljs-attribute">3</span>) 如果循环条件为真，就执行循环操作 :比如 fmt.Println(“....”)<br><span class="hljs-attribute">4</span>) 执行循环变量迭代 , 比如 i++<br><span class="hljs-attribute">5</span>) 反复执行 <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> 步骤，直到 循环条件为 False ，就退出 for 循环<br></code></pre></td></tr></table></figure>
<h2 id="for-循环的使用注意事项和细节讨论"><a href="#for-循环的使用注意事项和细节讨论" class="headerlink" title="for 循环的使用注意事项和细节讨论"></a>for 循环的使用注意事项和细节讨论</h2><h3 id="1-循环条件是返回一个-布尔值的表达式"><a href="#1-循环条件是返回一个-布尔值的表达式" class="headerlink" title="1)  循环条件是返回一个 布尔值的表达式"></a>1)  循环条件是返回一个 布尔值的表达式</h3><h3 id="2-for-循环的第二种使用方式"><a href="#2-for-循环的第二种使用方式" class="headerlink" title="2) for 循环的第二种使用方式"></a>2) for 循环的第二种使用方式</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span> 循环判断条件 &#123;<br><span class="hljs-regexp">//</span>循环执行语句<br>&#125;<br></code></pre></td></tr></table></figure>
<p>将变量初始化和变量迭代写到其它位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">package</span> <span class="hljs-selector-tag">main</span><br><br><span class="hljs-selector-tag">import</span> &quot;<span class="hljs-selector-tag">fmt</span>&quot;<br><br><span class="hljs-selector-tag">func</span> <span class="hljs-selector-tag">main</span>() &#123;<br>	<span class="hljs-attribute">i </span>:= <span class="hljs-number">5</span><br>	for i &lt;= <span class="hljs-number">10</span> &#123;<br>		fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>		i++<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="3-for-循环的第三种使用方式"><a href="#3-for-循环的第三种使用方式" class="headerlink" title="3) for 循环的第三种使用方式"></a>3) for 循环的第三种使用方式</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-regexp">//</span>循环执行语句<br>&#125;<br></code></pre></td></tr></table></figure>
<p>上面的写法价 等价 for ; ; {} 是一个 无限循环， 通常需要 配合 break  语句使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	i := <span class="hljs-number">5</span><br>	<span class="hljs-keyword">for</span> &#123;<br>		<span class="hljs-keyword">if</span> i &lt;= <span class="hljs-number">100</span> &amp;&amp; i &gt;= <span class="hljs-number">0</span> &#123;<br>			fmt.Println(<span class="hljs-string">&quot;ok&quot;</span>)<br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-keyword">break</span><br>		&#125;<br>		i++<br>	&#125;<br>	fmt.Println(<span class="hljs-string">&quot;i=&quot;</span>, i)<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-Golang-提供-for-range-的方式，可以方便遍历字符串和数组"><a href="#4-Golang-提供-for-range-的方式，可以方便遍历字符串和数组" class="headerlink" title="4) Golang 提供 for-range 的方式，可以方便遍历字符串和数组"></a>4) Golang 提供 for-range 的方式，可以方便遍历字符串和数组</h3><p>字符串遍历方式 1-传统方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;hello 明天&quot;</span><br>	str2 := []<span class="hljs-keyword">rune</span>(str)   <span class="hljs-comment">//str转成[]rune切片</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(str2); i++ &#123;<br>		fmt.Printf(<span class="hljs-string">&quot;%c\n&quot;</span>, str2[i])   <span class="hljs-comment">//长度为下标数</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>字符串遍历方式 2-for - range</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;hello 明天&quot;</span><br>	<span class="hljs-keyword">for</span> index, val := <span class="hljs-keyword">range</span> str &#123;<br>		fmt.Printf(<span class="hljs-string">&quot;index=%d, val=%c\n&quot;</span>, index, val)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">//打印 1~100 之间所有是 9 的倍数的整数的个数及总和</span><br>	<span class="hljs-keyword">var</span> num <span class="hljs-keyword">int64</span> = <span class="hljs-number">100</span><br>	<span class="hljs-keyword">var</span> cun <span class="hljs-keyword">int64</span> = <span class="hljs-number">0</span><br>	<span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int64</span> = <span class="hljs-number">0</span><br>	<span class="hljs-keyword">var</span> i <span class="hljs-keyword">int64</span> = <span class="hljs-number">1</span>     <span class="hljs-comment">//i和num类型必须一致</span><br>	<span class="hljs-keyword">for</span> ; i &lt;= num; i++ &#123;<br>		<span class="hljs-keyword">if</span> i%<span class="hljs-number">9</span> == <span class="hljs-number">0</span> &#123;<br>			cun++<br>			sum += i<br>		&#125;<br>	&#125;<br>	fmt.Printf(<span class="hljs-string">&quot;cun=%v\nsum=%v\n&quot;</span>, cun, sum)<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">// 完成下面的表达式输出 ，6 是可变的</span><br>	<span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span> = <span class="hljs-number">6</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= n; i++ &#123;<br>		fmt.Printf(<span class="hljs-string">&quot;%v + %v = %v\n&quot;</span>, i, n-i, n)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">package main<br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">func</span> main() &#123;<br>	<span class="hljs-regexp">//</span> 使用 <span class="hljs-keyword">for</span> 循环完成下面的案例请编写一个程序，可以接收一个整数,表示层数，打印出金字塔<br>	<span class="hljs-regexp">//</span><span class="hljs-number">1</span>、先打印矩形<br>	<span class="hljs-regexp">//</span><span class="hljs-number">2</span>、打印半个三角形，规律每行个数和行数相等即j=i<br>	<span class="hljs-regexp">//</span><span class="hljs-number">3</span>、打印整个金字塔<span class="hljs-number">2</span>*层数-<span class="hljs-number">1</span><br>	<span class="hljs-regexp">//</span><span class="hljs-number">4</span>、打印空格，总层数-层数<br>	<span class="hljs-regexp">//</span><span class="hljs-number">5</span>、用变量表示层数<br>	<span class="hljs-regexp">//</span><span class="hljs-number">6</span>、空心金字塔只打印第一个和最后一个*,如果行数是最后一行则全部打印*<br>	var level int = <span class="hljs-number">9</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= level; i++ &#123; <span class="hljs-regexp">//i</span>表示层数<br>		<span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= level-i; k++ &#123;<br>			fmt.Print(<span class="hljs-string">&quot; &quot;</span>)         <span class="hljs-regexp">//</span>Print 使用其操作数的默认格式进行格式化并写入到标准输出<br>		&#125;<br><br>		<span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>; j++ &#123; <span class="hljs-regexp">//</span>j表示每行打印几个<br>			<span class="hljs-keyword">if</span> j == <span class="hljs-number">1</span> || j == <span class="hljs-number">2</span>*i-<span class="hljs-number">1</span> || i == level &#123;<br>				fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>			&#125; <span class="hljs-keyword">else</span> &#123;<br>				fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>			&#125;<br>		&#125;<br>		fmt.Println() <span class="hljs-regexp">//</span>相当于换行符<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">// 打印乘九九法表</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++ &#123; <span class="hljs-comment">//i表示层数</span><br>		<span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= i; j++ &#123;<br>			fmt.Printf(<span class="hljs-string">&quot;%v * %v = %v \t&quot;</span>, j, i, j*i) <span class="hljs-comment">//%t制表符</span><br>		&#125;<br>		fmt.Println()<br>	&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="控制语句break"><a href="#控制语句break" class="headerlink" title="控制语句break"></a>控制语句break</h2><h3 id="break入门案例"><a href="#break入门案例" class="headerlink" title="break入门案例"></a>break入门案例</h3><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>	<span class="hljs-string">&quot;math/rand&quot;</span><br>	<span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">//随机生成 1-100 的一个数，直到生成了 99 这个数，看看你一共用了几次?</span><br>	<span class="hljs-keyword">var</span> count <span class="hljs-keyword">int</span> = <span class="hljs-number">0</span> <span class="hljs-comment">//总共使用的次数</span><br>	<span class="hljs-keyword">for</span> &#123;<br>		rand.Seed(time.Now().UnixNano()) <span class="hljs-comment">//UnixNano返回t作为Unix时间，这是自1970年1月1日UTC以来经过的纳秒数</span><br>		n := rand.Intn(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>          <span class="hljs-comment">//Intn从默认Source返回[0，n）中的非负伪随机数作为int</span><br>		fmt.Println(<span class="hljs-string">&quot;n=&quot;</span>, n)             <span class="hljs-comment">//打出随机数</span><br>		count++                          <span class="hljs-comment">//打印使用次数</span><br>		<span class="hljs-keyword">if</span> n == <span class="hljs-number">99</span> &#123;<br>			<span class="hljs-keyword">break</span><br>		&#125;<br>	&#125;<br>	fmt.Printf(<span class="hljs-string">&quot;一共使用了%v次&quot;</span>, count)<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>break 语句用于终止某个语句块的执行，用于中断当前 for 循环或跳出 switch 语句。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">&#123; ……<br><span class="hljs-keyword">break</span><br>……<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="break-的注意事项和使用细节"><a href="#break-的注意事项和使用细节" class="headerlink" title="break 的注意事项和使用细节"></a>break 的注意事项和使用细节</h3><p>(1) break 默认会跳出最近的 for 循环</p>
<p>(2) break 后面可以指定标签，跳出标签对应的 for 循环</p>
<h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">//100 以内的数求和，求出 当和 第一次大于 20 的当前数</span><br>	<span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int</span> <span class="hljs-comment">//定义接收和的参数</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>		sum = i + i<br>		<span class="hljs-keyword">if</span> sum &gt;= <span class="hljs-number">20</span> &#123;<br>			fmt.Printf(<span class="hljs-string">&quot;第一次大于20的当前数是%v&quot;</span>, i)<br>			<span class="hljs-keyword">break</span><br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">//实现登录验证，有三次机会，如果用户名为”tom” ,密码”888”提示登录成功，否则提示还有几次机会</span><br>	<span class="hljs-keyword">var</span> name <span class="hljs-keyword">string</span><br>	<span class="hljs-keyword">var</span> passwd <span class="hljs-keyword">string</span><br>	<span class="hljs-keyword">var</span> login <span class="hljs-keyword">int</span> = <span class="hljs-number">3</span>    <span class="hljs-comment">//定义登陆次数接收</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++ &#123;<br>		fmt.Println(<span class="hljs-string">&quot;请输入用户名&quot;</span>)<br>		fmt.Scanln(&amp;name)<br>		fmt.Println(<span class="hljs-string">&quot;请输入密码&quot;</span>)<br>		fmt.Scanln(&amp;passwd)<br>		<span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;tom&quot;</span> &amp;&amp; passwd == <span class="hljs-string">&quot;888&quot;</span> &#123;<br>			fmt.Println(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br>			<span class="hljs-keyword">break</span><br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			login--<br>			fmt.Printf(<span class="hljs-string">&quot;剩余次数为%v\n&quot;</span>, login)<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">if</span> login == <span class="hljs-number">0</span> &#123;<br>		fmt.Println(<span class="hljs-string">&quot;次数用完&quot;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句-continue"></a>跳转控制语句-continue</h2><h3 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h3><p>continue 语句用于 结束本次循环，继续 执行下一次循环。</p>
<p>continue 语句出现在多层嵌套的循环语句体中时，环 可以通过标签指明要跳过的是哪一层循环 , 这个和前面的 break 标签的使用的规则一样.</p>
<h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">&#123; ……<br><span class="hljs-keyword">continue</span><br>……<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h3><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">//打印1--100的奇数</span><br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>		<span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>			<span class="hljs-keyword">continue</span><br>		&#125;<br>		fmt.Printf(<span class="hljs-string">&quot;奇数有%v\n&quot;</span>, i)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">// 某人有 100,000 元,每经过一次路口，需要交费,规则如下:</span><br>	<span class="hljs-comment">// 当现金&gt;50000 时,每次交 5%</span><br>	<span class="hljs-comment">// 当现金&lt;=50000 时,每次交 1000</span><br>	<span class="hljs-comment">// 编程计算该人可以经过多少次路口,使用 for break 方式完成</span><br><br>	<span class="hljs-keyword">var</span> a <span class="hljs-keyword">float64</span> = <span class="hljs-number">100000</span> <span class="hljs-comment">//总共有多少钱</span><br>	<span class="hljs-keyword">var</span> b <span class="hljs-keyword">float64</span>          <span class="hljs-comment">//现金大于50000还剩余多少钱</span><br>	<span class="hljs-keyword">var</span> e <span class="hljs-keyword">float64</span>          <span class="hljs-comment">//现金低于50000还剩多少钱</span><br>	<span class="hljs-keyword">var</span> c <span class="hljs-keyword">int</span>              <span class="hljs-comment">//现金大于50000时能经过的次数</span><br>	<span class="hljs-keyword">var</span> d <span class="hljs-keyword">int</span>              <span class="hljs-comment">//现金低于50000时能经过的次数</span><br>	<span class="hljs-keyword">var</span> f <span class="hljs-keyword">int</span>              <span class="hljs-comment">//总共能经过多少次</span><br>	<span class="hljs-keyword">for</span> b = a; b &gt; <span class="hljs-number">50000</span>; b -= b * <span class="hljs-number">0.05</span> &#123;<br>		c++<br>	&#125;<br>	<span class="hljs-keyword">for</span> e = b; e &lt; <span class="hljs-number">50000</span>; e -= <span class="hljs-number">1000</span> &#123;<br>		d++<br>		<span class="hljs-keyword">if</span> e &lt; <span class="hljs-number">1000</span> &#123;<br>			<span class="hljs-keyword">break</span><br>		&#125;<br>	&#125;<br>	f = c + d<br>	fmt.Println(<span class="hljs-string">&quot;c&quot;</span>, c)<br>	fmt.Println(<span class="hljs-string">&quot;d&quot;</span>, d)<br>	fmt.Printf(<span class="hljs-string">&quot;总共可以经过%v次,还剩%v钱&quot;</span>, f, e)<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="goto-基本介绍"><a href="#goto-基本介绍" class="headerlink" title="goto 基本介绍"></a>goto 基本介绍</h2><h3 id="goto-基本介绍-1"><a href="#goto-基本介绍-1" class="headerlink" title="goto 基本介绍"></a>goto 基本介绍</h3><ol>
<li><p>Go 语言的 goto 语句可以无条件地转移到程序中指定的行。</p>
</li>
<li><p>goto 语句通常与条件语句配合使用。可用来实现条件转移，跳出循环体等功能。</p>
</li>
<li><p>在 Go 程序设计中 一般不主张使用 goto  语句， 以免造成程序流程的混乱，使理解和调试程序都产生困难</p>
</li>
</ol>
<p>goto 基本语法</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">goto <span class="hljs-keyword">label</span><br><span class="bash">.. .</span><br><span class="hljs-keyword">label</span><span class="bash">: statement</span><br></code></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br>func main() &#123;<br><br>	var i <span class="hljs-keyword">int</span> = <span class="hljs-number">40</span><br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;d&quot;</span>)<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;a&quot;</span>)<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;s&quot;</span>)<br>	<span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">30</span> &#123;<br>		goto label1<br>	&#125;<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;f&quot;</span>)<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;g&quot;</span>)<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;h&quot;</span>)<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;j&quot;</span>)<br>label1:<br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;k&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言为并发而生</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E4%B8%BA%E5%B9%B6%E5%8F%91%E8%80%8C%E7%94%9F/</url>
    <content><![CDATA[<p>​        在早期 CPU 都是以单核的形式顺序执行机器指令。Go语言的祖先C语言正是这种顺序编程语言的代表。顺序编程语言中的顺序是指：所有的指令都是以串行的方式执行，在相同的时刻有且仅有一个 CPU 在顺序执行程序的指令。</p>
<p>​         随着处理器技术的发展，单核时代以提升处理器频率来提高运行效率的方式遇到了瓶颈，单核 CPU 发展的停滞，给多核 CPU 的发展带来了机遇。相应地，编程语言也开始逐步向并行化的方向发展。</p>
<p>​         虽然一些编程语言的框架在不断地提高多核资源使用效率，例如 <a href="http://c.biancheng.net/java/">Java</a> 的 Netty 等，但仍然需要开发人员花费大量的时间和精力搞懂这些框架的运行原理后才能熟练掌握。</p>
<p>​         作为程序员，要开发出能充分利用硬件资源的应用程序是一件很难的事情。现代计算机都拥有多个核，但是大部分编程语言都没有有效的工具让程序可以轻易利用这些资源。编程时需要写大量的线程同步代码来利用多个核，很容易导致错误。</p>
<p>​         Go语言正是在多核和网络化的时代背景下诞生的原生支持并发的编程语言。Go语言从底层原生支持并发，无须第三方库，开发人员可以很轻松地在编写程序时决定怎么使用 CPU 资源。</p>
<p>​         Go语言的并发是基于 goroutine 的，goroutine 类似于线程，但并非线程。可以将 goroutine  理解为一种虚拟线程。Go语言运行时会参与调度 goroutine，并将 goroutine 合理地分配到每个 CPU 中，最大限度地使用 CPU 性能。</p>
<p>​         多个 goroutine 中，Go语言使用通道（channel）进行通信，通道是一种内置的<a href="http://c.biancheng.net/data_structure/">数据结构</a>，可以让用户在不同的 goroutine 之间同步发送具有类型的消息。这让编程模型更倾向于在 goroutine 之间发送消息，而不是让多个 goroutine 争夺同一个数据的使用权。</p>
<p>​         程序可以将需要并发的环节设计为生产者模式和消费者的模式，将数据放入通道。通道另外一端的代码将这些数据进行并发计算并返回结果，如下图所示。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1-1PPQ001322K.jpg" alt="img"></p>
<blockquote>
<p>提示：Go语言通过通道可以实现多个 goroutine 之间内存共享。</p>
</blockquote>
<p>​        【实例】生产者每秒生成一个字符串，并通过通道传给消费者，生产者使用两个 goroutine 并发运行，消费者在 main() 函数的 goroutine 中进行处理。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">//导入格式化（fmt）、随机数（math/rand）、时间（time）包参与编译。</span><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>	<span class="hljs-string">&quot;math/rand&quot;</span><br>	<span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">//生产数据的函数，传入一个标记类型的字符串及一个只能写入的通道。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">producer</span><span class="hljs-params">(header <span class="hljs-keyword">string</span>, channel <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">string</span>)</span></span> &#123;<br>	<span class="hljs-comment">// 无限循环, 不停地生产数据</span><br>	<span class="hljs-keyword">for</span> &#123;<br>		<span class="hljs-comment">// 使用 rand.Int31() 生成一个随机数，使用 fmt.Sprintf() 函数将 header 和随机数格式化为字符串。</span><br>		channel &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%s: %v&quot;</span>, header, rand.Int31())<br>		<span class="hljs-comment">// 使用 time.Sleep() 函数暂停1秒再执行这个函数。如果在 goroutine 中执行时，暂停不会影响其他 goroutine 的执行</span><br>		time.Sleep(time.Second)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">// 消费数据的函数，传入一个只能写入的通道</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customer</span><span class="hljs-params">(channel &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)</span></span> &#123;<br>	<span class="hljs-comment">// 不停地获取数据,构造一个不断消费消息的循环。</span><br>	<span class="hljs-keyword">for</span> &#123;<br>		<span class="hljs-comment">// 从通道中取出数据, 此处会阻塞直到信道中返回数据</span><br>		message := &lt;-channel<br>		<span class="hljs-comment">// 打印数据</span><br>		fmt.Println(message)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//程序的入口函数，总是在程序开始时执行</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">// 创建一个字符串类型的通道</span><br>	channel := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)<br>	<span class="hljs-comment">// 创建producer()函数的并发goroutine,并发执行一个生产者函数，两行分别创建了这个函数搭配不同参数的两个 goroutine</span><br>	<span class="hljs-keyword">go</span> producer(<span class="hljs-string">&quot;cat&quot;</span>, channel)<br>	<span class="hljs-keyword">go</span> producer(<span class="hljs-string">&quot;dog&quot;</span>, channel)<br>	<span class="hljs-comment">// 执行消费者函数通过通道进行数据消费</span><br>	customer(channel)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">do</span><span class="hljs-variable">g:</span> <span class="hljs-number">1298498081</span><br><span class="hljs-keyword">ca</span><span class="hljs-variable">t:</span> <span class="hljs-number">2019727887</span><br><span class="hljs-keyword">do</span><span class="hljs-variable">g:</span> <span class="hljs-number">939984059</span><br><span class="hljs-keyword">ca</span><span class="hljs-variable">t:</span> <span class="hljs-number">1427131847</span><br><span class="hljs-keyword">ca</span><span class="hljs-variable">t:</span> <span class="hljs-number">911902081</span><br><span class="hljs-keyword">do</span><span class="hljs-variable">g:</span> <span class="hljs-number">1474941318</span><br><span class="hljs-keyword">ca</span><span class="hljs-variable">t:</span> <span class="hljs-number">140954425</span><br><span class="hljs-keyword">do</span><span class="hljs-variable">g:</span> <span class="hljs-number">336122540</span><br>...<br></code></pre></td></tr></table></figure>
<p>整段代码中，没有线程创建，没有线程池也没有加锁，仅仅通过关键字 go 实现 goroutine，和通道实现数据交换</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言变量</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><p>​        Go语言是静态类型语言，因此变量（variable）是有明确类型的，编译器也会检查变量类型的正确性。在数学概念中，变量表示没有固定值且可改变的数。但从计算机系统实现角度来看，变量是一段或多段用来存储数据的内存。</p>
<p> 声明变量的一般形式是使用 var 关键字：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure>
<p>其中，var 是声明变量的关键字，name 是变量名，type 是变量的类型。</p>
<p>​         需要注意的是，Go语言和许多编程语言不同，它在声明变量时将变量的类型放在变量的名称之后。这样做的好处就是可以避免像C语言中那样含糊不清的声明形式，例如：<code>int* a, b;</code> 。其中只有 a 是指针而 b 不是。如果你想要这两个变量都是指针，则需要将它们分开书写。而在 Go 中，则可以和轻松地将它们都声明为指针类型：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> *int<br></code></pre></td></tr></table></figure>
<p>Go语言的基本类型有：</p>
<ul>
<li>bool</li>
<li>string</li>
<li>int、int8、int16、int32、int64</li>
<li>uint、uint8、uint16、uint32、uint64、uintptr</li>
<li>byte       // uint8 的别名</li>
<li>rune      // int32 的别名 代表一个 Unicode 码</li>
<li>float32、float64</li>
<li>complex64、complex128</li>
</ul>
<p> 当一个变量被声明之后，系统自动赋予它该类型的零值：int 为 0，float 为 0.0，bool 为 false，string 为空字符串，指针为 nil 等。所有的内存在 Go 中都是经过初始化的。</p>
<p> 变量的命名规则遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：numShips 和 startDate 。</p>
<h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h3><p>Go语言的变量声明的标准格式为：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 变量名 变量类型<br></code></pre></td></tr></table></figure>
<p>变量声明以关键字 var 开头，后置变量类型，行尾无须分号。</p>
<h3 id="批量格式"><a href="#批量格式" class="headerlink" title="批量格式"></a>批量格式</h3><p>觉得每行都用 var 声明变量比较烦琐？没关系，还有一种为懒人提供的定义变量的方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    a <span class="hljs-keyword">int</span><br>    b <span class="hljs-keyword">string</span><br>    c []<span class="hljs-keyword">float32</span><br>    d <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span><br>    e <span class="hljs-keyword">struct</span> &#123;<br>        x <span class="hljs-keyword">int</span><br>    &#125;<br>)<br></code></pre></td></tr></table></figure>
<p>使用关键字 var 和括号，可以将一组变量定义放在一起。</p>
<h3 id="简短格式"><a href="#简短格式" class="headerlink" title="简短格式"></a>简短格式</h3><p>除 var 关键字外，还可使用更加简短的变量定义和初始化语法。</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">名字 :</span>=<span class="hljs-string"> 表达式</span><br></code></pre></td></tr></table></figure>
<p>需要注意的是，简短模式（short variable declaration）有以下限制：</p>
<ul>
<li>定义变量，同时显式初始化。</li>
<li>不能提供数据类型。</li>
<li>只能用在函数内部。</li>
</ul>
<p> 和 var 形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">i</span>, j := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>下面通过一段代码来演示简短格式变量声明的基本样式。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   x:=<span class="hljs-number">100</span><br>   a,s:=<span class="hljs-number">1</span>, <span class="hljs-string">&quot;abc&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>​        因为简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。var 形式的声明语句往往是用于需要显式指定变量类型地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</p>
<h2 id="Go语言变量的初始化"><a href="#Go语言变量的初始化" class="headerlink" title="Go语言变量的初始化"></a>Go语言变量的初始化</h2><p>​        正如上一节《Go语言变量声明》中提到的<a href="http://c-local.biancheng.net/golang/">Go语言</a>在声明变量时，自动对变量对应的内存区域进行初始化操作。每个变量会初始化其类型的默认值，例如：</p>
<ul>
<li>整型和浮点型变量的默认值为 0 和 0.0。</li>
<li>字符串变量的默认值为空字符串。</li>
<li>布尔型变量默认为 bool。</li>
<li>切片、函数、指针变量的默认为 nil。</li>
</ul>
<p> 当然，依然可以在变量声明时赋予变量一个初始值。</p>
<h3 id="变量初始化的标准格式"><a href="#变量初始化的标准格式" class="headerlink" title="变量初始化的标准格式"></a>变量初始化的标准格式</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 变量名 类型 = 表达式<br></code></pre></td></tr></table></figure>
<p>例如，游戏中，玩家的血量初始值为100。可以这样写：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> hp <span class="hljs-built_in">int</span> = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>
<p>这句代码中，hp 为变量名，类型为 int，hp 的初始值为 100。</p>
<p> 上面代码中，100 和 int 同为 int 类型，int 可以认为是冗余信息，因此可以进一步简化初始化的写法。</p>
<h3 id="编译器推导类型的格式"><a href="#编译器推导类型的格式" class="headerlink" title="编译器推导类型的格式"></a>编译器推导类型的格式</h3><p>在标准格式的基础上，将 int 省略后，编译器会尝试根据等号右边的表达式推导 hp 变量的类型。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> hp = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>
<p>等号右边的部分在编译原理里被称做右值（rvalue）。</p>
<p> 下面是编译器根据右值推导变量类型完成初始化的例子。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> attack = <span class="hljs-number">40</span><br><span class="hljs-attribute">var</span> defence = <span class="hljs-number">20</span><br><span class="hljs-attribute">var</span> damageRate float<span class="hljs-number">32</span> = <span class="hljs-number">0</span>.<span class="hljs-number">17</span><br><span class="hljs-attribute">var</span> damage = float<span class="hljs-number">32</span>(attack-defence) * damageRate<br><span class="hljs-attribute">fmt</span>.Println(damage)<br></code></pre></td></tr></table></figure>
<p>代码说明如下：</p>
<ul>
<li><p>第 1 和 2 行，右值为整型，attack 和 defence 变量的类型为 int。</p>
</li>
<li><p>第 3 行，表达式的右值中使用了 0.17。由于Go语言和C语言一样，编译器会尽量提高精确度，以避免计算中的精度损失。所以这里如果不指定  damageRate 变量的类型，Go语言编译器会将 damageRate 类型推导为 float64，我们这里不需要 float64  的精度，所以需要强制指定类型为 float32。</p>
</li>
<li><p>第 4 行，将 attack 和 defence 相减后的数值结果依然为整型，使用 float32() 将结果转换为 float32 类型，再与 float32 类型的 damageRate 相乘后，damage 类型也是 float32 类型。</p>
<blockquote>
<p>提示：damage 变量的右值是一个复杂的表达式，整个过程既有 attack 和 defence 的运算还有强制类型转换。强制类型转换会在后面的章节中介绍。</p>
</blockquote>
</li>
<li><p>第 5 行，输出 damage 的值。</p>
</li>
</ul>
<p> 以上代码输出结果为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<h3 id="短变量声明并初始化"><a href="#短变量声明并初始化" class="headerlink" title="短变量声明并初始化"></a>短变量声明并初始化</h3><p>var 的变量声明还有一种更为精简的写法，例如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hp</span> := <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>
<p>这是Go语言的推导声明写法，编译器会自动根据右值类型推断出左值的对应类型。</p>
<blockquote>
<p>注意：由于使用了<code>:=</code>，而不是赋值的<code>=</code>，因此推导声明写法的左值变量必须是没有定义过的变量。若定义过，将会发生编译错误。</p>
</blockquote>
<p>如果 hp 已经被声明过，但依然使用<code>:=</code>时编译器会报错，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 声明 hp 变量</span><br><span class="hljs-keyword">var</span> hp <span class="hljs-keyword">int</span><br><span class="hljs-comment">// 再次声明并赋值</span><br>hp := <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>
<p>编译报错如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">no</span> <span class="hljs-keyword">new</span> variables <span class="hljs-keyword">on</span> <span class="hljs-keyword">left</span> side of :=<br></code></pre></td></tr></table></figure>
<p>意思是，在“:=”的左边没有新变量出现，意思就是“:=”的左边变量已经被声明了。</p>
<p> 短变量声明的形式在开发中的例子较多，比如：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">conn, <span class="hljs-keyword">err</span> := <span class="hljs-keyword">net</span>.Dial(<span class="hljs-string">&quot;tcp&quot;</span>,<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>​        net.Dial 提供按指定协议和地址发起网络连接，这个函数有两个返回值，一个是连接对象（conn），一个是错误对象（err）。如果是标准格式将会变成：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> conn <span class="hljs-keyword">net</span>.Conn<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">err</span> <span class="hljs-keyword">error</span><br>conn, <span class="hljs-keyword">err</span> = <span class="hljs-keyword">net</span>.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>因此，短变量声明并初始化的格式在开发中使用比较普遍。</p>
<p>​         注意：在多个短变量声明和赋值中，至少有一个新声明的变量出现在左值中，即便其他变量名可能是重复声明的，编译器也不会报错，代码如下：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">conn, <span class="hljs-keyword">err</span> := <span class="hljs-keyword">net</span>.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)<br>conn2, <span class="hljs-keyword">err</span> := <span class="hljs-keyword">net</span>.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>上面的代码片段，编译器不会报 err 重复定义。</p>
<h2 id="Go语言多个变量同时赋值"><a href="#Go语言多个变量同时赋值" class="headerlink" title="Go语言多个变量同时赋值"></a>Go语言多个变量同时赋值</h2><p>​        编程最简单的算法之一，莫过于变量交换。交换变量的常见算法需要一个中间变量进行变量的临时保存。用传统方法编写变量交换代码如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> int = <span class="hljs-number">100</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> int = <span class="hljs-number">200</span><br><span class="hljs-selector-tag">var</span> t int<br><br>t = a<br><span class="hljs-selector-tag">a</span> = b<br><span class="hljs-selector-tag">b</span> = t<br><br>fmt.Println(<span class="hljs-selector-tag">a</span>, b)<br></code></pre></td></tr></table></figure>
<p>在计算机刚发明时，内存非常“精贵”。这种变量交换往往是非常奢侈的。于是计算机“大牛”发明了一些算法来避免使用中间变量：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> int = <span class="hljs-number">100</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> int = <span class="hljs-number">200</span><br><br><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ b<br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">b</span> ^ a<br><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ b<br><br>fmt.Println(<span class="hljs-selector-tag">a</span>, b)<br></code></pre></td></tr></table></figure>
<p>这样的算法很多，但是都有一定的数值范围和类型要求。</p>
<p> 到了Go语言时，内存不再是紧缺资源，而且写法可以更简单。使用 Go 的“多重赋值”特性，可以轻松完成变量交换的任务：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> int = <span class="hljs-number">100</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> int = <span class="hljs-number">200</span><br><br><span class="hljs-selector-tag">b</span>, <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span>, b<br><br>fmt.Println(<span class="hljs-selector-tag">a</span>, b)<br></code></pre></td></tr></table></figure>
<p>多重赋值时，变量的左值和右值按从左到右的顺序赋值。</p>
<p> 多重赋值在Go语言的错误处理和函数返回值中会大量地使用。例如使用Go语言进行排序时就需要使用交换，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> IntSlice []<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p IntSlice)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p IntSlice)</span> <span class="hljs-title">Less</span><span class="hljs-params">(i, j <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123; <span class="hljs-keyword">return</span> p[i] &lt; p[j] &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p IntSlice)</span> <span class="hljs-title">Swap</span><span class="hljs-params">(i, j <span class="hljs-keyword">int</span>)</span></span>      &#123; p[i], p[j] = p[j], p[i] &#125;<br></code></pre></td></tr></table></figure>
<p>代码说明如下：</p>
<ul>
<li>第 1 行，将 IntSlice 声明为 []int 类型。</li>
<li>第 3 行，为 IntSlice 类型编写一个 Len 方法，提供切片的长度。</li>
<li>第 4 行，根据提供的 i、j 元素索引，获取元素后进行比较，返回比较结果。</li>
<li>第 5 行，根据提供的 i、j 元素索引，交换两个元素的值。</li>
</ul>
<h2 id="Go语言匿名变量"><a href="#Go语言匿名变量" class="headerlink" title="Go语言匿名变量"></a>Go语言匿名变量</h2><p>​        在编码过程中，可能会遇到没有名称的变量、类型或方法。虽然这不是必须的，但有时候这样做可以极大地增强代码的灵活性，这些变量被统称为匿名变量。</p>
<p>​         匿名变量的特点是一个下画线“_”，“_”本身就是一个特殊的标识符，被称为空白标识符。它可以像其他标识符那样用于变量的声明或赋值（任何类型都可以赋值给它），但任何赋给这个标识符的值都将被抛弃，因此这些值不能在后续的代码中使用，也不可以使用这个标识符作为变量对其它变量进行赋值或运算。使用匿名变量时，只需要在变量声明的地方使用下画线替换即可。例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetData</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>, <span class="hljs-number">200</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    a, _ := GetData()<br>    _, b := GetData()<br>    fmt.Println(a, b)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>代码运行结果：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure>
<p>GetData() 是一个函数，拥有两个整型返回值。每次调用将会返回 100 和 200 两个数值。</p>
<p> 代码说明如下：</p>
<ul>
<li>第 5 行只需要获取第一个返回值，所以将第二个返回值的变量设为下画线（匿名变量）。</li>
<li>第 6 行将第一个返回值的变量设为匿名变量。</li>
</ul>
<p>匿名变量不占用内存空间，不会分配内存。匿名变量与匿名变量之间也不会因为多次声明而无法使用。</p>
<p> 提示：在 Lua 等编程语言里，匿名变量也被叫做哑元变量。</p>
<h2 id="Go语言变量的作用域"><a href="#Go语言变量的作用域" class="headerlink" title="Go语言变量的作用域"></a>Go语言变量的作用域</h2><p>一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域。</p>
<p>​         了解变量的作用域对我们学习Go语言来说是比较重要的，因为Go语言会在编译时检查每个变量是否使用过，一旦出现未使用的变量，就会报编译错误。如果不能理解变量的作用域，就有可能会带来一些不明所以的编译错误。</p>
<p> 根据变量定义位置的不同，可以分为以下三个类型：</p>
<ul>
<li>函数内定义的变量称为局部变量</li>
<li>函数外定义的变量称为全局变量</li>
<li>函数定义中的变量称为形式参数</li>
</ul>
<p> 下面就来分别介绍一下。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，函数的参数和返回值变量都属于局部变量。</p>
<p> 局部变量不是一直存在的，它只在定义它的函数被调用后存在，函数调用结束后这个局部变量就会被销毁。</p>
<p> 【示例】下面的 main() 函数中使用到了局部变量 a、b、c。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//声明局部变量 a 和 b 并赋值</span><br>    <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">var</span> b <span class="hljs-keyword">int</span> = <span class="hljs-number">4</span><br>    <span class="hljs-comment">//声明局部变量 c 并计算 a 和 b 的和</span><br>    c := a + b<br>    fmt.Printf(<span class="hljs-string">&quot;a = %d, b = %d, c = %d\n&quot;</span>, a, b, c)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> = <span class="hljs-number">3</span>, b = <span class="hljs-number">4</span>, c = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>​        在函数体外声明的变量称之为全局变量，全局变量只需要在一个源文件中定义，就可以在所有源文件中使用，当然，不包含这个全局变量的源文件需要使用“import”关键字引入全局变量所在的源文件之后才能使用这个全局变量。</p>
<p> 全局变量声明必须以 var 关键字开头，如果想要在外部包中使用全局变量的首字母必须大写。</p>
<p> 【示例】下面代码中，第 6 行定义了全局变量 c。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">package main<br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//声明全局变量</span><br><span class="hljs-selector-tag">var</span> c int<br><br>func main() &#123;<br>    <span class="hljs-comment">//声明局部变量</span><br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> int<br><br>    <span class="hljs-comment">//初始化参数</span><br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-number">3</span><br>    <span class="hljs-selector-tag">b</span> = <span class="hljs-number">4</span><br>    c = <span class="hljs-selector-tag">a</span> + b<br><br>    fmt.Printf(<span class="hljs-string">&quot;a = %d, b = %d, c = %d\n&quot;</span>, <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> = <span class="hljs-number">3</span>, b = <span class="hljs-number">4</span>, c = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>
<p><strong>Go语言程序中全局变量与局部变量名称可以相同，但是函数体内的局部变量会被优先考虑。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//声明全局变量</span><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">float32</span> = <span class="hljs-number">3.14</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//声明局部变量</span><br>    <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">3</span><br><br>    fmt.Printf(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h3 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h3><p>​        在定义函数时函数名后面括号中的变量叫做形式参数（简称形参）。形式参数只在函数调用时才会生效，函数调用结束后就会被销毁，在函数未被调用时，函数的形参并不占用实际的存储单元，也没有实际值。</p>
<p> 形式参数会作为函数的局部变量来使用。</p>
<p> 【示例】下面代码中第 21 行定义了形式参数 a 和 b。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">//全局变量 a</span><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">13</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//局部变量 a 和 b</span><br>    <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">var</span> b <span class="hljs-keyword">int</span> = <span class="hljs-number">4</span><br><br>    fmt.Printf(<span class="hljs-string">&quot;main() 函数中 a = %d\n&quot;</span>, a)<br>    fmt.Printf(<span class="hljs-string">&quot;main() 函数中 b = %d\n&quot;</span>, b)<br>    c := sum(a, b)<br>    fmt.Printf(<span class="hljs-string">&quot;main() 函数中 c = %d\n&quot;</span>, c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;sum() 函数中 a = %d\n&quot;</span>, a)<br>    fmt.Printf(<span class="hljs-string">&quot;sum() 函数中 b = %d\n&quot;</span>, b)<br>    num := a + b<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">()</span></span> 函数中 <span class="hljs-selector-tag">a</span> = <span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">()</span></span> 函数中 <span class="hljs-selector-tag">b</span> = <span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">()</span></span> 函数中 <span class="hljs-selector-tag">a</span> = <span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">()</span></span> 函数中 <span class="hljs-selector-tag">b</span> = <span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">()</span></span> 函数中 c = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言上手简单</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<p>​        Go语言语法简单易懂，学习曲线平缓，不需要像 C/<a href="http://c.biancheng.net/cplus/">C++</a> 语言动辄需要两到三年的学习期。Go语言被称为“互联网时代的C语言”。互联网的短、频、快特性在Go语言中体现得淋漓尽致。一个熟练的开发者只需要短短的一周时间就可以从学习阶段转到开发阶段，并完成一个高并发的服务器开发。</p>
<p>​         Go语言是 Google 公司开发的一种静态型、编译型并自带垃圾回收和并发的编程语言。所以它是一门类型安全的语言，加上通过构建到本地代码，程序的执行速度也非常快。</p>
<p>​         Go语言的主要目标是将静态语言的安全性和高效性与动态语言的易开发性进行有机结合，达到完美平衡，从而使编程变得更加有乐趣，而不是在艰难抉择中痛苦前行。</p>
<p>​         Go语言在拥有一些动态语言的特性的同时，其语法风格类似于C语言。在C语言的基础上进行了大幅的简化，去掉了不需要的表达式括号，循环也只有 for 一种表示方法，就可以实现数值、键值等各种遍历。因此，Go语言上手非常容易。</p>
<p>​         很多读者表示自己是在看了介绍后才开始了解这门语言的，他们一般也会使用两到三门编程语言。Go语言对于他们来说，也就是一到两天的熟悉过程，之后就可以开始使用Go语言解决具体问题了，大约一周左右已经可以使用Go语言完成既定的任务了。</p>
<p>​         Go语言这种从零开始使用到解决问题的速度，在其他语言中是完全不可想象的。学过 C++ 的朋友都知道，一到两年大强度的理论学习和实战操练也只能学到这门语言的皮毛，以及知道一些基本的避免错误的方法。</p>
<p>​         那么，Go语言到底有多么简单？下面通过实现一个 HTTP 服务器来了解一下。</p>
<p>【实例】HTTP 文件服务器是常见的 Web 服务之一。开发阶段为了测试，需要自行安装 Apache 或 Nginx 服务器，下载安装配置需要大量的时间。使用Go语言实现一个简单的 HTTP 服务器只需要几行代码，如下所示。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>标记当前文件为 main 包，main 包也是 Go 程序的入口包<br>package main<br><br><span class="hljs-regexp">//</span>导入 net/http 包，这个包的作用是 HTTP 的基础封装和访问<br>import (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-regexp">//</span>程序执行的入口函数 main()<br><span class="hljs-keyword">func</span> main() &#123;<br><span class="hljs-regexp">//</span>使用 http.FileServer 文件服务器将当前目录作为根目录（`/`目录）的处理器，访问根目录，就会进入当前目录<br>    http.Handle(<span class="hljs-string">&quot;/&quot;</span>, http.FileServer(http.Dir(<span class="hljs-string">&quot;.&quot;</span>)))<br><span class="hljs-regexp">//</span>默认的 HTTP 服务侦听在本机 <span class="hljs-number">8080</span> 端口<br>    http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, nil)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>​        把这个源码保存为 main.go（Go语言的源文件后缀就是<code>.go</code>），安装Go语言的开发包（后续我们会讲解如何安装），在命令行输入如下命令：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">go <span class="hljs-keyword">run</span><span class="bash"> main.go</span><br></code></pre></td></tr></table></figure>
<p>在浏览器里输入<code>http://127.0.0.1:8080</code>即可浏览文件，这些文件正是当前目录在HTTP服务器上的映射目录。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200707112003819.png" alt="image-20200707112003819"></p>
<h2 id="Go语言工程结构简单"><a href="#Go语言工程结构简单" class="headerlink" title="Go语言工程结构简单"></a>Go语言工程结构简单</h2><p>​        Go语言的源码无须头文件，编译的文件都来自于后缀名为<code>.go</code>的源码文件。</p>
<p>​         Go语言无须解决方案、工程文件和 Make File，只要将工程文件按照 GOPATH 的规则进行填充，即可使用 go build/go install 进行编译，编译完成的二进制可执行文件统一放在 bin 文件夹下。</p>
<h2 id="Go语言编译速度快"><a href="#Go语言编译速度快" class="headerlink" title="Go语言编译速度快"></a>Go语言编译速度快</h2><p>​        Go语言可以利用自己的特性实现并发编译，并发编译的最小元素是包。从 Go 1.9 版本开始，最小并发编译元素缩小到函数，整体编译速度提高了 20%。</p>
<p>​         另外，Go语言语法简单，具有严谨的工程结构设计、没有头文件、不允许包的交叉依赖等规则，在很大程度上加速了编译的过程。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言和其它编程语言的对比</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E5%92%8C%E5%85%B6%E5%AE%83%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>​        在软件行业做过一段时间的人都知道，没有万能的编程语言，也没有万能开发框架，更没有万能的解决方案。任何新技术的产生都应该归功于一部分人对老旧技术的强烈不满。Go语言也不例外。比如，C语言的依赖管理、C++ 的垃圾回收、Java 笨重的类型系统和厚重的 Java EE 规范，以及脚本语言（如 PHP、Python 和  Ruby）的性能，这些都是很多开发者社区经常争论和抱怨的问题。</p>
<h2 id="Go语言的优势"><a href="#Go语言的优势" class="headerlink" title="Go语言的优势"></a>Go语言的优势</h2><pre><code>     Go语言是集多编程范式之大成者，体现了优秀的软件工程思想和原则，其特性可以使开发者快速地开发、测试和部署程序，大大提高了生产效率。下面我们来看看与其他主流语言相比，Go语言具有的优势。</code></pre>
<p>​         1) 相对于 C/C++ 来讲，Go语言拥有清晰的依赖管理和全自动的垃圾回收机制，因此其代码量大大降低，开发效率大大提高。</p>
<p>​         2) 相对于 Java 来讲，Go语言拥有简明的类型系统、函数式编程范式和先进的并发编程模型。因此其代码块更小更简洁、可重用性更高，并可在多核计算环境下更快地运行。</p>
<p>​         3) 对于 PHP 来讲，Go语言更具通用性和规范性。这使得其更适合构建大型的软件，并能够更好地将各个模块组织在一起。在性能方面，PHP 不可与 Go 同日而语。</p>
<p>​         4) 对于 Python/Ruby 来讲，Go 的优势在于其简洁的语法、非侵入式和扁平化的类型系统和浑然天成的多范式编程模型。与 PHP 一样，Python 和 Ruby 也是动态类型的解释型语言，这就意味着它们的运行速度会比静态类型的编译型语言慢很多。</p>
<p>​         总而言之，Go语言对于当前大多数主流语言来讲，最大的优势在于具有较高的生产效率、先进的依赖管理和类型系统，以及原生的并发计算支持。因此，Go语言自发布以来就受到了各个领域开发者的关注和青睐。</p>
<h2 id="Go语言的劣势"><a href="#Go语言的劣势" class="headerlink" title="Go语言的劣势"></a>Go语言的劣势</h2><p> 下面，我们来客观地看一下目前Go语言需要加强或改进的地方（虽然有些 Gopher 并不这么认为）。</p>
<p>​         1) 从分布式计算的角度来看，Go语言的成熟度不及 Erlang（现在已经出现了一些这方面的Go语言代码包，我们已经可以看到光明的未来了）。</p>
<p>​         2) 从程序运行速度的角度来看，Go语言虽然已与 Java 不相上下，但还不及 C（差距正在不断地缩小）。</p>
<p>​         3) 从第三方库的角度来看，Go语言的库数量还远远不及其他几门主流语言（比如 Java、Python、Ruby 等）。不过与Go语言的年纪相比，用它实现的第三方库已经相当多了，并且它们的数量在持续地飞速增长中。</p>
<p> 另外，在更深的层面，Go语言标准库中也有些不尽如人意的的地方，具体如下。</p>
<p>​         1) 从语言语法角度来看，Go语言语法里的语法糖并不多，这让许多 Python、Ruby 爱好者们对它不屑一顾。另外，变量赋值方式多得有点儿累赘了。最让人遗憾的也是我比较在意的一个地方是，Go语言不支持自定义的泛型类型。</p>
<p>​         2) 从并发编程角度来看，Go语言提供的并发模型很强大，但也有一些编写规则需要了解。否则，很容易踩进“坑”里。其实不提倡把这叫作“坑”。因为这些所谓的“坑”，大都是我们由于对原理不熟悉而自己挖出来的。</p>
<p>​         3) 从垃圾回收角度看，Go语言的垃圾回收采用的是并发的标记清除算法（Concurrent Mark and  Sweep，CMS）。虽然是并发的操作，时间比串行操作短很多，但是还是会在垃圾回收期间停止所有用户程序的操作。这一点多少会影响到对实时性要求比较高的应用。不过，在Go语言 1.3 之后的版本中，这方面的问题已经得到了极大的改善。</p>
<p>​         虽然Go语言还有一些瑕疵，但从整体来看，它已经是一门非常优秀的通用编程语言了。并且，Go语言在今后的发展上会关注性能、可靠性、可移植性和一些功能增强，所以上述缺憾会随着版本的推进而逐渐减弱和消失。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言指针</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h2 id="认识指针地址和指针类型"><a href="#认识指针地址和指针类型" class="headerlink" title="认识指针地址和指针类型"></a>认识指针地址和指针类型</h2><p>​        一个指针变量可以指向任何一个值的内存地址，它所指向的值的内存地址在 32 和 64 位机器上分别占用 4 或 8 个字节，占用字节的大小与所指向的值的大小无关。当一个指针被定义后没有分配到任何变量时，它的默认值为 nil。指针变量通常缩写为 ptr。</p>
<p>​         每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用在变量名前面添加<code>&amp;</code>操作符（前缀）来获取变量的内存地址（取地址操作），格式如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">ptr := <span class="hljs-meta">&amp;v    <span class="hljs-comment">// v 的类型为 T</span></span><br></code></pre></td></tr></table></figure>
<p>其中 v 代表被取地址的变量，变量 v 的地址使用变量 ptr 进行接收，ptr 的类型为<code>*T</code>，称做 T 的指针类型，<code>*</code>代表指针。</p>
<p>指针实际用法，可以通过下面的例子了解：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">//声明变量cat类型为整型</span><br>	<span class="hljs-keyword">var</span> cat <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br><br>	<span class="hljs-comment">//声明变量str类型为字符串</span><br>	<span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;banana&quot;</span><br><br>	<span class="hljs-comment">//使用动词%p打印cat和str变量的内存地址，指针的值是带有0x十六进制前缀的一组数据</span><br>	fmt.Printf(<span class="hljs-string">&quot;%p\n%p&quot;</span>, &amp;cat, &amp;str)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>提示：变量、指针和地址三者的关系是，每个变量都拥有地址，指针的值就是地址。</p>
<h2 id="从指针获取指针指向的值"><a href="#从指针获取指针指向的值" class="headerlink" title="从指针获取指针指向的值"></a>从指针获取指针指向的值</h2><p>当使用<code>&amp;</code>操作符对普通变量进行取地址操作并得到变量的指针后，可以对指针使用<code>*</code>操作符，也就是指针取值，代码如下。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">package main<br><br>import (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">func</span> main() &#123;<br>	<span class="hljs-regexp">//</span>准备一个整型并赋值<br>	var house = <span class="hljs-number">677</span><br><br>	<span class="hljs-regexp">//</span>对整型取地址，并将指针保存到变量ptr中<br>	ptr := &amp;house<br><br>	<span class="hljs-regexp">//</span>打印ptr的类型<br>	fmt.Printf(<span class="hljs-string">&quot; ptr type is %T\n&quot;</span>, ptr)<br><br>	<span class="hljs-regexp">//</span>打印ptr的指针地址<br>	<span class="hljs-regexp">//</span>指针用%p，表示十六进制，前缀 <span class="hljs-number">0</span>x<br>	fmt.Printf(<span class="hljs-string">&quot;ptr 地址是 %p\n&quot;</span>, ptr)<br><br>	<span class="hljs-regexp">//</span>对指针进行取值操作<br>	value := *ptr<br><br>	<span class="hljs-regexp">//</span>打印指针的类型<br>	fmt.Printf(<span class="hljs-string">&quot;value type is %T\n&quot;</span>, value)<br><br>	<span class="hljs-regexp">//</span>打印指针的值<br>	fmt.Printf(<span class="hljs-string">&quot;value is %v\n&quot;</span>, value)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p>
<p> 变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：</p>
<ul>
<li>对变量进行取地址操作使用<code>&amp;</code>操作符，可以获得这个变量的指针变量。</li>
<li>指针变量的值是指针地址。</li>
<li>对指针变量进行取值操作使用<code>*</code>操作符，可以获得指针变量指向的原变量的值。</li>
</ul>
<h2 id="使用指针修改值"><a href="#使用指针修改值" class="headerlink" title="使用指针修改值"></a>使用指针修改值</h2><p>通过指针不仅可以取值，也可以修改值。</p>
<p> 前面已经演示了使用多重赋值的方法进行数值交换，使用指针同样可以进行数值交换，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">//定义一个交换函数，参数为a、b，类型都是*int指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(a, b *<span class="hljs-keyword">int</span>)</span></span> &#123;<br><br>	<span class="hljs-comment">//取a指针的值，并把值赋给t，t此时类型为int</span><br>	t := *a<br><br>	<span class="hljs-comment">//取 b 的指针值，赋给指针 a 指向的变量。注意，此时*a的意思不是取 a 指针的值，而是“a 指向的变量”</span><br>	*a = *b<br><br>	<span class="hljs-comment">//将 t 的值赋给指针 b 指向的变量</span><br>	*b = t<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>	<span class="hljs-comment">//准备 x、y 两个变量，分别赋值为 1 和 2，类型为 int</span><br>	x, y := <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><br>	<span class="hljs-comment">//取出 x 和 y 的地址作为参数传给 swap() 函数进行调用</span><br>	swap(&amp;x, &amp;y)<br><br>	<span class="hljs-comment">//交换完毕时，输出 x 和 y 的值</span><br>	fmt.Println(x, y)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>​        <code>*</code>操作符作为右值时，意义是取指针的值，作为左值时，也就是放在赋值操作符的左边时，表示 a 指针指向的变量。其实归纳起来，<code>*</code>操作符的根本意义就是操作指针指向的变量。当操作在右值时，就是取指向变量的值，当操作在左值时，就是将值设置给指向的变量。</p>
<p>​         如果在 swap() 函数中交换操作的是指针值，会发生什么情况？可以参考下面代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(a, b *<span class="hljs-keyword">int</span>)</span></span> &#123;<br>    b, a = a, b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    x, y := <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>    swap(&amp;x, &amp;y)<br>    fmt.Println(x, y)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>​        结果表明，交换是不成功的。上面代码中的 swap() 函数交换的是 a 和 b 的地址，在交换完毕后，a 和 b 的变量值确实被交换。但和  a、b 关联的两个变量并没有实际关联。这就像写有两座房子的卡片放在桌上一字摊开，交换两座房子的卡片后并不会对两座房子有任何影响。</p>
<h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><p>值类型：基本数据类型 int 系列, float 系列, bool, string 、数组和结构体 struct</p>
<p>引用类型：指针、slice 切片、map、管道 chan、interface 等都是引用类型</p>
<h3 id="值类型和引用类型的使用特点"><a href="#值类型和引用类型的使用特点" class="headerlink" title="值类型和引用类型的使用特点"></a>值类型和引用类型的使用特点</h3><p>值类型：变量直接存储值，内存通常在栈中分配</p>
<p>引用类型：变量存储的是一个地址，这个地址对应的空间才真正存储数据(值)，内存通常在堆<br>上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由 GC 来回收</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言工程结构详述</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E8%AF%A6%E8%BF%B0/</url>
    <content><![CDATA[<p>​        搭建Go语言开发环境时提到的环境变量 GOPATH，项目的构建主要是靠它来实现的。这么说吧，如果想要构建一个项目，就需要将这个项目的目录添加到 GOPATH 中，多个项目之间可以使用<code>;</code>分隔。</p>
<p>​         如果不配置 GOPATH，即使处于同一目录，代码之间也无法通过绝对路径相互调用。</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个Go语言项目的目录一般包含以下三个子目录：</p>
<ul>
<li>src 目录：放置项目和库的源文件；</li>
<li>pkg 目录：放置编译后生成的包/库的归档文件；</li>
<li>bin 目录：放置编译后生成的可执行文件。</li>
</ul>
<p> 三个目录中我们需要重点关注的是 src 目录，其他两个目录了解即可，下面来分别介绍一下这三个目录。</p>
<h4 id="src-目录"><a href="#src-目录" class="headerlink" title="src 目录"></a>src 目录</h4><p>​        用于以包（package）的形式组织并存放 Go 源文件，这里的包与 src 下的每个子目录是一一对应。例如，若一个源文件被声明属于 log 包，那么它就应当保存在 src/log 目录中。</p>
<p>​         并不是说 src 目录下不能存放 Go 源文件，一般在测试或演示的时候也可以把 Go 源文件直接放在 src 目录下，但是这么做的话就只能声明该源文件属于 main 包了。正常开发中还是建议大家把 Go 源文件放入特定的目录中。</p>
<p>​         包是Go语言管理代码的重要机制，其作用类似于<a href="http://c.biancheng.net/java/">Java</a>中的 package 和 C/<a href="http://c.biancheng.net/cplus/">C++</a> 的头文件。Go 源文件中第一段有效代码必须是<code>package &lt;包名&gt; </code>的形式，如 package hello。</p>
<p>​         另外需要注意的是，Go语言会把通过<code>go get </code>命令获取到的库源文件下载到 src 目录下对应的文件夹当中。</p>
<h4 id="pkg-目录"><a href="#pkg-目录" class="headerlink" title="pkg 目录"></a>pkg 目录</h4><p>​        用于存放通过<code>go install </code>命令安装某个包后的归档文件。归档文件是指那些名称以“.a”结尾的文件。</p>
<p>​         该目录与 GOROOT 目录（也就是Go语言的安装目录）下的 pkg 目录功能类似，区别在于这里的 pkg 目录专门用来存放项目代码的归档文件。</p>
<pre><code>     编译和安装项目代码的过程一般会以代码包为单位进行，比如 log 包被编译安装后，将生成一个名为 log.a 的归档文件，并存放在当前项目的 pkg 目录下。</code></pre>
<h4 id="bin-目录"><a href="#bin-目录" class="headerlink" title="bin 目录"></a>bin 目录</h4><p>​        与 pkg 目录类似，在通过<code>go install </code>命令完成安装后，保存由 Go 命令源文件生成的可执行文件。在类 Unix 操作系统下，这个可执行文件的名称与命令源文件的文件名相同。而在 Windows 操作系统下，这个可执行文件的名称则是命令源文件的文件名加 .exe 后缀。</p>
<h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p>上面我们提到了命令源文件和库源文件，它们到底是什么呢？</p>
<ul>
<li>命令源文件：如果一个 Go 源文件被声明属于 main 包，并且该文件中包含 main 函数，则它就是命令源码文件。命令源文件属于程序的入口，可以通过Go语言的<code>go run </code>命令运行或者通过<code>go build </code>命令生成可执行文件。</li>
<li>库源文件：库源文件则是指存在于某个包中的普通源文件，并且库源文件中不包含 main 函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">不管是命令源文件还是库源文件，在同一个目录下的所有源文件，其所属包的名称必须一致的。<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言数据类型转换</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>​        在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于Go语言不存在隐式类型转换，因此所有的类型转换都必须显式的声明：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">valueOfTypeB = <span class="hljs-keyword">type</span><span class="hljs-constructor">B(<span class="hljs-params">valueOfTypeA</span>)</span><br></code></pre></td></tr></table></figure>
<p>类型 B 的值 = 类型 B(类型 A 的值)</p>
<p> 示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">5.0</span><br>b := <span class="hljs-keyword">int</span>(a)<br></code></pre></td></tr></table></figure>
<p>​        类型转换只能在定义正确的情况下转换成功，例如从一个取值范围较小的类型转换到一个取值范围较大的类型（将 int16 转换为  int32）。当从一个取值范围较大的类型转换到取值范围较小的类型时（将 int32 转换为 int16 或将 float32 转换为  int），会发生精度丢失（截断）的情况。</p>
<p>​         只有相同底层类型的变量之间可以进行相互转换（如将 int16 类型转换成 int32 类型），不同底层类型的变量相互转换时会引发编译错误（如将 bool 类型转换为 int 类型）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>        <span class="hljs-string">&quot;fmt&quot;</span><br>        <span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>        <span class="hljs-comment">// 输出各数值范围</span><br>        fmt.Println(<span class="hljs-string">&quot;int8 range:&quot;</span>, math.MinInt8, math.MaxInt8)<br>        fmt.Println(<span class="hljs-string">&quot;int16 range:&quot;</span>, math.MinInt16, math.MaxInt16)<br>        fmt.Println(<span class="hljs-string">&quot;int32 range:&quot;</span>, math.MinInt32, math.MaxInt32)<br>        fmt.Println(<span class="hljs-string">&quot;int64 range:&quot;</span>, math.MinInt64, math.MaxInt64)<br><br>        <span class="hljs-comment">// 初始化一个32位整型值</span><br>        <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int32</span> = <span class="hljs-number">1047483647</span><br>        <span class="hljs-comment">// 输出变量的十六进制形式和十进制值</span><br>        fmt.Printf(<span class="hljs-string">&quot;int32: 0x%x %d\n&quot;</span>, a, a)<br><br>        <span class="hljs-comment">// 将a变量数值转换为十六进制, 发生数值截断</span><br>        b := <span class="hljs-keyword">int16</span>(a)<br>        <span class="hljs-comment">// 输出变量的十六进制形式和十进制值</span><br>        fmt.Printf(<span class="hljs-string">&quot;int16: 0x%x %d\n&quot;</span>, b, b)<br><br>        <span class="hljs-comment">// 将常量保存为float32类型</span><br>        <span class="hljs-keyword">var</span> c <span class="hljs-keyword">float32</span> = math.Pi<br>        <span class="hljs-comment">// 转换为int类型, 浮点发生精度丢失</span><br>        fmt.Println(<span class="hljs-keyword">int</span>(c))<br>&#125;<br></code></pre></td></tr></table></figure>
<p>代码说明如下：</p>
<ul>
<li>第 11～14 行，输出几个常见整型类型的数值范围。</li>
<li>第 17 行，声明 int32 类型的变量 a 并初始化。</li>
<li>第 19 行，使用 fmt.Printf 的<code>%x</code>动词将数值以十六进制格式输出，这一行输出 a 在转换前的 32 位的值。</li>
<li>第 22 行，将 a 的值转换为 int16 类型，也就是从 32 位有符号整型转换为 16 位有符号整型，由于 int16 类型的取值范围比 int32 类型的取值范围小，因此数值会进行截断（精度丢失）。</li>
<li>第 24 行，输出转换后的 a 变量值，也就是 b 的值，同样以十六进制和十进制两种方式进行打印。</li>
<li>第 27 行，math.Pi 是 math 包的常量，默认没有类型，会在引用到的地方自动根据实际类型进行推导，这里 math.Pi 被赋值到变量 c 中，因此类型为 float32。</li>
<li>第 29 行，将 float32 转换为 int 类型并输出。</li>
</ul>
<p> 代码输出如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int8</span> range: -<span class="hljs-number">128</span> <span class="hljs-number">127</span><br><span class="hljs-attribute">int16</span> range: -<span class="hljs-number">32768</span> <span class="hljs-number">32767</span><br><span class="hljs-attribute">int32</span> range: -<span class="hljs-number">2147483648</span> <span class="hljs-number">2147483647</span><br><span class="hljs-attribute">int64</span> range: -<span class="hljs-number">9223372036854775808</span> <span class="hljs-number">9223372036854775807</span><br><span class="hljs-attribute">int32</span>: <span class="hljs-number">0</span>x<span class="hljs-number">3</span>e<span class="hljs-number">6</span>f<span class="hljs-number">54</span>ff <span class="hljs-number">1047483647</span><br><span class="hljs-attribute">int16</span>: <span class="hljs-number">0</span>x<span class="hljs-number">54</span>ff <span class="hljs-number">21759</span><br><span class="hljs-attribute">3</span><br></code></pre></td></tr></table></figure>
<p>​        根据输出结果，16 位有符号整型的范围是 -32768～32767，而变量 a 的值 1047483647 不在这个范围内。1047483647 对应的十六进制为 0x3e6f54ff，转为 int16 类型后，长度缩短一半，也就是在十六进制上砍掉一半，变成  0x54ff，对应的十进制值为 21759。</p>
<p>​         浮点数在转换为整型时，会将小数部分去掉，只保留整数部分。</p>
<h2 id="基本类型转-string-类型"><a href="#基本类型转-string-类型" class="headerlink" title="基本类型转 string 类型"></a>基本类型转 string 类型</h2><h3 id="方式-1：fmt-Sprintf-“-参数”-表达式"><a href="#方式-1：fmt-Sprintf-“-参数”-表达式" class="headerlink" title="方式 1：fmt.Sprintf(“%参数”, 表达式)"></a>方式 1：fmt.Sprintf(“%参数”, 表达式)</h3><p>函数的介绍：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sprintf</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sprintf</span><span class="hljs-params">(format <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">string</span></span><br><br>Sprintf 根据于格式说明符进行格式化并返回其结果字符串。<br></code></pre></td></tr></table></figure>
<p>参数需要和表达式的数据类型相匹配，fmt.Sprintf().. 会返回转换后的字符串</p>
<p>示例如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">package main<br><br>import (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>	_ <span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br>func main<span class="hljs-literal">()</span> &#123;<br>	var n1 <span class="hljs-built_in">int</span> = <span class="hljs-number">99</span><br>	var n2 float32 = <span class="hljs-number">22.3333</span><br>	var n3 <span class="hljs-built_in">bool</span> = <span class="hljs-literal">true</span><br>	var n4 <span class="hljs-built_in">string</span><br><br>    <span class="hljs-comment">//整数%d表示十进制输出</span><br>	n4 = fmt.<span class="hljs-constructor">Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-params">n1</span>)</span><br>	fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;n4 type is %T n4=%q\n&quot;</span>, <span class="hljs-params">n4</span>, <span class="hljs-params">n4</span>)</span><br><br>    <span class="hljs-comment">//浮点型%f表示有小数点而无指数</span><br>	n4 = fmt.<span class="hljs-constructor">Sprintf(<span class="hljs-string">&quot;%f&quot;</span>, <span class="hljs-params">n2</span>)</span><br>	fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;n4 type is %T n4=%q\n&quot;</span>, <span class="hljs-params">n4</span>, <span class="hljs-params">n4</span>)</span><br><br>    <span class="hljs-comment">//布尔型%t表示单词 true 或 false</span><br>	n4 = fmt.<span class="hljs-constructor">Sprintf(<span class="hljs-string">&quot;%t&quot;</span>, <span class="hljs-params">n3</span>)</span><br>	fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;n4 type is %T n4=%q\n&quot;</span>, <span class="hljs-params">n4</span>, <span class="hljs-params">n4</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="方式-2：使用-strconv-包的函数"><a href="#方式-2：使用-strconv-包的函数" class="headerlink" title="方式 2：使用 strconv 包的函数"></a>方式 2：使用 strconv 包的函数</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">FormatBool(<span class="hljs-params">b</span> <span class="hljs-params">bool</span>)</span> <span class="hljs-built_in">string</span><br>func <span class="hljs-constructor">FormatFloat(<span class="hljs-params">f</span> <span class="hljs-params">float64</span>, <span class="hljs-params">fmt</span> <span class="hljs-params">byte</span>, <span class="hljs-params">prec</span>, <span class="hljs-params">bitSize</span> <span class="hljs-params">int</span>)</span> <span class="hljs-built_in">string</span><br>func <span class="hljs-constructor">FormatInt(<span class="hljs-params">i</span> <span class="hljs-params">int64</span>, <span class="hljs-params">base</span> <span class="hljs-params">int</span>)</span> <span class="hljs-built_in">string</span><br>func <span class="hljs-constructor">FormatUint(<span class="hljs-params">i</span> <span class="hljs-params">uint64</span>, <span class="hljs-params">base</span> <span class="hljs-params">int</span>)</span> <span class="hljs-built_in">string</span><br>func <span class="hljs-constructor">Itoa(<span class="hljs-params">i</span> <span class="hljs-params">int</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">package main<br><br>import (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>	<span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-keyword">func</span> main() &#123;<br>	var num1 int = <span class="hljs-number">88</span><br>	var num2 float64 = <span class="hljs-number">333.444</span><br>	var num3 bool<br>	var num4 string<br><br>	<span class="hljs-regexp">//</span><span class="hljs-keyword">func</span> FormatInt（i int64，base int）字符串<br>	<span class="hljs-regexp">//</span>FormatInt返回给定基数中i的字符串表示形式，表示<span class="hljs-number">2</span> &lt;= base &lt;=<span class="hljs-number">36</span><br>	<span class="hljs-regexp">//</span>结果使用小写字母<span class="hljs-string">&#x27;a&#x27;</span>至<span class="hljs-string">&#x27;z&#x27;</span>表示数字值&gt; = <span class="hljs-number">10</span>。<br>	num4 = strconv.FormatInt(int64(num1), <span class="hljs-number">10</span>)<br>	fmt.Printf(<span class="hljs-string">&quot;num4 type is %T num4=%q\n&quot;</span>, num4, num4)<br><br>	<span class="hljs-regexp">//</span><span class="hljs-keyword">func</span> FormatFloat（f float64，fmt byte，prec，bitSize int）字符串<br>	<span class="hljs-regexp">//</span>FormatFloat根据格式fmt和precision prec将浮点数f转换为字符串。假设原始结果是从bitSize位的浮点值（float32为<span class="hljs-number">32</span>，float64为<span class="hljs-number">64</span>）获得的，则对结果进行四舍五入。<br>	<span class="hljs-regexp">//</span>格式fmt是<span class="hljs-string">&#x27;b&#x27;</span>（-ddddp±ddd，二进制指数），<span class="hljs-string">&#x27;e&#x27;</span>（-d.dddde±dd，十进制指数），<span class="hljs-string">&#x27;E&#x27;</span>（-d.ddddE±dd，十进制指数）之一），<span class="hljs-string">&#x27;f&#x27;</span>（-ddd.dddd，无指数），<span class="hljs-string">&#x27;g&#x27;</span>（大指数为<span class="hljs-string">&#x27;e&#x27;</span>，否则为<span class="hljs-string">&#x27;f&#x27;</span>）或<span class="hljs-string">&#x27;G&#x27;</span>（大指数为<span class="hljs-string">&#x27;E&#x27;</span>，否则为<span class="hljs-string">&#x27;f&#x27;</span>）。<br>	<span class="hljs-regexp">//</span>精度精度控制以“ e”，“ E”，“ f”，“ g”和“ G”格式打印的位数（不包括指数）。对于“ e”，“ E”和“ f”，它是小数点后的位数。对于“ g”和“ G”，它是数字的总数。特殊精度-<span class="hljs-number">1</span>使用必要的最小位数，以使ParseFloat准确返回f。<br>	num4 = strconv.FormatFloat(num2, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br>	fmt.Printf(<span class="hljs-string">&quot;num4 type is %T num4=%q\n&quot;</span>, num4, num4)<br><br>	<span class="hljs-regexp">//</span><span class="hljs-keyword">func</span> FormatBool（b bool）字符串<br>	<span class="hljs-regexp">//</span>FormatBool根据b的值返回“ true”或“ false”<br>	num4 = strconv.FormatBool(num3)<br>	fmt.Printf(<span class="hljs-string">&quot;num4 type is %T num4=%q\n&quot;</span>, num4, num4)<br><br>	<span class="hljs-regexp">//</span><span class="hljs-keyword">func</span> Itoa（i int）字符串<br>	<span class="hljs-regexp">//</span>Itoa是FormatInt（i，<span class="hljs-number">10</span>）的简写<br>	var num5 int64 = <span class="hljs-number">35454</span><br>	num4 = strconv.Itoa(int(num5))<br>	fmt.Printf(<span class="hljs-string">&quot;num4 type is %T num4=%q\n&quot;</span>, num4, num4)<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="string-类型转基本数据类型"><a href="#string-类型转基本数据类型" class="headerlink" title="string 类型转基本数据类型"></a>string 类型转基本数据类型</h2><h3 id="使用时-strconv-包的函数"><a href="#使用时-strconv-包的函数" class="headerlink" title="使用时 strconv 包的函数"></a>使用时 strconv 包的函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseBool</span><span class="hljs-params">(str <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(value <span class="hljs-keyword">bool</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseFloat</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>, bitSize <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(f <span class="hljs-keyword">float64</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseInt</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>, base <span class="hljs-keyword">int</span>, bitSize <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(i <span class="hljs-keyword">int64</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseUint</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>, base <span class="hljs-keyword">int</span>, bitSize <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">uint64</span>, err error)</span></span><br></code></pre></td></tr></table></figure>
<p>示例如下</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">package main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>	<span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-keyword">func</span> main() &#123;<br>	<span class="hljs-keyword">var</span> num1 <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;true&quot;</span><br>	<span class="hljs-keyword">var</span> num2 <span class="hljs-built_in">bool</span><br>	//<span class="hljs-keyword">func</span> <span class="hljs-type">ParseBool</span>(str <span class="hljs-built_in">string</span>) (value <span class="hljs-built_in">bool</span>, err error)<br>	//<span class="hljs-type">ParseBool</span>返回由字符串表示的布尔值。它接受<span class="hljs-number">1</span>，t，T，<span class="hljs-type">TRUE</span>，<span class="hljs-literal">true</span>，<span class="hljs-type">True</span>，<span class="hljs-number">0</span>，f，F，<span class="hljs-type">FALSE</span>，<span class="hljs-literal">false</span>，<span class="hljs-type">False</span>。其他任何值都将返回错误<br>	num2, _ = strconv.<span class="hljs-type">ParseBool</span>(num1)<br>	fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;num2 type is %T num2=%v\n&quot;</span>, num2, num2)<br>	//说明：函数会返回两个值，只想取value <span class="hljs-built_in">bool</span>，而不想要err，所以使用<span class="hljs-string">&quot;_&quot;</span>忽略<br>	//%v按照原值输出<br><br>	<span class="hljs-keyword">var</span> num3 <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;123432432&quot;</span><br>	<span class="hljs-keyword">var</span> num4 <span class="hljs-built_in">int64</span><br>	<span class="hljs-keyword">var</span> num5 <span class="hljs-built_in">int</span><br>	//<span class="hljs-keyword">func</span> <span class="hljs-type">ParseInt</span>（s <span class="hljs-built_in">string</span>，base <span class="hljs-built_in">int</span>，bitSize <span class="hljs-built_in">int</span>）（i <span class="hljs-built_in">int64</span>，err error）<br>	//<span class="hljs-type">ParseInt</span>解释给定基数（<span class="hljs-number">2</span>到<span class="hljs-number">36</span>）中的字符串s并返回对应的值i。如果base == <span class="hljs-number">0</span>，则字符串的前缀隐含基数：“ <span class="hljs-number">0</span>x”的基数为<span class="hljs-number">16</span>，“ <span class="hljs-number">0</span>”的基数为<span class="hljs-number">8</span>，否则为<span class="hljs-number">10</span>。<br>	//bitSize参数指定结果必须适合的整数类型。位大小<span class="hljs-number">0</span>、<span class="hljs-number">8</span>、<span class="hljs-number">16</span>、<span class="hljs-number">32</span>和<span class="hljs-number">64</span>分别对应于<span class="hljs-built_in">int</span>，<span class="hljs-built_in">int8</span>，<span class="hljs-built_in">int16</span>，<span class="hljs-built_in">int32</span>和<span class="hljs-built_in">int64</span><br>	//<span class="hljs-type">ParseInt</span>返回的错误的具体类型为* <span class="hljs-type">NumError</span>，其中包括err.<span class="hljs-type">Num</span> = s。如果s为空或包含无效数字，则err.<span class="hljs-type">Err</span> = <span class="hljs-type">ErrSyntax</span>，返回值为<span class="hljs-number">0</span>；否则，返回<span class="hljs-number">0</span><br>	//如果与s对应的值不能用给定大小的有符号整数表示，则err.<span class="hljs-type">Err</span> = <span class="hljs-type">ErrRange</span>，并且返回的值是适当的bitSize和sign的最大大小整数。<br>	num4, _ = strconv.<span class="hljs-type">ParseInt</span>(num3, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br>	num5 = <span class="hljs-built_in">int</span>(num4)<br>	fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;num4 type is %T num4=%v\n&quot;</span>, num4, num4)<br>	fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;num5 type is %T num5=%v\n&quot;</span>, num5, num5)<br><br>	<span class="hljs-keyword">var</span> num6 <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;1243.324&quot;</span><br>	<span class="hljs-keyword">var</span> num7 <span class="hljs-built_in">float64</span><br>	//<span class="hljs-keyword">func</span> <span class="hljs-type">ParseFloat</span>（s <span class="hljs-built_in">string</span>，bitSize <span class="hljs-built_in">int</span>）（f <span class="hljs-built_in">float64</span>，err error）<br>	//<span class="hljs-type">ParseFloat</span>将字符串s转换为由bitSize指定的精度的浮点数：<span class="hljs-built_in">float32</span>为<span class="hljs-number">32</span>或<span class="hljs-built_in">float64</span>为<span class="hljs-number">64</span>。当bitSize = <span class="hljs-number">32</span>时，结果仍为<span class="hljs-built_in">float64</span>类型，但可以将其转换为<span class="hljs-built_in">float32</span>而无需更改其值<br>	//如果s格式正确且在有效的浮点数附近，则<span class="hljs-type">ParseFloat</span>返回使用<span class="hljs-type">IEEE754</span>无偏舍入舍入的最近的浮点数<br>	//<span class="hljs-type">ParseFloat</span>返回的错误的具体类型为* <span class="hljs-type">NumError</span>，其中包括err.<span class="hljs-type">Num</span> = s<br>	//如果s在语法上不正确，则<span class="hljs-type">ParseFloat</span>返回err.<span class="hljs-type">Err</span> = <span class="hljs-type">ErrSyntax</span><br>	//如果s在语法上格式正确，但与给定大小的最大浮点数相差超过<span class="hljs-number">1</span>/<span class="hljs-number">2</span> <span class="hljs-type">ULP</span>，则<span class="hljs-type">ParseFloat</span>返回f =±<span class="hljs-type">Inf</span>，err.<span class="hljs-type">Err</span> = <span class="hljs-type">ErrRange</span><br>	num7, _ = strconv.<span class="hljs-type">ParseFloat</span>(num6, <span class="hljs-number">64</span>)<br>	fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;num7 type is %T num7=%v\n&quot;</span>, num7, num7)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>说明：因为返回值是int64或者float64，如果希望得到int或者float32则需要转换</p>
<h3 id="string-转基本数据类型的注意事项"><a href="#string-转基本数据类型的注意事项" class="headerlink" title="string 转基本数据类型的注意事项"></a>string 转基本数据类型的注意事项</h3><p>​    在将 String 类型转成 基本数据类型时， 要确保 String  类型能够转成有效的数据，比如 我们可以把 “123” , 转成一个整数，但是不能把 “hello” 转成一个整数，如果这样做，Golang 直接将其转成 0 ，其它类型也是一样的道理. float =&gt; 0 bool =&gt; false</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言是怎么完成编译的</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%8C%E6%88%90%E7%BC%96%E8%AF%91%E7%9A%84/</url>
    <content><![CDATA[<p>​        Go语言是一门需要编译才能运行的编程语言，也就说代码在运行之前需要通过编译器生成二进制机器码，随后二进制文件才能在目标机器上运行，如果我们想要了解Go语言的实现原理，理解它的编译过程就是一个没有办法绕过的事情。</p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>​        想要深入了解Go语言的编译过程，需要提前了解一下编译过程中涉及的一些术语和专业知识。这些知识其实在我们的日常工作和学习中比较难用到，但是对于理解编译的过程和原理还是非常重要的。</p>
<h4 id="1-抽象语法树"><a href="#1-抽象语法树" class="headerlink" title="1) 抽象语法树"></a>1) 抽象语法树</h4><p>​        在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>
<p>​         之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现。而类似于 if else 这样的条件判断语句，可以使用带有两个分支的节点来表示。</p>
<p> 以算术表达式 1+3*(4-1)+2 为例，可以解析出的抽象语法树如下图所示：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-191115094600340.gif" alt="抽象语法树"><br> 图：抽象语法树</p>
<p> 抽象语法树可以应用在很多领域，比如浏览器，智能编辑器，编译器。</p>
<h4 id="2-静态单赋值"><a href="#2-静态单赋值" class="headerlink" title="2) 静态单赋值"></a>2) 静态单赋值</h4><p>​        在编译器设计中，静态单赋值形式（static single assignment form，通常简写为 SSA form 或是  SSA）是中介码（IR，intermediate  representation）的属性，它要求每个变量只分配一次，并且变量需要在使用之前定义。在实践中我们通常会用添加下标的方式实现每个变量只能被赋值一次的特性，这里以下面的代码举一个简单的例子：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-symbol">x</span> := <span class="hljs-number">1</span><br><span class="hljs-symbol">x</span> := <span class="hljs-number">2</span><br><span class="hljs-symbol">y</span> := <span class="hljs-symbol">x</span><br></code></pre></td></tr></table></figure>
<p>从上面的描述所知，第一行赋值行为是不需要的，因为 x 在第二行被二度赋值并在第三行被使用，在 SSA 下，将会变成下列的形式：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x1</span> := <span class="hljs-number">1</span><br><span class="hljs-attribute">x2</span> := <span class="hljs-number">2</span><br><span class="hljs-attribute">y1</span> := x<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<p>​        从使用 SSA 的中间代码我们就可以非常清晰地看出变量 y1 的值和 x1 是完全没有任何关系的，所以在机器码生成时其实就可以省略第一步，这样就能减少需要执行的指令来优化这一段代码。</p>
<p> 根据 Wikipedia（维基百科）对 SSA 的介绍来看，在中间代码中使用 SSA 的特性能够为整个程序实现以下的优化：</p>
<ul>
<li>常数传播（constant propagation）</li>
<li>值域传播（value range propagation）</li>
<li>稀疏有条件的常数传播（sparse conditional constant propagation）</li>
<li>消除无用的程式码（dead code elimination）</li>
<li>全域数值编号（global value numbering）</li>
<li>消除部分的冗余（partial redundancy elimination）</li>
<li>强度折减（strength reduction）</li>
<li>寄存器分配（register allocation）</li>
</ul>
<p> 因为 SSA 的主要作用就是代码的优化，所以是编译器后端（主要负责目标代码的优化和生成）的一部分。当然，除了 SSA 之外代码编译领域还有非常多的中间代码优化方法，优化编译器生成的代码是一个非常古老并且复杂的领域，这里就不展开介绍了。</p>
<h4 id="3-指令集架构"><a href="#3-指令集架构" class="headerlink" title="3) 指令集架构"></a>3) 指令集架构</h4><p>​        最后要介绍的一个预备知识就是指令集架构了，指令集架构（Instruction Set Architecture，简称  ISA），又称指令集或指令集体系，是计算机体系结构中与程序设计有关的部分，包含了基本数据类型，指令集，寄存器，寻址模式，存储体系，中断，异常处理以及外部 I/O。指令集架构包含一系列的 opcode 即操作码（机器语言），以及由特定处理器执行的基本命令。</p>
<p> 指令集架构常见种类如下：</p>
<ul>
<li><p>复杂指令集运算（Complex Instruction Set Computing，简称 CISC）；</p>
</li>
<li><p>精简指令集运算（Reduced Instruction Set Computing，简称 RISC）；</p>
</li>
<li><p>显式并行指令集运算（Explicitly Parallel Instruction Computing，简称 EPIC）；</p>
</li>
<li><p>超长指令字指令集运算（VLIW）。</p>
</li>
</ul>
<pre><code>     不同的处理器（CPU）使用了大不相同的机器语言，所以我们的程序想要在不同的机器上运行，就需要将源代码根据架构编译成不同的机器语言。</code></pre>
<h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>​        Go语言编译器的源代码在 cmd/compile  目录中，目录下的文件共同构成了Go语言的编译器，学过编译原理的人可能听说过编译器的前端和后端，编译器的前端一般承担着词法分析、语法分析、类型检查和中间代码生成几部分工作，而编译器后端主要负责目标代码的生成和优化，也就是将中间代码翻译成目标机器能够运行的机器码。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19111511533W48.gif" alt="img"></p>
<p>​         Go的编译器在逻辑上可以被分成四个阶段：词法与语法分析、类型检查和 AST 转换、通用 SSA 生成和最后的机器代码生成，下面我们来分别介绍一下这四个阶段做的工作。</p>
<h4 id="1-词法与语法分析"><a href="#1-词法与语法分析" class="headerlink" title="1) 词法与语法分析"></a>1) 词法与语法分析</h4><p>​        所有的编译过程其实都是从解析代码的源文件开始的，词法分析的作用就是解析源代码文件，它将文件中的字符串序列转换成 Token 序列，方便后面的处理和解析，我们一般会把执行词法分析的程序称为词法解析器（lexer）。</p>
<p>​         而语法分析的输入就是词法分析器输出的 Token 序列，这些序列会按照顺序被语法分析器进行解析，语法的解析过程就是将词法分析生成的 Token  按照语言定义好的文法（Grammar）自下而上或者自上而下的进行规约，每一个 Go 的源代码文件最终会被归纳成一个 SourceFile 结构：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SourceFile</span> = PackageClause <span class="hljs-string">&quot;;&quot;</span> &#123; <span class="hljs-attribute">ImportDecl</span> <span class="hljs-string">&quot;;&quot;</span> &#125; &#123; <span class="hljs-attribute">TopLevelDecl</span> <span class="hljs-string">&quot;;&quot;</span> &#125;<br></code></pre></td></tr></table></figure>
<p>​        标准的 Golang 语法解析器使用的就是 LALR(1) 的文法，语法解析的结果其实就是上面介绍过的抽象语法树（AST），每一个 AST 都对应着一个单独的Go语言文件，这个抽象语法树中包括当前文件属于的包名、定义的常量、结构体和函数等。</p>
<p>​         如果在语法解析的过程中发生了任何语法错误，都会被语法解析器发现并将消息打印到标准输出上，整个编译过程也会随着错误的出现而被中止。</p>
<h4 id="2-类型检查"><a href="#2-类型检查" class="headerlink" title="2) 类型检查"></a>2) 类型检查</h4><p>​        当拿到一组文件的抽象语法树 AST 之后，Go语言的编译器会对语法树中定义和使用的类型进行检查，类型检查分别会按照顺序对不同类型的节点进行验证，按照以下的顺序进行处理：</p>
<ul>
<li>常量、类型和函数名及类型；</li>
<li>变量的赋值和初始化；</li>
<li>函数和闭包的主体；</li>
<li>哈希键值对的类型；</li>
<li>导入函数体；</li>
<li>外部的声明；</li>
</ul>
<p> 通过对每一棵抽象节点树的遍历，我们在每一个节点上都会对当前子树的类型进行验证保证当前节点上不会出现类型错误的问题，所有的类型错误和不匹配都会在这一个阶段被发现和暴露出来。</p>
<p>​         类型检查的阶段不止会对树状结构的节点进行验证，同时也会对一些内建的函数进行展开和改写，例如 make 关键字在这个阶段会根据子树的结构被替换成 makeslice 或者 makechan 等函数。</p>
<p>​         其实类型检查不止对类型进行了验证工作，还对 AST 进行了改写以及处理Go语言内置的关键字，所以，这一过程在整个编译流程中是非常重要的，没有这个步骤很多关键字其实就没有办法工作。</p>
<h4 id="3-中间代码生成"><a href="#3-中间代码生成" class="headerlink" title="3) 中间代码生成"></a>3) 中间代码生成</h4><p>​        当我们将源文件转换成了抽象语法树，对整个语法树的语法进行解析并进行类型检查之后，就可以认为当前文件中的代码基本上不存在无法编译或者语法错误的问题了，Go语言的编译器就会将输入的 AST 转换成中间代码。</p>
<p>​         Go语言编译器的中间代码使用了 SSA(Static Single Assignment Form) 的特性，如果我们在中间代码生成的过程中使用这种特性，就能够比较容易的分析出代码中的无用变量和片段并对代码进行优化。</p>
<pre><code>     在类型检查之后，就会通过一个名为 compileFunctions  的函数开始对整个Go语言项目中的全部函数进行编译，这些函数会在一个编译队列中等待几个后端工作协程的消费，这些 Goroutine  会将所有函数对应的 AST 转换成使用 SSA 特性的中间代码。</code></pre>
<h4 id="4-机器码生成"><a href="#4-机器码生成" class="headerlink" title="4) 机器码生成"></a>4) 机器码生成</h4><p>​        Go语言源代码的 cmd/compile/internal 目录中包含了非常多机器码生成相关的包，不同类型的 CPU 分别使用了不同的包进行生成 amd64、arm、arm64、mips、mips64、ppc64、s390x、x86 和 wasm，也就是说Go语言能够在几乎全部常见的  CPU 指令集类型上运行。</p>
<h2 id="编译器入口"><a href="#编译器入口" class="headerlink" title="编译器入口"></a>编译器入口</h2><p>​        Go语言的编译器入口是 src/cmd/compile/internal/gc 包中的 main.go 文件，这个 600 多行的 Main  函数就是Go语言编译器的主程序，这个函数会先获取命令行传入的参数并更新编译的选项和配置，随后就会开始运行 parseFiles  函数对输入的所有文件进行词法与语法分析得到文件对应的抽象语法树：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Main</span><span class="hljs-params">(archInit <span class="hljs-keyword">func</span>(*Arch)</span>)</span> &#123;<br>   <span class="hljs-comment">// ...</span><br><br>   lines := parseFiles(flag.Args())<br></code></pre></td></tr></table></figure>
<p>​        接下来就会分九个阶段对抽象语法树进行更新和编译，就像我们在上面介绍的，整个过程会经历类型检查、SSA 中间代码生成以及机器码生成三个部分：</p>
<ul>
<li>检查常量、类型和函数的类型；</li>
<li>处理变量的赋值；</li>
<li>对函数的主体进行类型检查；</li>
<li>决定如何捕获变量；</li>
<li>检查内联函数的类型；</li>
<li>进行逃逸分析；</li>
<li>将闭包的主体转换成引用的捕获变量；</li>
<li>编译顶层函数；</li>
<li>检查外部依赖的声明；</li>
</ul>
<p> 了解了剩下的编译过程之后，我们重新回到词法和语法分析后的具体流程，在这里编译器会对生成语法树中的节点执行类型检查，除了常量、类型和函数这些顶层声明之外，它还会对变量的赋值语句、函数主体等结构进行检查：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>    n := xtop[i]<br>    <span class="hljs-keyword">if</span> op := n.Op; op != ODCL &amp;&amp; op != OAS &amp;&amp; op != OAS2 &amp;&amp; (op != ODCLTYPE || !n.Left.Name.Param.Alias) &#123;<br>        xtop[i] = typecheck(n, ctxStmt)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>    n := xtop[i]<br>    <span class="hljs-keyword">if</span> op := n.Op; op == ODCL || op == OAS || op == OAS2 || op == ODCLTYPE &amp;&amp; n.Left.Name.Param.Alias &#123;<br>        xtop[i] = typecheck(n, ctxStmt)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>    n := xtop[i]<br>    <span class="hljs-keyword">if</span> op := n.Op; op == ODCLFUNC || op == OCLOSURE &#123;<br>        typecheckslice(Curfn.Nbody.Slice(), ctxStmt)<br>    &#125;<br>&#125;<br><br>checkMapKeys()<br><br><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> xtop &#123;<br>    <span class="hljs-keyword">if</span> n.Op == ODCLFUNC &amp;&amp; n.Func.Closure != <span class="hljs-literal">nil</span> &#123;<br>        capturevars(n)<br>    &#125;<br>&#125;<br><br>escapes(xtop)<br><br><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> xtop &#123;<br>    <span class="hljs-keyword">if</span> n.Op == ODCLFUNC &amp;&amp; n.Func.Closure != <span class="hljs-literal">nil</span> &#123;<br>        transformclosure(n)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>​        类型检查会对传入节点的子节点进行遍历，这个过程会对 make 等关键字进行展开和重写，类型检查结束之后并没有输出新的<a href="http://c.biancheng.net/data_structure/">数据结构</a>，只是改变了语法树中的一些节点，同时这个过程的结束也意味着源代码中已经不存在语法错误和类型错误，中间代码和机器码也都可以正常的生成了。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">    initssaconfig()</span><br><span class="hljs-code"></span><br><span class="hljs-code">    peekitabs()</span><br><span class="hljs-code"></span><br><span class="hljs-code">    for i := 0; i &lt; len(xtop); i++ &#123;</span><br><span class="hljs-code">        n := xtop[i]</span><br><span class="hljs-code">        if n.Op == ODCLFUNC &#123;</span><br><span class="hljs-code">            funccompile(n)</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    compileFunctions()</span><br><span class="hljs-code"></span><br><span class="hljs-code">    for i, n := range externdcl &#123;</span><br><span class="hljs-code">        if n.Op == ONAME &#123;</span><br><span class="hljs-code">            externdcl[i] = typecheck(externdcl[i], ctxExpr)</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    checkMapKeys()</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure>
<p>​        在主程序运行的最后，会将顶层的函数编译成中间代码并根据目标的 CPU 架构生成机器码，不过这里其实也可能会再次对外部依赖进行类型检查以验证正确性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        Go语言的编译过程其实是非常有趣并且值得学习的，通过对Go语言四个编译阶段的分析和对编译器主函数的梳理，我们能够对 Golang 的实现有一些基本的理解，掌握编译的过程之后，Go语言对于我们来讲也不再那么神秘，所以学习其编译原理的过程还是非常有必要的。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言的特性</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>Go语言也称为 Golang，是由 Google 公司开发的一种静态强类型、编译型、并发型、并具有垃圾回收功能的编程语言。</p>
<p> 接下来从几个方面来具体介绍一下Go语言的特性。</p>
<h2 id="语法简单"><a href="#语法简单" class="headerlink" title="语法简单"></a>语法简单</h2><p>​        抛开语法样式不谈，单就类型和规则而言，Go 与 C99、C11 相似之处颇多，这也是Go语言被冠以“NextC”名号的重要原因。</p>
<p>​         Go语言的语法处于简单和复杂的两极。C语言简单到你每写下一行代码，都能在脑中想象出编译后的模样，指令如何执行，内存如何分配，等等。而 C  的复杂在于，它有太多隐晦而不着边际的规则，着实让人头疼。相比较而言，Go  从零开始，没有历史包袱，在汲取众多经验教训后，可从头规划一个规则严谨、条理简单的世界。</p>
<p>​         Go语言的语法规则严谨，没有歧义，更没什么黑魔法变异用法。任何人写出的代码都基本一致，这使得Go语言简单易学。放弃部分“灵活”和“自由”，换来更好的维护性，我觉得是值得的。</p>
<pre><code>     将“++”、“--”从运算符降级为语句，保留指针，但默认阻止指针运算，带来的好处是显而易见的。还有，将切片和字典作为内置类型，从运行时的层面进行优化，这也算是一种“简单”。</code></pre>
<h2 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h2><p>​        时至今日，并发编程已成为程序员的基本技能，在各个技术社区都能看到诸多与之相关的讨论主题。在这种情况下Go语言却一反常态做了件极大胆的事，从根本上将一切都并发化，运行时用 Goroutine 运行所有的一切，包括 main.main 入口函数。</p>
<p>​         可以说，Goroutine 是 Go 最显著的特征。它用类协程的方式来处理并发单元，却又在运行时层面做了更深度的优化处理。这使得语法上的并发编程变得极为容易，无须处理回调，无须关注线程切换，仅一个关键字，简单而自然。</p>
<p>​         搭配 channel，实现 CSP 模型。将并发单元间的数据耦合拆解开来，各司其职，这对所有纠结于内存共享、锁粒度的开发人员都是一个可期盼的解脱。若说有所不足，那就是应该有个更大的计划，将通信从进程内拓展到进程外，实现真正意义上的分布式。</p>
<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>​        将一切并发化固然是好，但带来的问题同样很多。如何实现高并发下的内存分配和管理就是个难题。好在 Go 选择了 tcmalloc，它本就是为并发而设计的高性能内存分配组件。</p>
<p>​         可以说，内存分配器是运行时三大组件里变化最少的部分。刨去因配合垃圾回收器而修改的内容，内存分配器完整保留了 tcmalloc 的原始架构。使用  cache 为当前执行线程提供无锁分配，多个 central 在不同线程间平衡内存单元复用。在更高层次里，heap  则管理着大块内存，用以切分成不同等级的复用内存块。快速分配和二级内存平衡机制，让内存分配器能优秀地完成高压力下的内存管理任务。</p>
<p>​         在最近几个版本中，编译器优化卓有成效。它会竭力将对象分配在栈上，以降低垃圾回收压力，减少管理消耗，提升执行性能。可以说，除偶尔因性能问题而被迫采用对象池和自主内存管理外，我们基本无须参与内存管理操作。</p>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>​        垃圾回收一直是个难题。早年间，<a href="http://c.biancheng.net/java/">Java</a> 就因垃圾回收低效被嘲笑了许久，后来 Sun 连续收纳了好多人和技术才发展到今天。可即便如此，在 Hadoop 等大内存应用场景下，垃圾回收依旧捉襟见肘、步履维艰。</p>
<p>​         相比 Java，Go 面临的困难要更多。因指针的存在，所以回收内存不能做收缩处理。幸好，指针运算被阻止，否则要做到精确回收都难。</p>
<p>​         每次升级，垃圾回收器必然是核心组件里修改最多的部分。从并发清理，到降低 STW 时间，直到 Go 的 1.5  版本实现并发标记，逐步引入三色标记和写屏障等等，都是为了能让垃圾回收在不影响用户逻辑的情况下更好地工作。尽管有了努力，当前版本的垃圾回收算法也只能说堪用，离好用尚有不少距离。</p>
<h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><p>​        Go 刚发布时，静态链接被当作优点宣传。只须编译后的一个可执行文件，无须附加任何东西就能部署。这似乎很不错，只是后来风气变了。连着几个版本，编译器都在完善动态库 buildmode 功能，场面一时变得有些尴尬。</p>
<pre><code>     暂不说未完工的 buildmode 模式，静态编译的好处显而易见。将运行时、依赖库直接打包到可执行文件内部，简化了部署和发布操作，无须事先安装运行环境和下载诸多第三方库。这种简单方式对于编写系统软件有着极大好处，因为库依赖一直都是个麻烦。</code></pre>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>​        功能完善、质量可靠的标准库为编程语言提供了充足动力。在不借助第三方扩展的情况下，就可完成大部分基础功能开发，这大大降低了学习和使用成本。最关键的是，标准库有升级和修复保障，还能从运行时获得深层次优化的便利，这是第三方库所不具备的。</p>
<pre><code>     Go 标准库虽称不得完全覆盖，但也算极为丰富。其中值得称道的是 net/http，仅须简单几条语句就能实现一个高性能 Web  Server，这从来都是宣传的亮点。更何况大批基于此的优秀第三方 Framework 更是将 Go 推到 Web/Microservice  开发标准之一的位置。</code></pre>
<p>​         当然，优秀第三方资源也是语言生态圈的重要组成部分。近年来崛起的几门语言中，Go 算是独树一帜，大批优秀作品频繁涌现，这也给我们学习 Go 提供了很好的参照。</p>
<h2 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h2><p>​        完整的工具链对于日常开发极为重要。Go 在此做得相当不错，无论是编译、格式化、错误检查、帮助文档，还是第三方包下载、更新都有对应的工具。其功能未必完善，但起码算得上简单易用。</p>
<p>​         内置完整测试框架，其中包括单元测试、性能测试、代码覆盖率、数据竞争，以及用来调优的 pprof，这些都是保障代码能正确而稳定运行的必备利器。</p>
<p>​         除此之外，还可通过环境变量输出运行时监控信息，尤其是垃圾回收和并发调度跟踪，可进一步帮助我们改进算法，获得更佳的运行期表现。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言标准库强大</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E5%BC%BA%E5%A4%A7/</url>
    <content><![CDATA[<p>​        学习编程语言，早已不是学一点语法规则那么简单。现在更习惯称作选择 Ecosystem（生态圈），而这其中标准库的作用和分量尤为明显。</p>
<p>​         在Go语言的安装文件里包含了一些可以直接使用的包，即标准库。Go语言的标准库（通常被称为语言自带的电池），提供了清晰的构建模块和公共接口，包含 I/O 操作、文本处理、图像、密码学、网络和分布式应用程序等，并支持许多标准化的文件格式和编解码协议。</p>
<p>​         在 Windows 下，标准库的位置在Go语言根目录下的子目录 pkg\windows_amd64 中；在 Linux  下，标准库在Go语言根目录下的子目录 pkg\linux_amd64 中（如果是安装的是 32 位，则在 linux_386  目录中）。一般情况下，标准包会存放在 $GOROOT/pkg/$GOOS_$GOARCH/ 目录下。</p>
<p>​         Go语言的编译器也是标准库的一部分，通过词法器扫描源码，使用语法树获得源码逻辑分支等。Go语言的周边工具也是建立在这些标准库上。在标准库上可以完成几乎大部分的需求。</p>
<p> Go语言的标准库以包的方式提供支持，下表列出了Go语言标准库中常见的包及其功能。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200707104529603.png" alt="image-20200707104529603"></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>程序流程控制</title>
    <url>/2021/04/09/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="1、程序流程控制介绍"><a href="#1、程序流程控制介绍" class="headerlink" title="1、程序流程控制介绍"></a>1、程序流程控制介绍</h2><p>在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句。</p>
<ol>
<li><p>顺序控制</p>
</li>
<li><p>分支控制</p>
</li>
<li><p>循环控制</p>
</li>
</ol>
<h3 id="1-1-顺序控制"><a href="#1-1-顺序控制" class="headerlink" title="1.1 顺序控制"></a>1.1 顺序控制</h3><p>程序从上到下逐行地执行，中间没有任何判断和跳转。</p>
<p>分支控制就是让程序有选择执行。有下面三种形式</p>
<ol>
<li><p>单分支</p>
</li>
<li><p>双分支</p>
</li>
</ol>
<p>3）多分支</p>
<h3 id="1-2-多分支的判断"><a href="#1-2-多分支的判断" class="headerlink" title="1.2 多分支的判断"></a>1.2 多分支的判断</h3><p>流程如下:</p>
<p>(1) 先判断条件表达式 1 是否成立，如果为真，就执行代码块 1</p>
<p>(2) 如果条件表达式 1 如果为假，就去判断条件表达式 2 是否成立， 如果条件表达式 2 为真，就执行代码块 2</p>
<p>(3) 依次类推.</p>
<p>(4) 如果所有的条件表达式不成立，则执行 else 的语句块。</p>
<p>(5) else 不是必须的。</p>
<p>(6) 多分支只能有一个执行入口</p>
<h3 id="1-3-嵌套分支"><a href="#1-3-嵌套分支" class="headerlink" title="1.3 嵌套分支"></a>1.3 嵌套分支</h3><p>基本介绍</p>
<p>在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">package main<br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>func main<span class="hljs-literal">()</span> &#123;<br>	var month byte<br>	var age byte<br>	var mony float64 = <span class="hljs-number">60.0</span><br>	fmt.<span class="hljs-constructor">Println(<span class="hljs-string">&quot;请输入月份&quot;</span>)</span><br>	fmt.<span class="hljs-constructor">Scanln(&amp;<span class="hljs-params">month</span>)</span><br>	fmt.<span class="hljs-constructor">Println(<span class="hljs-string">&quot;请输入年龄&quot;</span>)</span><br>	fmt.<span class="hljs-constructor">Scanln(&amp;<span class="hljs-params">age</span>)</span><br>	<span class="hljs-keyword">if</span> month &gt;= <span class="hljs-number">4</span><span class="hljs-operator"> &amp;&amp; </span>month &lt;= <span class="hljs-number">10</span> &#123;<br>		<span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">60</span> &#123;<br>			fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%v 月年龄为 %v 的票价是 %v&quot;</span>, <span class="hljs-params">month</span>, <span class="hljs-params">age</span>, <span class="hljs-params">mony</span><span class="hljs-operator">/</span>3)</span><br>		&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> &#123;<br>			fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%v 月年龄为 %v 的票价是 %v&quot;</span>, <span class="hljs-params">month</span>, <span class="hljs-params">age</span>, <span class="hljs-params">mony</span>)</span><br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%v 月年龄为 %v 的票价是 %v&quot;</span>, <span class="hljs-params">month</span>, <span class="hljs-params">age</span>, <span class="hljs-params">mony</span><span class="hljs-operator">/</span>2)</span><br>		&#125;<br>	&#125; <span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> &#123;<br>			fmt.<span class="hljs-constructor">Println(<span class="hljs-string">&quot;的票价是40&quot;</span>)</span><br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			fmt.<span class="hljs-constructor">Println(<span class="hljs-string">&quot;票价是20&quot;</span>)</span><br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="2、Switch语句"><a href="#2、Switch语句" class="headerlink" title="2、Switch语句"></a>2、Switch语句</h2><h3 id="2-1-基本的介绍"><a href="#2-1-基本的介绍" class="headerlink" title="2.1 基本的介绍"></a>2.1 基本的介绍</h3><ol>
<li><p>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上到下逐一测试，直到匹配为止。</p>
</li>
<li><p>匹配项后面也 不需要再加 break</p>
</li>
</ol>
<h3 id="2-2-switch-的使用的注意事项和细节"><a href="#2-2-switch-的使用的注意事项和细节" class="headerlink" title="2.2 switch 的使用的注意事项和细节"></a>2.2 switch 的使用的注意事项和细节</h3><ol>
<li><p>case/switch 后是一个表达式( 即： 常量值、变量、一个有 返回值的函数等都可以)</p>
</li>
<li><p>case 后的各个表达式的值的数据类型，必须和 switch 的表达式数据类型一致</p>
</li>
<li><p>case 后面可以带多个表达式，使用逗号间隔。比如 case 表达式 1, 表达式 2 …</p>
</li>
<li><p>case 后面的表达式如果是常量值(字面量)，则要求不能重复</p>
</li>
<li><p>case 后面不需要带 break , 程序匹配到一个 case 后就会执行对应的代码块，然后退出 switch，如果一个都匹配不到，则执行 default</p>
</li>
<li><p>default 语句不是必须的.</p>
</li>
<li><p>switch 后也可以不带表达式，类似 if –else 分支来使用。</p>
</li>
<li><p>switch 后也可以直接声明/定义一个变量，分号结束， 不推荐。</p>
</li>
<li><p>switch 穿透-fallthrough ，如果在 case 语句块后增加 fallthrough ,则会继续执行下一个 case，也叫 switch 穿透</p>
</li>
<li><p>Type Switch：switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际指向的变量类型</p>
</li>
</ol>
<h3 id="2-3-案例演示"><a href="#2-3-案例演示" class="headerlink" title="2.3 案例演示"></a>2.3 案例演示</h3><ol>
<li>使用 switch 把小写类型的 char 型转为大写(键盘输入)。只转换 a, b, c, d, e. 其它的输出“other”</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br>func main() &#123;<br>	var num <span class="hljs-keyword">byte</span><br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;请输入字母&quot;</span>)<br>	fmt.Scanf(<span class="hljs-string">&quot;%c&quot;</span>, &amp;num)<br><br>	<span class="hljs-keyword">switch</span> num &#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;A&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;B&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;C&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;D&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;E&quot;</span>)<br>	<span class="hljs-keyword">default</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;输入错误&quot;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<ol start="2">
<li>对学生成绩大于 60 分的，输出“合格”。低于 60 分的，输出“不合格”。(注：输入的成绩不能大于 100)</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart">package main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br>func main() &#123;<br>	<span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> float64<br>	fmt.Println(<span class="hljs-string">&quot;请输入分数&quot;</span>)<br>	fmt.Scanln(&amp;<span class="hljs-built_in">num</span>)<br><br>	<span class="hljs-keyword">switch</span> &#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-built_in">num</span> &gt;= <span class="hljs-number">60</span> &amp;&amp; <span class="hljs-built_in">num</span> &lt;= <span class="hljs-number">100</span>:<br>		fmt.Println(<span class="hljs-string">&quot;合格&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">60</span>:<br>		fmt.Println(<span class="hljs-string">&quot;不合格&quot;</span>)<br>	<span class="hljs-keyword">default</span>:<br>		fmt.Println(<span class="hljs-string">&quot;输入错误&quot;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<ol start="3">
<li>根据用户指定月份，打印该月份所属的季节。3,4,5 春季 6,7,8 夏季 9,10,11 秋季 12, 1, 2 冬季</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br>func main() &#123;<br>	var month <span class="hljs-keyword">byte</span><br>	fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;请输入月份&quot;</span>)<br>	fmt.Scanln(&amp;month)<br><br>	<span class="hljs-keyword">switch</span> month &#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;春节&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;夏节&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;秋节&quot;</span>)<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;冬节&quot;</span>)<br>	<span class="hljs-keyword">default</span>:<br>		fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;输入错误&quot;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="2-4-switch-和-if-的比较"><a href="#2-4-switch-和-if-的比较" class="headerlink" title="2.4 switch 和 if 的比较"></a>2.4 switch 和 if 的比较</h2><ol>
<li><p>如果判断的 具体数值不多，而且符合整数、浮点数、字符、字符串这几种类型。建议使用 swtich语句，简洁高效。</p>
</li>
<li><p>其他情况：对 区间判断和结果为 bool 类型的判断，使用 if，if  的使用范围更广</p>
</li>
</ol>
<h2 id="3、多重循环控制"><a href="#3、多重循环控制" class="headerlink" title="3、多重循环控制"></a>3、多重循环控制</h2><h3 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h3><ol>
<li><p>将一个循环放在另一个循环体内，就形成了嵌套循环。在外边的 for 称为外层循环在里面的 for循环称为内层循环。【 建议一般使用两层，最多不要超过 3  层】</p>
</li>
<li><p>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环。</p>
</li>
<li><p>外层循环次数为 m 次，内层为 n 次，则内层循环体实际上需要执行 m*n 次</p>
</li>
</ol>
<h3 id="3-2-案例"><a href="#3-2-案例" class="headerlink" title="3.2 案例"></a>3.2 案例</h3><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-comment">// 统计 3 个班成绩情况，每个班有 5 名同学，求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入],并统计及格人数</span><br>	<span class="hljs-comment">//先统计一个班五名学生的成绩，再求出平均分</span><br>	<span class="hljs-comment">//再统计五个班</span><br>	<span class="hljs-comment">//再统计年级平均成绩</span><br>	<span class="hljs-comment">//函数类型必须一致，否则进行类型转换</span><br>	<span class="hljs-keyword">var</span> classtotol <span class="hljs-keyword">int</span> = <span class="hljs-number">2</span> <span class="hljs-comment">//优化总班级</span><br>	<span class="hljs-keyword">var</span> memtotol <span class="hljs-keyword">int</span> = <span class="hljs-number">2</span>   <span class="hljs-comment">//优化每个班人数</span><br>	<span class="hljs-keyword">var</span> totol <span class="hljs-keyword">float64</span>      <span class="hljs-comment">//定义变量接收全年级总成绩</span><br>	<span class="hljs-keyword">var</span> sum <span class="hljs-keyword">float64</span>        <span class="hljs-comment">//定义函数接收总成绩</span><br>	<span class="hljs-keyword">var</span> mem <span class="hljs-keyword">int</span>           <span class="hljs-comment">//接收及格人数</span><br>	<span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= classtotol; j++ &#123; <span class="hljs-comment">//三个班级的平均成绩</span><br>		<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= memtotol; i++ &#123;<br>			<span class="hljs-keyword">var</span> count <span class="hljs-keyword">float64</span>                      <span class="hljs-comment">//定义变量接收成绩</span><br>			fmt.Printf(<span class="hljs-string">&quot;请输入第%d班第%d个学生的成绩\n&quot;</span>, j, i) <span class="hljs-comment">//%d	十进制表示</span><br>			fmt.Scanln(&amp;count)<br>			sum = sum + count<br>			<span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">60</span> &#123;<br>				mem++<br>			&#125;<br>		&#125;<br>		fmt.Printf(<span class="hljs-string">&quot;第%d班班级平均成绩为%v\n&quot;</span>, j, sum/<span class="hljs-keyword">float64</span>(memtotol)) <span class="hljs-comment">//%v相应值的默认格式</span><br>	&#125;<br>	totol = totol + sum<br>	fmt.Printf(<span class="hljs-string">&quot;全年级平均成绩为%v\n&quot;</span>, totol/<span class="hljs-keyword">float64</span>(memtotol*classtotol))<br>	fmt.Printf(<span class="hljs-string">&quot;及格人数为%v&quot;</span>, mem)<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言程序的编译和运行</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<p>Go语言是编译型的静态语言（和C语言一样），所以在运行Go语言程序之前，先要将其编译成二进制的可执行文件。</p>
<p> 可以通过Go语言提供的<code>go build</code>或者<code>go run</code>命令对Go语言程序进行编译：</p>
<ul>
<li><code>go build </code>命令可以将Go语言程序代码编译成二进制的可执行文件，但是需要我们手动运行该二进制文件；</li>
<li><code>go run </code>命令则更加方便，它会在编译后直接运行Go语言程序，编译过程中会产生一个临时文件，但不会生成可执行文件，这个特点很适合用来调试程序。</li>
</ul>
<p> 下面就来演示一下，如何运行我们上一节中编写的Go语言程序。</p>
<p>​         因为之前我们已经配置好了环境变量，所以可以直接使用 Windows 自带的命令行工具（也叫 CMD 窗口或者命令提示符）来编译Go语言程序。微软后来对命令行工具进行了一次升级，并更名为 Powershell，power 是更加强大的意思。</p>
<p> 打开命令行工具的方式多种多样，下面列出了比较常用的两种：</p>
<ul>
<li>可以在开始菜单中打开命令行工具，然后 cd 到 Go 源文件所在的目录。</li>
<li>也可以在 Go 源文件所在目录的空白处按住 Shift 键并单击鼠标右键，然后在弹出菜单中选择“在此处打开命令行窗口”或者“在此处打开 Powershell 窗口”，这样会自动 cd 到 Go 源文件所在的目录，如下图所示。这种方式更加方便，推荐大家使用。</li>
</ul>
<p>提示：cd 是命令行工具的一个命令，用来改变当前所在的目录，是 change directory 的缩写。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1-191022135453b2.gif" alt="img"><br> Win7 下选择“在此处打开命令窗口”</p>
<p> <img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19101G64932535.gif" alt="img"><br> Win10 下选择“在此处打开 Powershell 窗口”</p>
<h3 id="go-build-命令"><a href="#go-build-命令" class="headerlink" title="go build 命令"></a>go build 命令</h3><p><code>go build </code>命令用来启动编译，它可以将Go语言程序与相关依赖编译成一个可执行文件，其语法格式如下。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">go build fileName</span><br></code></pre></td></tr></table></figure>
<p>​        其中 fileName 为所需要的参数，可以是一个或者多个 Go 源文件名（当有多个参数时需要使用空格将两个相邻的参数隔开），也可以省略不写。</p>
<p> 使用 go build 命令进行编译时，不同参数的执行结果也是不同的。</p>
<h4 id="1-当参数不为空时"><a href="#1-当参数不为空时" class="headerlink" title="1) 当参数不为空时"></a>1) 当参数不为空时</h4><p>​        如果 fileName 为同一 main 包下的所有源文件名（可能有一个或者多个），编译器将生成一个与第一个 fileName 同名的可执行文件（如执行<code>go build abc.go def.go ...</code>会生成一个 abc.exe 文件）；如果 fileName 为非 main 包下的源文件名，编译器将只对该包进行语法检查，不生成可执行文件。</p>
<h4 id="2-当参数为空时"><a href="#2-当参数为空时" class="headerlink" title="2) 当参数为空时"></a>2) 当参数为空时</h4><p>​        如果当前目录下存在 main 包，则会生成一个与当前目录名同名的“目录名.exe”可执行文件（如在 hello 目录中执行<code>go build</code>命令时，会生成 hello.exe 文件）；如果不存在 main 包，则只对当前目录下的程序源码进行语法检查，不会生成可执行文件。</p>
<p> 使用<code>go build </code>命令对我们上一节编写的程序进行编译，运行结果如下所示：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">D:<span class="hljs-string">\code&gt;</span> go build .<span class="hljs-string">\demo.go</span><br>D:<span class="hljs-string">\code&gt;</span> .<span class="hljs-string">\demo.exe</span><br>Hello World!<br></code></pre></td></tr></table></figure>
<p>其中<code>D:\code&gt;</code>对应的是当前目录，也就是 D 盘下的 code 文件夹，它是命令行工具自动添加的，不属于编译命令的一部分。</p>
<pre><code>     第 1 行`go build`命令后面的参数中，`.\`表示当前目录。在Windows 系统中，当前目录使用`.\`表示；在类 Unix 系统（例如 Linux、MacOS 等）中，当前目录使用`./`表示。</code></pre>
<p>​        注意，这里的<code>go build </code>命令中<code> .\</code>可以省略不写，不会影响编译。</p>
<p>​        另外，<code>go build </code>命令只有在执行出错的情况下才会有返回信息，执行成功的话是没有返回信息的，但是会在当前目录生成一个与 main 包文件同名的 .exe 可执行文件，如下图所示。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19101G64RA16.gif" alt="img"></p>
<p> 第 2 行中的<code>.\demo.exe</code>表示执行当前目录下的 demo.exe 程序。</p>
<p> 第 3 行则是 demo.exe 程序的运行结果。</p>
<h3 id="go-run-命令"><a href="#go-run-命令" class="headerlink" title="go run 命令"></a>go run 命令</h3><p>​        除了使用<code>go build</code>命令外，Go语言还为我们提供了<code>go run</code>命令，<code>go run</code>命令将编译和执行指令合二为一，会在编译之后立即执行Go语言程序，但是不会生成可执行文件。</p>
<p><code>go run </code>命令的语法格式如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">go <span class="hljs-keyword">run</span><span class="bash"> fileName</span><br></code></pre></td></tr></table></figure>
<p>其中 fileName 为所需要的参数，参数必须是同一 main 包下的所有源文件名，并且不能为空。</p>
<p> 使用<code>go run</code>命令对我们上一节编写的程序进行编译，运行结果如下所示：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">D:\code&gt; <span class="hljs-built_in">go</span> run <span class="hljs-built_in">demo</span>.<span class="hljs-built_in">go</span><br>Hello World!<br></code></pre></td></tr></table></figure>
<p>可以看到第 1 行的<code>go run </code>命令执行后，直接在第 2 行输出了程序的运行结果。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言简介</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="Go语言学习路线"><a href="#Go语言学习路线" class="headerlink" title="Go语言学习路线"></a>Go语言学习路线</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/golang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="golang学习路线"></p>
<p>​        Go语言（或 Golang）起源于 2007 年，并在 2009 年正式对外发布。Go 是非常年轻的一门语言，它的主要目标是“兼具 <a href="http://c.biancheng.net/python/">Python</a> 等动态语言的开发速度和 C/<a href="http://c.biancheng.net/cplus/">C++</a> 等编译型语言的性能与安全性”。</p>
<pre><code>     Go语言是编程语言设计的又一次尝试，是对类C语言的重大改进，它不但能让你访问底层操作系统，还提供了强大的网络编程和并发编程支持。Go语言的用途众多，可以进行网络编程、系统编程、并发编程、分布式编程。

     Go语言的推出，旨在不损失应用程序性能的情况下降低代码的复杂性，具有“部署简单、并发性好、语言设计良好、执行性能好”等优势，目前国内诸多 IT 公司均已采用Go语言开发项目。</code></pre>
<p>​         Go语言有时候被描述为“C 类似语言”，或者是“21 世纪的C语言”。Go 从C语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言一直所看中的编译后机器码的运行效率以及和现有操作系统的无缝适配。</p>
<pre><code>     因为Go语言没有类和继承的概念，所以它和 [Java](http://c.biancheng.net/java/) 或 C++ 看起来并不相同。但是它通过接口（interface）的概念来实现多态性。Go语言有一个清晰易懂的轻量级类型系统，在类型之间也没有层级之说。因此可以说Go语言是一门混合型的语言。</code></pre>
<p>​         此外，很多重要的开源项目都是使用Go语言开发的，其中包括 <a href="http://c.biancheng.net/docker/">Docker</a>、Go-Ethereum、Thrraform 和 Kubernetes。</p>
<h2 id="Go语言创始人"><a href="#Go语言创始人" class="headerlink" title="Go语言创始人"></a>Go语言创始人</h2><p>​        对语言进行评估时，明白设计者的动机以及语言要解决的问题很重要。Go语言出自 Ken Thompson 和 Rob Pike、Robert Griesemer 之手，他们都是计算机科学领域的重量级人物。</p>
<h4 id="1-Ken-Thompson"><a href="#1-Ken-Thompson" class="headerlink" title="1) Ken Thompson"></a>1) Ken Thompson</h4><p>​        贝尔实验室 Unix 团队成员，C语言、Unix 和 Plan 9 的创始人之一，在 20 世纪 70 年代，设计并实现了最初的 UNIX  操作系统，仅从这一点说，他对计算机科学的贡献怎么强调都不过分。他还与 Rob Pike 合作设计了 UTF-8 编码方案。</p>
<h4 id="2-Rob-Pike"><a href="#2-Rob-Pike" class="headerlink" title="2) Rob Pike"></a>2) Rob Pike</h4><p>​        Go语言项目总负责人，贝尔实验室 Unix 团队成员，除帮助设计 UTF-8 外，还帮助开发了分布式多用户操作系统 Plan 9、Inferno 操作系统和 Limbo 编程语言，并与人合著了《The Unix Programming Environment》，对 UNIX  的设计理念做了正统的阐述。</p>
<h4 id="3-Robert-Griesemer"><a href="#3-Robert-Griesemer" class="headerlink" title="3) Robert Griesemer"></a>3) Robert Griesemer</h4><p>​        就职于 Google，参与开发 Java HotSpot 虚拟机，对语言设计有深入的认识，并负责 Chrome 浏览器和 Node.js 使用的 Google V8 <a href="http://c.biancheng.net/js/">JavaScript</a> 引擎的代码生成部分。</p>
<pre><code>     这些计算机科学领城的重量级人物设计Go语言的初衷是满足 Google  的需求。设计此语言花费了两年的时间，融入了整个团队多年的经验及对编程语言设计的深入认识。设计团队借鉴了 Pascal、Oberon  和C语言的设计智慧，同时让Go语言具备动态语言的便利性。因此，Go语言体现了经验丰富的计算机科学家的语言设计理念，是为全球最大的互联网公司之一设计的。</code></pre>
<p>​         Go语言的所有设计者都说，设计Go语言是因为 C++ 给他们带来了挫败感。在 Google I/O 2012 的 Go 设计小组见面会上，Rob Pike 是这样说的：</p>
<blockquote>
<p>我们做了大量的 C++ 开发，厌烦了等待编译完成，尽管这是玩笑，但在很大程度上来说也是事实。</p>
</blockquote>
<h2 id="Go-是编译型语言"><a href="#Go-是编译型语言" class="headerlink" title="Go 是编译型语言"></a>Go 是编译型语言</h2><p>​        Go 使用编译器来编译代码。编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行 Go 程序，程序员必须执行如下步骤。</p>
<ol>
<li>使用文本编辑器创建 Go 程序；</li>
<li>保存文件；</li>
<li>编译程序；</li>
<li>运行编译得到的可执行文件。</li>
</ol>
<p> 这不同于 Python、Ruby 和 JavaScript 等语言，它们不包含编译步骤。Go 自带了编译器，因此无须单独安装编译器。</p>
<h2 id="为什么要学习Go语言"><a href="#为什么要学习Go语言" class="headerlink" title="为什么要学习Go语言"></a>为什么要学习Go语言</h2><p>​        如果你要创建系统程序，或者基于网络的程序，Go语言是很不错的选择。作为一种相对较新的语言，它是由经验丰富且受人尊敬的计算机科学家设计的，旨在应对创建大型并发网络程序面临的挑战。</p>
<pre><code>     在Go语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。</code></pre>
<p>​         Go语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发可以在 Windows 上运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8  编码。Go语言做到了真正的国际化！</p>
<h2 id="Go语言吉祥物"><a href="#Go语言吉祥物" class="headerlink" title="Go语言吉祥物"></a>Go语言吉祥物</h2><p>​        Go语言有一个吉祥物，在会议、文档页面和博文中，大多会包含下图所示的 Go Gopher，这是才华横溢的插画家 Renee French 设计的，她也是 Go 设计者之一 Rob Pike 的妻子。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1-1PPQA9545W.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言进制转换</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h2><p>规则：从最低位开始(最右边)，将每个位上的数提出来，乘以2的(位数-1)次方，然后求和</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#将1011转换成十进制</span><br><span class="hljs-attribute">1011</span>=<span class="hljs-number">1</span>*<span class="hljs-number">1</span>+<span class="hljs-number">1</span>*<span class="hljs-number">2</span>+<span class="hljs-number">0</span>+<span class="hljs-number">1</span>*<span class="hljs-number">2</span>*<span class="hljs-number">2</span>*<span class="hljs-number">2</span>=<span class="hljs-number">11</span><br></code></pre></td></tr></table></figure>
<h2 id="八进制转十进制"><a href="#八进制转十进制" class="headerlink" title="八进制转十进制"></a>八进制转十进制</h2><p>规则：从最低位开始(最右边)，将每个位上的数提出来，乘以8的(位数-1)次方，然后求和</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#将0123转成十进制</span><br><span class="hljs-attribute">0123</span>=<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*<span class="hljs-number">8</span>+<span class="hljs-number">1</span>*<span class="hljs-number">8</span>*<span class="hljs-number">8</span>=<span class="hljs-number">83</span><br></code></pre></td></tr></table></figure>
<h2 id="十六进制转换成十进制"><a href="#十六进制转换成十进制" class="headerlink" title="十六进制转换成十进制"></a>十六进制转换成十进制</h2><p>规则：从最低位开始(最右边)，将每个位上的数提出来，乘以16的(位数-1)次方，然后求和</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#将0X34A转换成十进制</span><br><span class="hljs-attribute">0X34A</span>=<span class="hljs-number">10</span>+<span class="hljs-number">4</span>*<span class="hljs-number">16</span>+<span class="hljs-number">3</span>*<span class="hljs-number">16</span>*<span class="hljs-number">16</span>=<span class="hljs-number">842</span><br></code></pre></td></tr></table></figure>
<h2 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h2><p>规则：将该数不断除以2，直到等于0为止，然后将每步得到的余数倒过来，就是对应的二进制</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#56转换成二进制</span><br><span class="hljs-attr">56</span>=<span class="hljs-number">111000</span><br></code></pre></td></tr></table></figure>
<h2 id="十进制转八进制"><a href="#十进制转八进制" class="headerlink" title="十进制转八进制"></a>十进制转八进制</h2><p>规则：将该数不断除以8，直到等于0为止，然后将每步得到的余数倒过来，就是对应的八进制</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#将156转换成八进制</span><br><span class="hljs-attr">156</span>=<span class="hljs-number">0234</span><br></code></pre></td></tr></table></figure>
<h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><p>规则：将该数不断除以16，直到等于0为止，然后将每步得到的余数倒过来，就是对应的十六进制</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#将356转换成十六进制</span><br><span class="hljs-attribute">356</span>=<span class="hljs-number">0</span>X<span class="hljs-number">164</span><br></code></pre></td></tr></table></figure>
<h2 id="二进制转八进制"><a href="#二进制转八进制" class="headerlink" title="二进制转八进制"></a>二进制转八进制</h2><p>规则：将二进制数每三位一组(最右边开始)，转换成对应的八进制即可</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#将11010101转换成八进制</span><br><span class="hljs-attr">11010101</span>=<span class="hljs-number">0325</span><br></code></pre></td></tr></table></figure>
<h2 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h2><p>规则：将二进制数每四位一组(最右边开始)，转换成对应的十六进制即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#将11010101转换成十六进制</span><br><span class="hljs-attribute">11010101</span>=<span class="hljs-number">0</span>XD<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>
<h2 id="八进制转二进制"><a href="#八进制转二进制" class="headerlink" title="八进制转二进制"></a>八进制转二进制</h2><p>规则：将八进制数每一位，转成对应的一个三位的二进制即可</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#将0237转换成二进制</span><br><span class="hljs-attr">0237</span>=<span class="hljs-number">10011111</span><br></code></pre></td></tr></table></figure>
<h2 id="十六进制转二进制"><a href="#十六进制转二进制" class="headerlink" title="十六进制转二进制"></a>十六进制转二进制</h2><p>规则：将十六进制数每一位，转成对应的一个四位的二进制即可</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#将0237转换成二进制</span><br><span class="hljs-attr">0237</span>=<span class="hljs-number">1000110111</span><br></code></pre></td></tr></table></figure>
<h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p>1、二进制的最高位是符号位：0表示正数，1表示负数</p>
<p>2、正数的原码、反码、补码都是一样</p>
<p>3、负数的反码为原码符号位不变，其他位取反(0==&gt;1;1==&gt;0)</p>
<p>4、负数的补码为负数的反码+1</p>
<p>5、0的反码和补码都是0</p>
<p>6、在计算机运算的时候，都是以补码的方式来运算的</p>
<h2 id="位运算和移位运算符"><a href="#位运算和移位运算符" class="headerlink" title="位运算和移位运算符"></a>位运算和移位运算符</h2><p>按位与&amp; ： 两位全为１，结果为 1 ，否则为 0</p>
<p>按位或| : 两位有一个为 1 ，结果为 1 ，否则为 0</p>
<p>按位异或 ^ : 两位一个为 0, 一个为 1 ，结果为 1 ，否则为 0</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200811145555396.png" alt="image-20200811145555396"></p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><code class="hljs bnf">&gt;&gt;、<span class="hljs-attribute">&lt;&lt; 右移和左移,运算规则:</span><br><span class="hljs-attribute">右移运算符 &gt;</span>&gt;: 低位溢出, 符号位不变, 并用符号位补溢出的高位<br>左移运算符 <span class="hljs-attribute">&lt;&lt;: 符号位不变, 低位补 0</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言集成开发环境（IDE）大汇总</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88IDE%EF%BC%89%E5%A4%A7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>如何挑选合适的编辑器或集成开发环境呢？下面列举了一些Go语言集成开发环境或编辑器应该具备的特性：</p>
<ul>
<li>语法高亮是必不可少的功能，这也是为什么每个开发工具都提供配置文件来实现自定义配置的原因。</li>
<li>拥有较好的项目文件纵览和导航能力，可以同时编辑多个源文件并设置书签，能够匹配括号，能够跳转到某个函数或类型的定义部分。</li>
<li>完美的查找和替换功能，替换之前最好还能预览结果。</li>
<li>当有编译错误时，双击错误提示可以跳转到发生错误的位置。</li>
<li>跨平台，能够在 Linux、Mac OS X 和 Windows 下工作，这样就可以专注于一个开发环境。</li>
<li>能够通过插件架构来轻易扩展和替换某个功能。</li>
<li>拥有断点、检查变量值、单步执行、逐过程执行标识库中代码的能力。</li>
<li>能够方便的存取最近使用过的文件或项目。</li>
<li>拥有对包、类型、变量、函数和方法的智能代码补全的功能。</li>
<li>能够方便地在不同的 Go 环境之间切换。</li>
<li>针对一些特定的项目有项目模板，如：Web 应用，App Engine 项目，从而能够更快地开始开发工作。</li>
</ul>
<p> 下面为大家推荐几款常用的适用于Go语言的编辑器或集成开发环境。</p>
<h4 id="1-Goland"><a href="#1-Goland" class="headerlink" title="1) Goland"></a>1) Goland</h4><p>Goland 是由 JetBrains 公司开发的一个新的商业 IDE，旨在为 Go 开发者提供的一个符合人体工程学的新的商业  IDE。Goland 整合了 IntelliJ 平台（一个用于 java  语言开发的集成环境，也可用于其他开发语言），提供了针对Go语言的编码辅助和工具集成。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19110G24221554.gif" alt="Goland"></p>
<p> 关于 Goland 的详细使用说明请参考《<a href="http://c.biancheng.net/view/6124.html">Goland 2019下载和安装</a>》一节。</p>
<h4 id="2-LiteIDE"><a href="#2-LiteIDE" class="headerlink" title="2) LiteIDE"></a>2) LiteIDE</h4><p>LiteIDE是一款专门针对 Go 开发的集成开发环境，在编辑、编译和运行 Go 程序和项目方面都有非常好的支持。同时还包括了对源代码的抽象语法树视图和一些内置工具（此开发环境由国人 vfc 大叔开发）。</p>
<p> LiteIDE 是一款非常好用的轻量级 Go 集成开发环境（基于 QT、Kate 和  SciTE），包含了跨平台开发及其它必要的特性，对代码编写、自动补全和运行调试都有极佳的支持。它采用了 Go  项目的概念来对项目文件进行浏览和管理，它还支持在各个 Go 开发环境之间随意切换以及交叉编译的功能。</p>
<p> 同时，它具备了抽象语法树视图的功能，可以清楚地纵览项目中的常量、变量、函数、不同类型以及他们的属性和方法。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-1Z6051J24a61.gif" alt="LiteIDE界面"></p>
<p> 关于 LiteIDE 的安装和使用大家可以参考《<a href="http://c.biancheng.net/view/6241.html">LiteIDE搭建Go语言开发环境</a>》一节。</p>
<h4 id="3-Sublime-Text"><a href="#3-Sublime-Text" class="headerlink" title="3) Sublime Text"></a>3) Sublime Text</h4><p>一个革命性的跨平台（Linux、Mac OS X、Windows）文本编辑器，它支持编写非常多的编程语言代码。对于 Go 而言，它有一个插件叫做 GoSublime 来支持代码补全和代码模版。</p>
<h4 id="4-GoClipse"><a href="#4-GoClipse" class="headerlink" title="4) GoClipse"></a>4) GoClipse</h4><p>是一款 Eclipse IDE 的插件，拥有非常多的特性以及通过 GoCode 来实现代码补全功能。其依附于著名的 Eclipse  这个大型开发环境，虽然需要安装 JVM 运行环境，但却可以很容易地享有 Eclipse  本身所具有的诸多功能。这是一个非常好的编辑器，完善的代码补全、抽象语法树视图、项目管理和程序调试功能。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-1Z6051J320429.gif" alt="GoClipse界面"></p>
<p> 如果你对集成开发环境都不是很熟悉，那就使用 LiteIDE 吧，另外使用 GoClipse 或者 IntelliJ Idea Plugin 也是不错的选择。</p>
<p> 代码补全一般都是通过内置 GoCode 实现的（如：LiteIDE、GoClipse），如果需要手动安装 GoCode，在命令行输入指令 <code>go get -u github.com/nsf/gocode</code> 即可（务必事先配置好 Go 环境变量） 。</p>
<h4 id="5-Visual-Studio-Code（简称VS-Code）"><a href="#5-Visual-Studio-Code（简称VS-Code）" class="headerlink" title="5) Visual Studio Code（简称VS Code）"></a>5) Visual Studio Code（简称VS Code）</h4><p>是一款由微软公司开发的，能运行在 Mac OS X、Windows 和 Linux 上的跨平台开源代码编辑器。</p>
<p> VS Code 使用 JSON 格式的配置文件进行所有功能和特性的配置，同时它还可以通过扩展程序为编辑器实现编程语言高亮、参数提示、编译、调试、文档生成等各种功能。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言适合干什么</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E9%80%82%E5%90%88%E5%B9%B2%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h2 id="一、我们为什么选择Go语言"><a href="#一、我们为什么选择Go语言" class="headerlink" title="一、我们为什么选择Go语言"></a><strong>一、我们为什么选择Go语言</strong></h2><p>​        选择Go语言的原因可能会有很多，关于Go语言的特性、优势等，我们在之前的文档中也已经介绍了很多了。但是最主要的原因，应该是基于以下两方面的考虑：</p>
<p>1、执行性能<br>         毕竟是类C的执行速度，对于一些服务来说，性能是极其重要的一环，事关系统的吞吐、访问的延迟，进而会影响用户的体验，Go语言通过协程可以方便的实现并行处理，达到处理效率的最大化 ，提升系统的吞吐能力。</p>
<p>2、开发效率<br>         GO语言使用起来简单、代码描述效率高、编码规范统一、上手快。 通过少量的代码，即可实现框架的标准化，能快速的构建各种通用组件和公共类库，进一步提升开发效率，实现特定场景下的功能量产。</p>
<h2 id="二、Go语言能做什么"><a href="#二、Go语言能做什么" class="headerlink" title="二、Go语言能做什么"></a><strong>二、Go语言能做什么</strong></h2><p>​        Go 语言从发布 1.0 版本以来备受众多开发者关注并得到广泛使用，Go 语言的简单、高效、并发特性吸引了众多传统语言开发者的加入，而且人数越来越多。</p>
<p>​        鉴于Go语言的特点和设计的初衷，Go语言作为服务器编程语言，很适合处理日志、数据打包、虚拟机处理、文件系统、分布式系统、数据库代理等；网络编程方面，Go语言广泛应用于Web 应用、API应用、下载应用等；除此之外，Go语言还适用于内存数据库和云平台领域，目前国外很多云平台都是采用Go开发。</p>
<p>1、服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。</p>
<p>2、分布式系统、数据库代理器、中间件等，例如Etcd。</p>
<p>3、网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用，而且Go内置的net/http包基本上把我们平常用到的网络功能都实现了。</p>
<p>4、数据库操作</p>
<p>5、开发云平台，目前国外很多云平台在采用Go开发</p>
<h2 id="三、国内外有哪些企业或项目使用Go语言"><a href="#三、国内外有哪些企业或项目使用Go语言" class="headerlink" title="三、国内外有哪些企业或项目使用Go语言"></a><strong>三、国内外有哪些企业或项目使用Go语言</strong></h2><p>​        Go发布之后，很多公司特别是云计算公司开始用Go重构他们的基础架构，很多都是直接采用Go进行了开发，最近热火朝天的Docker就是采用Go开发的。</p>
<p>​        使用 Go 语言开发的开源项目非常多。早期的 Go 语言开源项目只是通过 Go 语言与传统项目进行C语言库绑定实现，例如  Qt、Sqlite 等；后期的很多项目都使用 Go 语言进行重新原生实现，这个过程相对于其他语言要简单一些，这也促成了大量使用 Go  语言原生开发项目的出现。</p>
<p>1、云计算基础设施领域<br> 代表项目：docker、kubernetes、etcd、<a href="https://link.zhihu.com/?target=http://tonybai.com/2015/07/06/implement-distributed-services-registery-and-discovery-by-consul/">consul</a>、cloudflare CDN、七牛云存储等。</p>
<p>2、基础软件<br> 代表项目：<a href="https://link.zhihu.com/?target=https://github.com/pingcap/tidb">tidb</a>、<a href="https://link.zhihu.com/?target=https://github.com/influxdata/influxdb">influxdb</a>、<a href="https://link.zhihu.com/?target=https://github.com/cockroachdb/cockroach">cockroachdb</a>等。</p>
<p>3、微服务<br> 代表项目：<a href="https://link.zhihu.com/?target=https://github.com/go-kit/kit">go-kit</a>、<a href="https://link.zhihu.com/?target=https://github.com/micro/micro">micro</a>、monzo bank的<a href="https://link.zhihu.com/?target=https://github.com/monzo">typhon</a>、<a href="https://link.zhihu.com/?target=https://www.bilibili.com/">bilibili</a>等。</p>
<p>4、互联网基础设施<br> 代表项目：<a href="https://link.zhihu.com/?target=https://github.com/ethereum/go-ethereum">以太坊</a>、<a href="https://link.zhihu.com/?target=https://github.com/hyperledger">hyperledger</a>等。</p>
<p>​        采用Go的一些国外公司，如<strong>Google、Docker、Apple、Cloud Foundry、CloudFlare、Couchbase、CoreOS、Dropbox、MongoDB、AWS等</strong>公司；<br> 采用Go开发的国内企业：如<strong>阿里云CDN、百度、小米、七牛、PingCAP、华为、金山软件、猎豹移动、饿了么等</strong>公司。</p>
<p>​        还有很多，比如<strong>阿里中间件、聚美优品、高升控股、探探、斗鱼直播、人人车、亚信、Udesk、方付通、招财猫、三一集团、美餐网等</strong>。一般的选择，都是选择用于自己公司合适的产品系统来做，比如消息推送的、监控的、容器的等，Golang特别适合做网络并发的服务，这是他的强项，所以也是被优先用于这些项目。Go语言作为一门大型项目开发语言，在很多大公司相继使用，甚至完全转向Go开发。</p>
<h2 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a><strong>四、写在最后</strong></h2><p>​        当然，一个技术能不能发展起来，关键还要看三点。</p>
<p><strong>有没有一个比较好的社区。</strong></p>
<p>​        像 C、C++、Java、Python 和 JavaScript 的生态圈都是非常丰富和火爆的。尤其是有很多商业机构参与的社区那就更为人气爆棚了，比如 Linux 的社区。</p>
<p><strong>有没有一个工业化的标准。</strong></p>
<p>​        像 C、C++、Java 都是有标准化组织的。尤其是 Java，其在架构上还搞出了像 J2EE 这样的企业级标准。</p>
<p><strong>有没有一个或多个杀手级应用。</strong></p>
<p>​        C、C++ 和 Java 的杀手级应用不用多说了，就算是对于 PHP 这样还不能算是一个好的编程语言来说，因为是 Linux 时代的第一个杀手级解决方案 LAMP 中的关键技术，所以，也发展起来了。</p>
<p>​        上述的这三点是非常关键的，新的技术只需要占到其中一到两点就已经很不错了，何况有的技术，比如 Java，是三点全占到了，所以，Java 的发展是如此好。当然，除了上面这三点重要的，还有一些其它的影响因素，比如：</p>
<p><strong>学习曲线是否低，上手是否快。</strong></p>
<p>这点非常重要，C++ 在这点上越做越不好了。</p>
<p><strong>有没有一个不错的提高开发效率的开发框架。</strong></p>
<p>如：Java 的 Spring 框架，C++ 的 STL 等。</p>
<p><strong>是否有一个或多个巨型的技术公司作为后盾。</strong></p>
<p>如：Java 和 Linux 后面的 IBM、Sun……</p>
<p><strong>有没有解决软件开发中的痛点。</strong></p>
<p>如：Java 解决了 C 和 C++ 的内存管理问题。</p>
<p>用这些标尺来量一下 Go 语言，我们可以清楚地看到：</p>
<ul>
<li>Go 语言容易上手；</li>
<li>Go 语言解决了并发编程和写底层应用开发效率的痛点；</li>
<li>Go 语言有 Google 这个世界一流的技术公司在后面；</li>
<li>Go 语言的杀手级应用是 Docker，而 Docker 的生态圈在这几年完全爆棚了。</li>
</ul>
<p>所以，Go 语言的未来是不可限量的。当然，我个人觉得，Go 可能会吞食很多 C、C++、Java 的项目。不过，Go 语言所吞食主要的项目应该是中间层的项目，既不是非常底层也不会是业务层。</p>
<p>​        也就是说，Go 语言不会吞食底层到 C 和 C++ 那个级别的，也不会吞食到高层如 Java 业务层的项目。Go 语言能吞食的一定是  PaaS  上的项目，比如一些消息缓存中间件、服务发现、服务代理、控制系统、Agent、日志收集等等，没有复杂的业务场景，也到不了特别底层（如操作系统）的中间平台层的软件项目或工具。而 C 和 C++ 会被打到更底层，Java 会被打到更上层的业务层。</p>
<p>好了，我们再用上面的标尺来量一下 Go 语言的杀手级应用 Docker，你会发现基本是一样的。</p>
<ul>
<li><p>Docker 上手很容易。</p>
</li>
<li><p>Docker 解决了运维中的环境问题以及服务调度的痛点。</p>
</li>
<li><p>Docker 的生态圈中有大公司在后面助力。比如 Google。</p>
</li>
<li><p>Docker 产出了工业界标准 OCI。</p>
</li>
<li><p>Docker 的社区和生态圈已经出现像 Java 和 Linux 那样的态势。</p>
</li>
<li><p>……</p>
<p>​    所以，虽然几年前的 Docker ，当时的坑儿还很多，但是，相对于这些大的因素来说，那些小坑儿都不是问题。只是需要一些时间，这些小坑儿在未来 5-10 年就可以完全被填平了。</p>
</li>
</ul>
<p>​        同样，我们可以看到 Kubernetes 作为服务和容器调度的关键技术一定会是最后的赢家。</p>
<p>​        最后，我还要说一下，为什么要早一点地进入这些新技术，而不是等待这些技术成熟了后再进入。原因有这么几个。</p>
<p>​        技术的发展过程非常重要。因为你可以清楚地看到了这种新技术的生态圈发展过程。让我们收获最大的并不是这些技术本身，而是一个技术的变迁和行业的发展。</p>
<p>​        从中，我们看到了非常具体的各种思潮和思路，这些东西比起 技术本身来说更有价值。因为，这不但让我们重新思考已经掌握的技术以及如何更好地解决已有的问题，而且还让我看到了未来。不但有了技术优势，而且这些知识还让我们的技术生涯多了很多的可能性。</p>
<p>​        这些关键新技术，可以让你拿到技术的先机。这些对一个需要技术领导力的个人或公司来说都是非常重要的。</p>
<p>​        一个公司或是个人能够占有技术先机，就会比其它公司或个人有更大的影响力。一旦未来行业需求引爆，那么这个公司或是个人的影响力就会形成一个比较大的护城河，并可以快速地产生经济利益。</p>
<p>​        Go的应用范围一直在扩大，云计算，微服务，区块链，哪里都有用Go写的重量级项目。docker/kubernetes生态圈，几百/千万行代码，基本统治了云原生应用市场。去年大热的区块链，以太坊的geth，比特币的btcd，闪电网络的lnd，都是Go语言开发。还是那句话，多看看各种语言的生态，或许都并没有你想象的那么不堪。。。Go语言设计上确实不够“先进”，但也是另一种“务实”。其实go不管在国内还是国外已经很受待见了，国外google用的很多，uber也在用，国内有著名的今日头条，每日千亿级的访问妥妥的。多少语言终其一生都没有这么大的应用场景。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo自定义域名</title>
    <url>/2020/12/30/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h2 id="阿里云购买域名"><a href="#阿里云购买域名" class="headerlink" title="阿里云购买域名"></a>阿里云购买域名</h2><p>购买地址: <a href="https://wanwang.aliyun.com/domain/searchresult/#/?keyword=&amp;suffix=com">https://wanwang.aliyun.com/domain/searchresult/#/?keyword=&amp;suffix=com</a></p>
<h3 id="通过CNAME解析"><a href="#通过CNAME解析" class="headerlink" title="通过CNAME解析"></a>通过CNAME解析</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230094445258.png" alt="image-20201230094445258"></p>
<p>登录github仓库，在根目录下创建CNAME文件</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230094345833.png" alt="image-20201230094345833"></p>
<h2 id="Github配置HTTPS"><a href="#Github配置HTTPS" class="headerlink" title="Github配置HTTPS"></a>Github配置HTTPS</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230091906008.png" alt="image-20201230091906008"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230094113159.png" alt="image-20201230094113159"></p>
<h3 id="登录域名界面"><a href="#登录域名界面" class="headerlink" title="登录域名界面"></a>登录域名界面</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230095210959.png" alt="image-20201230095210959"></p>
<p>修改网站标题blog/_config.yml</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站的关键词。支援多个关键词。</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230111015211.png" alt="image-20201230111015211"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo集成Valine评论系统</title>
    <url>/2020/12/30/Hexo%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h2><p>评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号</p>
<p>官网：<a href="https://leancloud.cn/">https://leancloud.cn/</a></p>
<p>认证完成后创建应用</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230150742969.png" alt="image-20201230150742969"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230150811967.png" alt="image-20201230150811967"></p>
<p>点击设置获取appid 和 appkey</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201230150940084.png" alt="image-20201230150940084"></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>打开主题配置文件 搜索 valine，填入appid 和 appkey</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span>  <span class="hljs-comment"># 从 LeanCloud 的应用中得到的 appId</span><br>  <span class="hljs-attr">appkey:</span>  <span class="hljs-comment"># 从 LeanCloud 的应用中得到的 APP Key</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">吐槽</span> <span class="hljs-comment"># 评论框占位提示符</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span> <span class="hljs-comment"># 当前文章页路径，用于区分不同的文章页，以保证正确读取该文章页下的评论列表</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span> <span class="hljs-comment"># Gravatar 头像展示方式</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]  <span class="hljs-comment"># 评论者相关属性</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 评论列表分页，每页条数</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment"># zh-CN | zh-TW | en | ja</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否记录评论者IP</span><br>  <span class="hljs-attr">serverURLs:</span>  <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br></code></pre></td></tr></table></figure>
<p>并修改评论插件为valine</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 评论</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启评论</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span>  <span class="hljs-comment"># 指定使用的评论模块</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言运算符和标识符简述</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%A0%87%E8%AF%86%E7%AC%A6%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="运算符的基本介绍"><a href="#运算符的基本介绍" class="headerlink" title="运算符的基本介绍"></a>运算符的基本介绍</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</p>
<ol>
<li><p>算术运算符</p>
</li>
<li><p>赋值运算符</p>
</li>
<li><p>比较运算符/关系运算符</p>
</li>
<li><p>逻辑运算符</p>
</li>
<li><p>位运算符</p>
</li>
<li><p>其它运算符</p>
</li>
</ol>
<h2 id="算术运算符的一览表"><a href="#算术运算符的一览表" class="headerlink" title="算术运算符的一览表"></a>算术运算符的一览表</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200804154531182.png" alt="image-20200804154531182"></p>
<h3 id="的使用"><a href="#的使用" class="headerlink" title="% 的使用"></a>% 的使用</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><code class="hljs erlang-repl">公式 a <span class="hljs-comment">% b = a - a / b * b</span><br></code></pre></td></tr></table></figure>
<h2 id="算术运算符使用的注意事项"><a href="#算术运算符使用的注意事项" class="headerlink" title="算术运算符使用的注意事项"></a>算术运算符使用的注意事项</h2><ol>
<li><p>对于除号 “/“，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃<br>小数部分。</p>
</li>
<li><p>当对一个数取模时，可以等价 a%b=a-a/b*b ， 这样我们可以看到 取模的一个本质运算。</p>
</li>
<li><p>Golang 的自增自减只能当做一个独立语言使用时，不能这样使用</p>
</li>
<li><p>Golang 的++ 和 – 只能写在变量的后面，不能写在变量的前面，即：只有 a++ a– 没有 ++a</p>
</li>
</ol>
<p>–a</p>
<ol start="5">
<li>Golang 的设计者去掉 c / java 中的 自增自减的容易混淆的写法，让 Golang 更加简洁，统一。(强<br>制性的)</li>
</ol>
<h2 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h2><ol>
<li><p>关系运算符的结果都是 bool 型，也就是要么是 true，要么是 false</p>
</li>
<li><p>关系表达式 经常用在 if  结构的条件中或 循环结构的条件中</p>
</li>
</ol>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200804161758655.png" alt="image-20200804161758655"></p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>用于连接多个条件（一般来讲就是关系表达式），最终的结果也是一个 bool 值</p>
<p>假定A值为true，B值为false</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑与运算符。如果两边的操作数都是true，则为true，否则为false</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或运算符，如果两边的操作数有一个true，则为true，否则为false</td>
</tr>
<tr>
<td>！</td>
<td>逻辑非运算符，如果条件为true，则逻辑为false，否则为true</td>
</tr>
</tbody></table>
<h3 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol>
<li><p>&amp;&amp;也叫 短路与：如果第一个条件为 false，则 第二个条件不会判断，最终结果为 false</p>
</li>
<li><p>||也叫 短路或：如果 第一个条件为 true，则 第二个条件不会判断，最终结果为 true</p>
</li>
</ol>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符就是将某个运算后的值，赋给指定的变量</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单的赋值运算符，讲一个表达式的值赋给一个左值</td>
<td>c=a+b将a+b表达式结果赋值给c</td>
</tr>
<tr>
<td>+=</td>
<td>相加后再赋值</td>
<td>c+=a等于c=c+a</td>
</tr>
<tr>
<td>-=</td>
<td>相减后再赋值</td>
<td>c-=a等于c=c-a</td>
</tr>
<tr>
<td>*=</td>
<td>相乘后再赋值</td>
<td>c*=a等于c=c * a</td>
</tr>
<tr>
<td>/=</td>
<td>相除后再赋值</td>
<td>c/=a等于c=c/a</td>
</tr>
<tr>
<td>%=</td>
<td>求余后再赋值</td>
<td>c%=a等于c=c%a</td>
</tr>
</tbody></table>
<h3 id="赋值运算符的特点"><a href="#赋值运算符的特点" class="headerlink" title="赋值运算符的特点"></a>赋值运算符的特点</h3><ol>
<li><p>运算顺序从右往左</p>
</li>
<li><p>赋值运算符的左边 只能是 变量,右边 可以是 变量、表达式、常量值</p>
</li>
<li><p>复合赋值运算符等价于下面的效果</p>
</li>
</ol>
<p>特别说明</p>
<p>go语言明确不支持三元运算符，可以使用if…else实现</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">b</span> &#123;<br>	c = a<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>	c = b<br>&#125;<br></code></pre></td></tr></table></figure>
<p>​        先计算乘法后计算加法，说明乘法运算符的优先级比加法运算符的优先级高。所谓优先级，就是当多个运算符出现在同一个表达式中时，先执行哪个运算符。</p>
<p> Go语言有几十种运算符，被分成十几个级别，有的运算符优先级不同，有的运算符优先级相同，请看下表</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>分类</th>
<th>运算符</th>
<th>结合性</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>逗号运算符</td>
<td>,</td>
<td>从左到右</td>
</tr>
<tr>
<td>2</td>
<td>赋值运算符</td>
<td>=、+=、-=、*=、/=、 %=、 &gt;=、 &lt;&lt;=、&amp;=、^=、|=</td>
<td>从右到左</td>
</tr>
<tr>
<td>3</td>
<td>逻辑或</td>
<td>||</td>
<td>从左到右</td>
</tr>
<tr>
<td>4</td>
<td>逻辑与</td>
<td>&amp;&amp;</td>
<td>从左到右</td>
</tr>
<tr>
<td>5</td>
<td>按位或</td>
<td>|</td>
<td>从左到右</td>
</tr>
<tr>
<td>6</td>
<td>按位异或</td>
<td>^</td>
<td>从左到右</td>
</tr>
<tr>
<td>7</td>
<td>按位与</td>
<td>&amp;</td>
<td>从左到右</td>
</tr>
<tr>
<td>8</td>
<td>相等/不等</td>
<td>==、!=</td>
<td>从左到右</td>
</tr>
<tr>
<td>9</td>
<td>关系运算符</td>
<td>&lt;、&lt;=、&gt;、&gt;=</td>
<td>从左到右</td>
</tr>
<tr>
<td>10</td>
<td>位移运算符</td>
<td>&lt;&lt;、&gt;&gt;</td>
<td>从左到右</td>
</tr>
<tr>
<td>11</td>
<td>加法/减法</td>
<td>+、-</td>
<td>从左到右</td>
</tr>
<tr>
<td>12</td>
<td>乘法/除法/取余</td>
<td>*（乘号）、/、%</td>
<td>从左到右</td>
</tr>
<tr>
<td>13</td>
<td>单目运算符</td>
<td>!、*（指针）、&amp; 、++、–、+（正号）、-（负号）</td>
<td>从右到左</td>
</tr>
<tr>
<td>14</td>
<td>后缀运算符</td>
<td>( )、[ ]、-&gt;</td>
<td>从左到右</td>
</tr>
</tbody></table>
<p> 注意：优先级值越大，表示优先级越高。Go语言中大部分运算符的优先级和数学中是一样的</p>
<p>括号的优先级是最高的，括号中的表达式会优先执行，这样各个运算符的执行顺序就一目了然了。</p>
<hr>
<p>​        Go语言的词法元素包括 5 种，分别是标识符（identifier）、关键字（keyword）、操作符（operator）、分隔符（delimiter）、字面量（literal），它们是组成Go语言代码和程序的最基本单位。</p>
<p> 本节我们主要来介绍一下Go语言中的关键字和标识符。</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>关键字即是被Go语言赋予了特殊含义的单词，也可以称为保留字。</p>
<p> Go语言中的关键字一共有 25 个：</p>
<table>
<thead>
<tr>
<th>break</th>
<th>default</th>
<th>func</th>
<th>interface</th>
<th>select</th>
</tr>
</thead>
<tbody><tr>
<td>case</td>
<td>defer</td>
<td>go</td>
<td>map</td>
<td>struct</td>
</tr>
<tr>
<td>chan</td>
<td>else</td>
<td>goto</td>
<td>package</td>
<td>switch</td>
</tr>
<tr>
<td>const</td>
<td>fallthrough</td>
<td>if</td>
<td>range</td>
<td>type</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>import</td>
<td>return</td>
<td>var</td>
</tr>
</tbody></table>
<p>​        之所以刻意地将Go语言中的关键字保持的这么少，是为了简化在编译过程中的代码解析。和其它语言一样，关键字不能够作标识符使用。</p>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>​        标识符是指Go语言对各种变量、方法、函数等命名时使用的字符序列，标识符由若干个字母、下划线<code>_</code>、和数字组成，且第一个字符必须是字母。通俗的讲就是凡可以自己定义的名称都可以叫做标识符。</p>
<pre><code>     下划线`_`是一个特殊的标识符，称为空白标识符，它可以像其他标识符那样用于变量的声明或赋值（任何类型都可以赋值给它），但任何赋给这个标识符的值都将被抛弃，因此这些值不能在后续的代码中使用，也不可以使用`_`作为变量对其它变量进行赋值或运算。</code></pre>
<p>​         在使用标识符之前必须进行声明，声明一个标识符就是将这个标识符与常量、类型、变量、函数或者代码包绑定在一起。在同一个代码块内标识符的名称不能重复。</p>
<p> 标识符的命名需要遵守以下规则：</p>
<ul>
<li>由 26 个英文字母、0~9、<code>_</code>组成；</li>
<li>不能以数字开头，例如 var 1num int 是错误的；</li>
<li>Go语言中严格区分大小写；</li>
<li>标识符不能包含空格；</li>
<li>不能以系统保留关键字作为标识符，比如 break，if 等等。</li>
</ul>
<p> 命名标识符时还需要注意以下几点：</p>
<ul>
<li>标识符的命名要尽量采取简短且有意义；</li>
<li>不能和标准库中的包名重复；</li>
<li>为变量、函数、常量命名时采用驼峰命名法，例如 stuName、getVal；</li>
</ul>
<p> 当然Go语言中的变量、函数、常量名称的首字母也可以大写，如果首字母大写，则表示它可以被其它的包访问（类似于 <a href="http://c.biancheng.net/java/">Java</a> 中的 public）；如果首字母小写，则表示它只能在本包中使用 (类似于 Java 中 private）。</p>
<p> 在Go语言中还存在着一些特殊的标识符，叫做预定义标识符，如下表所示：</p>
<table>
<thead>
<tr>
<th>append</th>
<th>bool</th>
<th>byte</th>
<th>cap</th>
<th>close</th>
<th>complex</th>
<th>complex64</th>
<th>complex128</th>
<th>uint16</th>
</tr>
</thead>
<tbody><tr>
<td>copy</td>
<td>false</td>
<td>float32</td>
<td>float64</td>
<td>imag</td>
<td>int</td>
<td>int8</td>
<td>int16</td>
<td>uint32</td>
</tr>
<tr>
<td>int32</td>
<td>int64</td>
<td>iota</td>
<td>len</td>
<td>make</td>
<td>new</td>
<td>nil</td>
<td>panic</td>
<td>uint64</td>
</tr>
<tr>
<td>print</td>
<td>println</td>
<td>real</td>
<td>recover</td>
<td>string</td>
<td>true</td>
<td>uint</td>
<td>uint8</td>
<td>uintptr</td>
</tr>
</tbody></table>
<p>预定义标识符一共有 36 个，主要包含Go语言中的基础数据类型和内置函数，这些预定义标识符也不可以当做标识符来使用。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins主机之上部署SonarQube Scanner</title>
    <url>/2021/01/05/Jenkins%E4%B8%BB%E6%9C%BA%E4%B9%8B%E4%B8%8A%E9%83%A8%E7%BD%B2SonarQube-Scanner/</url>
    <content><![CDATA[<h3 id="1、在jenkins中安装插件：SonarQube-Scanner"><a href="#1、在jenkins中安装插件：SonarQube-Scanner" class="headerlink" title="1、在jenkins中安装插件：SonarQube Scanner"></a>1、在jenkins中安装插件：SonarQube Scanner</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303154952665.png" alt="image-20200303154952665"></p>
<h3 id="2、在jenkins主机之上安装-SonarQube-Scanner-部件，将其安装到jenkins用户之下"><a href="#2、在jenkins主机之上安装-SonarQube-Scanner-部件，将其安装到jenkins用户之下" class="headerlink" title="2、在jenkins主机之上安装 SonarQube Scanner 部件，将其安装到jenkins用户之下"></a>2、在jenkins主机之上安装 SonarQube Scanner 部件，将其安装到jenkins用户之下</h3><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span>  /usr/local<br>unzip sonar-scanner-cli-<span class="hljs-number">4.2</span>.<span class="hljs-number">0.1873</span>-linux.zip<br><span class="hljs-keyword">ln</span> -s sonar-scanner-<span class="hljs-number">4.2</span>.<span class="hljs-number">0.1873</span>-linux sonar-scanner<br>chown -R jenkin<span class="hljs-variable">s:</span> sonar-scanner-<span class="hljs-number">4.2</span>.<span class="hljs-number">0.1873</span>-linux<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;export SONAR_SCANNER_HOME=/usr/local/sonar-scanner&#x27;</span>&gt;&gt;/etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;export PATH=$SONAR_SCANNER_HOME/bin:$PATH&#x27;</span>&gt;&gt;/etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">source</span> /etc/<span class="hljs-keyword">profile</span><br><br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">conf</span>/sonar-scanner.properties<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303155825904.png" alt="image-20200303155825904"></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sonar-scanner -h</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303155945854.png" alt="image-20200303155945854"></p>
<h3 id="3、整合Jenkins和SonarQube："><a href="#3、整合Jenkins和SonarQube：" class="headerlink" title="3、整合Jenkins和SonarQube："></a>3、整合Jenkins和SonarQube：</h3><p>网页登录jenkins，系统管理，全局工具配置，SonarQube Scanner，将安装的sonar-scanner配置上去</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303170347797.png" alt="image-20200303170347797"></p>
<p>网页登录sonar创建token</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303170456840.png" alt="image-20200303170456840"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303170548345.png" alt="image-20200303170548345"></p>
<p>网页登录jenkins，凭据，jenkins，全局凭据，添加凭据，Secret text类型，将上一步的token填入</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/20191119155139175.png" alt="在这里插入图片描述"></p>
<p>网页登录jenkins，系统管理，系统设置，SonarQube servers，配置名字和url，选择上一步添加的凭据</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303171838307.png" alt="image-20200303171838307"></p>
<p>4、配置Jenkins任务</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305133622078.png" alt="image-20200305133622078"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305133650304.png" alt="image-20200305133650304"></p>
<ul>
<li>Task to run: 输入 scan，即分析代码；</li>
<li>JDK :选择 SonarQube Scanner 使用的 JDK（注意这里必须是 JDK 不能是 JRE）；</li>
<li>Path to project properties : 这里可以指定一个sonar-project.properties 文件，如果不指定的话会使用项目默认的 properties文件；</li>
<li>Analysis properties: 这里需要输入一些配置参数用来传递给 SonarQube，这里的参数优先级高于sonar-project.properties文件里面的参数，所以可以在这里来配置所有的参数以替代sonar-project.properties文件，下面列出了一些参数，sonar.language指定了要分析的开发语言（特定的开发语言对应了特定的规则），sonar.sources定义了需要分析的源代码位置（示例中的.所指示的是当前 Jenkins项目的目录），</li>
<li>sonar.java.binaries 定义了需要分析代码的编译后文件位置；</li>
<li>Additional arguments 输入框中可以输入一些附加的参数，示例中的-X 意思是进入SonarQube Scanner的Debug 模式，这样会输出更多的日志信息；</li>
<li>JVM Options 可以输入在执行 SonarQube Scanner是需要的JVM参数。</li>
</ul>
<p>5、测试构建</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305134512002.png" alt="image-20200305134512002"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305134441603.png" alt="image-20200305134441603"></p>
<p>构建项目时错误信息：Caused by: Please provide compiled classes of your project with sonar.java.binaries property，这个问题是sonar扫描的项目工程中没有找到相应的class文件</p>
<p>解决办法：在Analysis properties一项中，增加sonar.java.binaries的配置，这个路径是项目工程中，编译的.class文件的路径。</p>
<p>6、登录sonarqube查看</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305134927195.png" alt="image-20200305134927195"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Sonarqube</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins主从配置</title>
    <url>/2021/03/16/Jenkins%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1、环境介绍"><a href="#1、环境介绍" class="headerlink" title="1、环境介绍"></a>1、环境介绍</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">master</span>        <span class="hljs-title">192</span>.<span class="hljs-number">168.0</span>.<span class="hljs-number">121</span><br><span class="hljs-literal">slave</span>         <span class="hljs-number">192.168</span>.<span class="hljs-number">0.76</span><br></code></pre></td></tr></table></figure>
<h3 id="2、生成密钥"><a href="#2、生成密钥" class="headerlink" title="2、生成密钥"></a>2、生成密钥</h3><p>部署jenkins master –slave 需要在master 服务器下 生成一个 秘钥文件</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen  -t   rsa</span><br></code></pre></td></tr></table></figure>
<p>什么都不用填，一直敲回车就可以，生成的秘钥会在用户目录下， root 用户生成的 在~./ssh/中</p>
<p>有两个文件 id_rsa；id_rsa.pub</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span>  -i  id_rsa.pub  <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.76</span><br></code></pre></td></tr></table></figure>
<h3 id="3、配置slave"><a href="#3、配置slave" class="headerlink" title="3、配置slave"></a>3、配置slave</h3><p>点击系统管理</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324111648391.png" alt="image-20200324111648391"></p>
<p>选择插件管理</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324111713375.png" alt="image-20200324111713375"></p>
<p>这是我已经装了的SSH插件，初始化的时候默认貌似就装了，展示下</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324111849067.png" alt="image-20200324111849067"></p>
<p>返回上一级，选择节点管理</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324112021038.png" alt="image-20200324112021038"></p>
<p>选择新建节点</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324112051545.png" alt="image-20200324112051545"></p>
<p>根据自己配置</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324112444115.png" alt="image-20200324112444115"></p>
<p>选择SSH username  with  private  key</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324112756460.png" alt="image-20200324112756460"></p>
<h3 id="4、关联slave"><a href="#4、关联slave" class="headerlink" title="4、关联slave"></a>4、关联slave</h3><p>slave节点需要java环境，需要提前准备，配置好后能看到这个界面</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324113007717.png" alt="image-20200324113007717"></p>
<p>但slave后面应该是没参数的，我这里已经进行关联了，点击刚才新增的进去即可进行关联</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200324113212259.png" alt="image-20200324113212259"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s中Pod时间设置</title>
    <url>/2021/03/16/K8s%E4%B8%ADPod%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1、-时间介绍"><a href="#1、-时间介绍" class="headerlink" title="1、 时间介绍"></a>1、 时间介绍</h3><h4 id="1-1-GMT"><a href="#1-1-GMT" class="headerlink" title="1.1    GMT"></a>1.1    GMT</h4><p>​    格林威治时间。即格林威治所在地的标准时间。</p>
<h4 id="1-2-UTC"><a href="#1-2-UTC" class="headerlink" title="1.2    UTC"></a>1.2    UTC</h4><p>​    世界标准时间（即 GMT）。即：UTC = GMT + 0。容器中的时间就是 UTC。</p>
<h3 id="1-3-CST"><a href="#1-3-CST" class="headerlink" title="1.3    CST"></a>1.3    CST</h3><p>​    中国标准时间。CST = GMT + 8。</p>
<h4 id="1-4-EST"><a href="#1-4-EST" class="headerlink" title="1.4    EST"></a>1.4    EST</h4><p>​    东部时间。EST = GMT - 5。如果当前机子所在时区是纽约，那么日期显示就是 EST。</p>
<h3 id="2、-设置pod时间"><a href="#2、-设置pod时间" class="headerlink" title="2、 设置pod时间"></a>2、 设置pod时间</h3><p>​        通常情况云服务器的时区为世界标准时间，和中国标准时间相差8个小时。</p>
<h4 id="2-1挂在宿主机的时间到容器中"><a href="#2-1挂在宿主机的时间到容器中" class="headerlink" title="2.1挂在宿主机的时间到容器中"></a>2.1挂在宿主机的时间到容器中</h4><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">  volumeMounts:</span><br>  - mountPath: <span class="hljs-meta-keyword">/etc/</span>localtime<br><span class="hljs-symbol">    name:</span> localtime<br><span class="hljs-symbol">volumes:</span><br>- hostPath:<br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/etc/</span>localtime<br><span class="hljs-symbol">    type:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  name:</span> localtime<br></code></pre></td></tr></table></figure>
<h4 id="2-2传参到pod中"><a href="#2-2传参到pod中" class="headerlink" title="2.2传参到pod中"></a>2.2传参到pod中</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">spec</span>:<br>  <span class="hljs-attribute">containers</span>:<br>  - <span class="hljs-attribute">env</span>:<br>    - <span class="hljs-attribute">name</span>: TZ<br>      <span class="hljs-attribute">value</span>: Asia/Shanghai<br></code></pre></td></tr></table></figure>
<h4 id="2-3传参到pod中"><a href="#2-3传参到pod中" class="headerlink" title="2.3传参到pod中"></a>2.3传参到pod中</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">spec</span>:<br>  <span class="hljs-attribute">containers</span>:<br>  - <span class="hljs-attribute">env</span>:<br>    - <span class="hljs-attribute">name</span>: TZ<br>      <span class="hljs-attribute">value</span>: CST-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins构建时选择Git分支</title>
    <url>/2021/04/01/Jenkins%E6%9E%84%E5%BB%BA%E6%97%B6%E9%80%89%E6%8B%A9Git%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<h2 id="1、安装Git-Parameter插件"><a href="#1、安装Git-Parameter插件" class="headerlink" title="1、安装Git Parameter插件"></a>1、安装<a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Parameter+Plugin">Git Parameter</a>插件</h2><p>在系统管理中的插件管理下载Git Parameter，下图是我已经安装</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210401150031254.png" alt="image-20210401150031254"></p>
<h2 id="2、配置参数化构建"><a href="#2、配置参数化构建" class="headerlink" title="2、配置参数化构建"></a>2、配置参数化构建</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210401150709595.png" alt="image-20210401150709595"></p>
<p>在源代码库选择分支中使用变量接收</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210401150908867.png" alt="image-20210401150908867"></p>
<p>点击构建项目就能选择特性分支进行构建</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210401151022235.png" alt="image-20210401151022235"></p>
<p><strong>备注：如果配置了自动化构建，默认拉取的是master分支的代码！</strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s健康检测</title>
    <url>/2021/03/16/K8s%E5%81%A5%E5%BA%B7%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<ol>
<li>健康检测的探测方式有哪些</li>
<li>健康检测的探针有哪些</li>
<li>如何选择探测方式</li>
<li>探测实例</li>
</ol>
<h2 id="1-健康检测的探测方式"><a href="#1-健康检测的探测方式" class="headerlink" title="1.健康检测的探测方式"></a>1.健康检测的探测方式</h2><ul>
<li><p><strong>LivenessProbe存活探测：</strong><br>用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功。</p>
</li>
<li><p><strong>ReadinessProbe就绪探测：</strong><br>用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。</p>
</li>
<li><p><strong>startupProbe启动探测：</strong> （1.16版本）</p>
<p>指示容器中的应用程序是否已启动。如果提供了启动探针，则将禁用所有其他探针，直到成功。如果启动探针失败，则kubelet将杀死Container，并且Container将接受其重启策略。如果容器未提供启动探针，则默认状态为Success。</p>
</li>
</ul>
<h2 id="2-健康检测的探针"><a href="#2-健康检测的探针" class="headerlink" title="2.健康检测的探针"></a>2.健康检测的探针</h2><p><strong>Liveness 指针和 Readiness 指针支持三种不同的探测方式：</strong></p>
<ul>
<li>1，第一种是 httpGet。它是通过发送 http Get 请求来进行判断的，当返回码是 200-399 之间的状态码时，标识这个应用是健康的；</li>
<li>2，第二种探测方式是 Exec。它是通过执行容器中的一个命令来判断当前的服务是否是正常的，当命令行的返回结果是 0，则标识容器是健康的；</li>
<li>3，第三种探测方式是 tcpSocket 。它是通过探测容器的 IP 和 Port 进行 TCP 健康检查，如果这个 TCP 的链接能够正常被建立，那么标识当前这个容器是健康的。</li>
</ul>
<p>第一种探测方式和第三种非常相似，一般常用的是第一和第二种的探测方式。</p>
<p> 每种检查动作都可能有三种返回状态。</p>
<p>Success，表示通过了健康检查</p>
<p>Failure，表示没有通过健康检查</p>
<p>Unknown，表示检查动作失败</p>
<p><em>restartPolicy   Always或 OnFailure</em></p>
<p>Always: 重启异常退出容器，pod的phase是Running<br>OnFailure: 重启异常退出容器，pod的phase是Running<br>Never: pod的phase变成Failed.</p>
<h2 id="3-探测方式的选择"><a href="#3-探测方式的选择" class="headerlink" title="3.探测方式的选择"></a>3.探测方式的选择</h2><h5 id="Liveness和Readness两种探测机制比较"><a href="#Liveness和Readness两种探测机制比较" class="headerlink" title="Liveness和Readness两种探测机制比较"></a><strong>Liveness和Readness两种探测机制比较</strong></h5><p><strong>Liveness和Readness两种探测机制的使用场景：</strong> Liveness 指针适用场景是支持那些可以重新拉起的应用，而 Readiness 指针主要应对的是启动之后无法立即对外提供服务的这些应用。 （可用于服务更新）</p>
<p><strong>Liveness和Readness两种探测机制的相同点和不同点：</strong> 相同点是根据探测pod内某个应用或文件，来检查pod的健康状况，不同点是liveness如果探测失败会重启pod，而readliness则在连续3次探测（默认探测三次）失败之后，会将pod设置为不可用的状态，并不会重启pod。</p>
<p>1.您的Container中的进程在遇到问题或变得不正常时能够自行崩溃，则不一定需要进行活动调查；kubelet将根据Pod的自动执行正确的操作<code>restartPolicy</code></p>
<p>2.在探测失败时杀死并重启容器，请指定存活探测或（1.16版可选启动探测） 并指定 restartPolicy  Always或OnFailure。</p>
<p> 3.探测成功后才开始向Pod发送流量，请指定就绪探测器  就绪探针可能与存活探针相同，但是规范中存在就绪探针意味着Pod将在不接收任何流量的情况下启动，并且仅在探针开始成功之后才开始接收流量。如果您的容器需要在启动过程中加载大型数据，配置文件或迁移，请指定就绪探测。</p>
<p>4.Container能够自行拆卸下来进行维护，则可以指定一个准备就绪探针，该探针检查特定于准备就绪的端点</p>
<p>5.只是希望在删除Pod时能够耗尽请求，则不一定需要准备就绪探针。删除后，无论是否准备就绪探针，Pod都会自动将自己置于未就绪状态。等待Pod中的Container停止时，Pod仍处于未就绪状态。</p>
<p>该<a href="https://kubernetes.io/docs/admin/kubelet/">kubelet</a>使用活跃度探头知道什么时候重新启动的Container。例如，活动性探针可能会陷入僵局，而应用程序正在运行，但无法取得进展。在这种状态下重新启动Container可以帮助应用程序尽管存在错误也更可用。</p>
<p>6.Kubelet使用就绪性探测器来了解何时Container准备开始接受流量。当Pod的所有Container都准备就绪时，即视为准备就绪。此信号的一种用法是控制将哪些Pod用作服务的后端。当Pod尚未就绪时，会将其从服务负载平衡器中删除。</p>
<p>4.Container通常以<code>initialDelaySeconds + failureThreshold × periodSeconds</code>开头，则应指定一个启动探针，该探针检查与活动探针相同的终结点。默认<code>periodSeconds</code>值为30秒。然后，应将其设置<code>failureThreshold</code>得足够高以允许Container启动，而不更改存活探针的默认值。这有助于防止死锁。</p>
<p>kubelet使用启动探针来了解何时启动Container应用程序。如果配置了这样的探针，它将禁用活动性和就绪性检查，直到成功为止，以确保这些探针不会干扰应用程序的启动。这可用于对启动缓慢的容器进行活动检查，避免它们在启动和运行之前被kubelet杀死。</p>
<h2 id="4-健康探测实例"><a href="#4-健康探测实例" class="headerlink" title="4.健康探测实例"></a>4.健康探测实例</h2><ul>
<li><code>initialDelaySeconds</code>：启动容器后，启动活动或就绪探针之前的秒数。默认为0秒。最小值为0。</li>
<li><code>periodSeconds</code>：执行探测的频率（以秒为单位）。默认为10秒。最小值为1。</li>
<li><code>timeoutSeconds</code>：探测超时的秒数。默认为1秒。最小值为1。</li>
<li><code>successThreshold</code>：探测失败后，连续最小成功探测为成功。默认值为1。为保持活力，必须为1。最小值为1。</li>
<li><code>failureThreshold</code>：当Pod启动并且探测失败时，Kubernetes会尝试尝试<code>failureThreshold</code>多次，然后放弃。放弃活动探针意味着重新启动容器。如果准备就绪，则将Pod标记为“未就绪”。默认值为3。最小值为1。</li>
</ul>
<p><strong>示例一：通过exec方式做健康探测</strong></p>
<p>查看pod内某个指定的文件是否存在，如果存在则认为状态为健康的，否则会根据设置的重启重启策略重启pod。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> liveness<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    name:</span> liveness<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  restartPolicy:</span> OnFailure    <span class="hljs-meta">##定义重启策略，仅在pod对象出现错误时才重启</span><br><span class="hljs-symbol">  containers:</span><br>  - name: liveness<br><span class="hljs-symbol">    image:</span> busybox<br><span class="hljs-symbol">    args:</span><br>    - <span class="hljs-meta-keyword">/bin/</span>sh<br>    - -c<br>    - touch <span class="hljs-meta-keyword">/tmp/</span>test; sleep <span class="hljs-number">30</span>; rm -rf <span class="hljs-meta-keyword">/tmp/</span>test; sleep <span class="hljs-number">300</span>  <span class="hljs-meta">#创建文件，并且在30秒后将文件进行删除</span><br><span class="hljs-symbol">    livenessProbe:</span>      <span class="hljs-meta">#执行活跃度探测</span><br><span class="hljs-symbol">      exec:</span><br><span class="hljs-symbol">        command:</span><br>        - cat      <span class="hljs-meta">#探测/tmp目录下是有test文件，有则代表健康，没有则执行重启pod策略。</span><br>        - <span class="hljs-meta-keyword">/tmp/</span>test<br><span class="hljs-symbol">      initialDelaySeconds:</span> <span class="hljs-number">10</span>        <span class="hljs-meta">#当容器运行多久之后开始探测（单位是s）</span><br><span class="hljs-symbol">      periodSeconds:</span> <span class="hljs-number">5</span>     <span class="hljs-meta">#探测频率（单位s），每隔5秒探测一次。</span><br></code></pre></td></tr></table></figure>
<p>容器执行livenessProbe检查，periodSeconds字段指定kubelet每5s执行一次检查，检查的命令为cat /tmp/healthy，initialDelaySeconds字段告诉kubelet应该在执行第一次检查之前等待10秒， 如果命令执行成功，则返回0，那么kubelet就认为容器是健康的，如果为非0，则Kubelet会Kill掉容器并根据重启策略来决定是否需要重启。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>sh -c <span class="hljs-string">&quot;touch /tmp/test; sleep 30; rm -rf /tmp/test; sleep 300&quot;</span><br></code></pre></td></tr></table></figure>
<p>容器的前30秒，有一个**/tmp/healthy<strong>文件。因此，在前30秒内，该命令</strong>cat /tmp/healthy<strong>返回成功代码。30秒后，</strong>cat /tmp/healthy**返回失败代码。</p>
<p>可用以下命令查看状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">kubectl <span class="hljs-keyword">describe</span> pod liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><br></code></pre></td></tr></table></figure>
<p>在配置文件中，使用k8s.gcr.io/liveness镜像，创建出一个Pod，其中<strong>periodSeconds</strong>字段指定kubelet每3秒执行一次探测，<strong>initialDelaySeconds</strong>字段告诉kubelet延迟等待3秒，探测方式为向容器中运行的服务发送HTTP GET请求，请求8080端口下的**/healthz**, 任何大于或等于200且小于400的代码表示成功。任何其他代码表示失败。</p>
<p><strong>示例二：通过TCP方式做健康探测</strong></p>
<p>Kubelet将尝试在指定的端口上打开容器上的套接字，如果能建立连接，则表明容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">goproxy</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">goproxy</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">goproxy</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/goproxy:0.1</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">readinessProbe:</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">15</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure>
<p><strong>示例三：通过HTTP方式做健康探测</strong></p>
<p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#httpgetaction-v1-core">HTTP探针</a> 还有其他可以设置的字段<code>httpGet</code>：</p>
<ul>
<li><code>host</code>：要连接的主机名，默认为Pod IP。您可能要改为在httpHeaders中设置“主机”。</li>
<li><code>scheme</code>：用于连接到主机（HTTP或HTTPS）的方案。默认为HTTP。</li>
<li><code>path</code>：HTTP服务器上的访问路径。</li>
<li><code>httpHeaders</code>：要在请求中设置的自定义标头。HTTP允许重复的标头。</li>
<li><code>port</code>：要在容器上访问的端口的名称或端口号。编号必须在1到65535之间。</li>
</ul>
<p>readiness加liveness  服务未准备就绪，是0/1    访问拒绝，当状态为正常时，访问正常，容器删除，服务重启</p>
<p>k8s会根据service关联到pod的podIP信息组合成一个endpoint。通过负载转发策略将请求转发到后端的各个pod上，kube-proxy负责service的实现，通过侦听service更新事件，更新service相关的iptables规则，同时也侦听endpoint更新事件，更新endpoint相关的iptables规则，然后将包请求转入endpoint对应的Pod，如果某个service尚没有Pod创建，那么针对此service的请求将会被drop掉。</p>
<p>readiness就是通过service来解决请求，只有当容器创建成功service才会更新pod的信息，请求才会被接受，反之请求会被负载到service中存在的容器上，</p>
<p>liveness则是当pods创建后service就会更新pod信息，请求被接受但是连接拒绝，等到pods正常时访问才正常</p>
<h2 id="服务依赖"><a href="#服务依赖" class="headerlink" title="服务依赖"></a>服务依赖</h2><h4 id="理解Init-Container"><a href="#理解Init-Container" class="headerlink" title="理解Init Container"></a>理解Init Container</h4><p>一个pod中可以有一或多个Init Container。Pod的中多个Init Container启动顺序为yaml文件中的描述顺序，且串行方式启动，下一个Init/app Container必须等待上一个Init Container完成后方可启动。例如，Init Container1-&gt; … -&gt; Init Containern -&gt; app Container[1-n]。Init Container1成功启动并且完成后，后续的Init Container和app Container才可以启动，如Init Container启动或执行相关检查失败，后续的init Container和应用Container将不会被执行启动命令。</p>
<p>因此可利用Init Container来判断app Container中被依赖的服务是否成功启动。如被依赖的app Container服务启动失败，那么利用Init Container启动失败可以阻止后续app Container服务的启动。</p>
<p>由于Init Container必须要在pod状态变为Ready之前完成，所以其不需要readiness探针。另外在资源的requests与limits上与普通Container有细微差别，详见</p>
<p>Resources</p>
<p>，除以上2点外，Init Container与普通Container并无明显区别。</p>
<h4 id="Init-Containers用途"><a href="#Init-Containers用途" class="headerlink" title="Init Containers用途"></a>Init Containers用途</h4><ol>
<li>前文已经提及，由于Init Container必须在app Containers启动之前完成，所以可利用其特性，用作服务依赖处理。比如某一个服务A，需依赖db或memcached，那么可以利用服务A pod的Init Container判断db/memcached是否正常提供服务，如果启动服务失败或工作异常，设置Init Container启动失败，那么pod中的服务A就不会被启动了。</li>
<li>应用镜像因安全原因等没办法安装或运行的工具，可放到Init Container中运行。另外，Init Container独立于业务服务，与业务无关的工具如sed, awk, python, dig等也可以按需放到Init Container之中。最后，Init Container也可以被授权访问应用Container无权访问的内容。</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubeadm部署Kubernetes1.14.1集群</title>
    <url>/2021/03/16/Kubeadm%E9%83%A8%E7%BD%B2Kubernetes1-14-1%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="一、环境说明"><a href="#一、环境说明" class="headerlink" title="一、环境说明"></a><strong>一、环境说明</strong></h2><table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>角色</th>
<th>系统</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-node-1</td>
<td>192.168.120.128</td>
<td>k8s-master</td>
<td>Centos7.6</td>
</tr>
<tr>
<td>k8s-node-2</td>
<td>192.168.120.129</td>
<td>k8s-node</td>
<td>Centos7.6</td>
</tr>
<tr>
<td>k8s-node-3</td>
<td>192.168.120.130</td>
<td>k8s-node</td>
<td>Centos7.6</td>
</tr>
</tbody></table>
<p>注意：官方建议每台机器至少双核2G内存，同时需确保MAC和product_uuid唯一（参考下面的命令查看）</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">ip link<br>cat <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/dmi/i</span>d/product_uuid<br></code></pre></td></tr></table></figure>
<h2 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a><strong>二、环境配置</strong></h2><p><strong>以下命令在三台主机上均需运行</strong></p>
<h3 id="1、设置阿里云yum源（可选）"><a href="#1、设置阿里云yum源（可选）" class="headerlink" title="1、设置阿里云yum源（可选）"></a><strong>1、设置阿里云yum源（可选）</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>rm -rf /var/cache/yum &amp;&amp; yum makecache &amp;&amp; yum -y update &amp;&amp; yum -y autoremove<br></code></pre></td></tr></table></figure>
<h3 id="2、安装依赖包"><a href="#2、安装依赖包" class="headerlink" title="2、安装依赖包"></a><strong>2、安装依赖包</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y epel-release conntrack ipvsadm ipset jq sysstat curl iptables libseccomp<br></code></pre></td></tr></table></figure>
<p><strong>3、关闭防火墙</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl stop firewalld &amp;&amp; systemctl disable firewalld<br>iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT<br></code></pre></td></tr></table></figure>
<h3 id="4、关闭SELinux"><a href="#4、关闭SELinux" class="headerlink" title="4、关闭SELinux"></a><strong>4、关闭SELinux</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">setenforce 0<br>sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<br></code></pre></td></tr></table></figure>
<h3 id="5、关闭-swap-分区"><a href="#5、关闭-swap-分区" class="headerlink" title="5、关闭 swap 分区"></a><strong>5、关闭 swap 分区</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">swapoff -a<br>sed -i &#x27;/ swap / s/^\(.*\)$/#\1/g&#x27; /etc/fstab<br></code></pre></td></tr></table></figure>
<h3 id="6、加载内核模块"><a href="#6、加载内核模块" class="headerlink" title="6、加载内核模块"></a><strong>6、加载内核模块</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">modprobe br_netfilter<br>modprobe ip_vs<br>modprobe ip_vs_rr<br>modprobe ip_vs_wrr<br>modprobe ip_vs_sh<br>modprobe nf_conntrack_ipv4<br><br>cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF<br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack_ipv4<br>modprobe -- br_netfilter<br>EOF<br><br>chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules<br></code></pre></td></tr></table></figure>
<h3 id="7、设置内核参数"><a href="#7、设置内核参数" class="headerlink" title="7、设置内核参数"></a><strong>7、设置内核参数</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat &lt;&lt; EOF | tee /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-iptables=1<br>net.bridge.bridge-nf-call-ip6tables=1<br>net.ipv4.ip_forward=1<br>net.ipv4.tcp_tw_recycle=0<br>vm.swappiness=0<br>vm.overcommit_memory=1<br>vm.panic_on_oom=0<br>fs.inotify.max_user_watches=89100<br>fs.file-max=52706963<br>fs.nr_open=52706963<br>net.ipv6.conf.all.disable_ipv6=1<br>net.netfilter.nf_conntrack_max=2310720<br>EOF<br><br>sysctl -p /etc/sysctl.d/k8s.conf<br></code></pre></td></tr></table></figure>
<h3 id="8、安装Docker"><a href="#8、安装Docker" class="headerlink" title="8、安装Docker"></a><strong>8、安装Docker</strong></h3><p>1、首先卸载旧版：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum remove docker \<br>           docker-client \<br>           docker-client-latest \<br>           docker-common \<br>           docker-latest \<br>           docker-latest-logrotate \<br>           docker-logrotate \<br>           docker-selinux \<br>           docker-engine-selinux \<br>           docker-engine<br></code></pre></td></tr></table></figure>
<p>2、安装依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure>
<p>3、设置安装源（阿里云）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure>
<p>4、启用测试库（可选）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager --enable docker-ce-edge<br>yum-config-manager --enable docker-ce-test<br></code></pre></td></tr></table></figure>
<p>5、安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum makecache fast<br>yum install -y docker-ce-18.09.6<br></code></pre></td></tr></table></figure>
<p>6、启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl start docker<br>systemctl enable docker<br></code></pre></td></tr></table></figure>
<p>Docker建议配置阿里云镜像加速</p>
<p>安装完成后配置启动时的命令，否则docker会将iptables FORWARD chain的默认策略设置为DROP</p>
<p>另外Kubeadm建议将systemd设置为cgroup驱动，所以还要修改daemon.json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sed -i &quot;13i ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT&quot; /usr/lib/systemd/system/docker.service<br><br>tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://bk6kzfqm.mirror.aliyuncs.com&quot;],<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;,<br>  &quot;storage-opts&quot;: [<br>    &quot;overlay2.override_kernel_check=true&quot;<br>  ]<br>&#125;<br>EOF<br><br>systemctl daemon-reload<br>systemctl restart docker<br><br><span class="hljs-meta">#</span><span class="bash"> overlay2也是一个联合目录挂载文件系统</span><br></code></pre></td></tr></table></figure>
<h3 id="9、安装kubeadm和kubelet"><a href="#9、安装kubeadm和kubelet" class="headerlink" title="9、安装kubeadm和kubelet"></a><strong>9、安装kubeadm和kubelet</strong></h3><p>配置源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=0<br>repo_gpgcheck=0<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br><br>yum makecache fast<br></code></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y kubelet kubeadm kubectl<br>systemctl enable kubelet<br><br>vim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf<br><span class="hljs-meta">#</span><span class="bash">设置kubelet的cgroup driver</span><br>KUBELET_KUBECONFIG_ARGS=--cgroup-driver=systemd<br>systemctl daemon-reload<br>systemctl restart kubelet.service<br></code></pre></td></tr></table></figure>
<h3 id="10、拉取所需镜像"><a href="#10、拉取所需镜像" class="headerlink" title="10、拉取所需镜像"></a><strong>10、拉取所需镜像</strong></h3><p>先从阿里云拉取所需的镜像，不然会从谷歌拉取，导致拉取失败。</p>
<p>拉取镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubeadm config images list | sed -e &#x27;s/^/docker pull /g&#x27; -e &#x27;s#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g&#x27; | sh -x<br>docker images | grep registry.cn-hangzhou.aliyuncs.com/google_containers | awk &#x27;&#123;print &quot;docker tag&quot;,$1&quot;:&quot;$2,$1&quot;:&quot;$2&#125;&#x27; | sed -e &#x27;s/registry.cn-hangzhou.aliyuncs.com\/google_containers/k8s.gcr.io/2&#x27; | sh -x<br>docker images | grep registry.cn-hangzhou.aliyuncs.com/google_containers | awk &#x27;&#123;print &quot;docker rmi &quot;&quot;&quot;$1&quot;&quot;&quot;:&quot;&quot;&quot;$2&#125;&#x27; | sh -x<br></code></pre></td></tr></table></figure>
<h2 id="三、初始化集群"><a href="#三、初始化集群" class="headerlink" title="三、初始化集群"></a><em>三、初始化集群</em></h2><p>以下命令如无特殊说明，均在k8s-node-1上执行</p>
<h3 id="1、使用kubeadm-init初始化集群（注意修改最后为本机IP）"><a href="#1、使用kubeadm-init初始化集群（注意修改最后为本机IP）" class="headerlink" title="1、使用kubeadm init初始化集群（注意修改最后为本机IP）"></a><strong>1、使用kubeadm init初始化集群（注意修改最后为本机IP）</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubeadm init \<br>  --kubernetes-version=v1.14.3 \<br>  --pod-network-cidr=10.244.0.0/16 \<br>  --apiserver-advertise-address=192.168.120.128<br></code></pre></td></tr></table></figure>
<p>初始化成功后会输出类似下面的加入命令，暂时无需运行，先记录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubeadm join 192.168.120.128:6443 --token duz8m8.njvafly3p2jrshfx --discovery-token-ca-cert-hash sha256:60e15ba0f562a9f29124914a1540bd284e021a37ebdbcea128f4e257e25002db<br></code></pre></td></tr></table></figure>
<h3 id="2、为需要使用kubectl的用户进行配置"><a href="#2、为需要使用kubectl的用户进行配置" class="headerlink" title="2、为需要使用kubectl的用户进行配置"></a><strong>2、为需要使用kubectl的用户进行配置</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p $HOME/.kube<br>cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>chown $(id -u):$(id -g) $HOME/.kube/config<br></code></pre></td></tr></table></figure>
<p>检查集群状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubectl get cs<br></code></pre></td></tr></table></figure>
<h3 id="3、安装Pod-Network（使用七牛云镜像）"><a href="#3、安装Pod-Network（使用七牛云镜像）" class="headerlink" title="3、安装Pod Network（使用七牛云镜像）"></a><strong>3、安装Pod Network（使用七牛云镜像）</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl -o kube-flannel.yml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br>sed -i &quot;s/quay.io\/coreos\/flannel/quay-mirror.qiniu.com\/coreos\/flannel/g&quot; kube-flannel.yml<br>kubectl apply -f kube-flannel.yml<br>rm -f kube-flannel.yml<br></code></pre></td></tr></table></figure>
<p>使用下面的命令确保所有的Pod都处于Running状态，可能要等到许久。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubectl get pod --all-namespaces -o wide<br></code></pre></td></tr></table></figure>
<h3 id="4、向Kubernetes集群中添加Node节点"><a href="#4、向Kubernetes集群中添加Node节点" class="headerlink" title="4、向Kubernetes集群中添加Node节点"></a><strong>4、向Kubernetes集群中添加Node节点</strong></h3><p>在k8s-node-2和k8s-node-3上运行之前在k8s-node-1输出的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubeadm join 192.168.120.128:6443 --token duz8m8.njvafly3p2jrshfx --discovery-token-ca-cert-hash sha256:60e15ba0f562a9f29124914a1540bd284e021a37ebdbcea128f4e257e25002db<br></code></pre></td></tr></table></figure>
<p>查看集群中的节点状态，可能要等等许久才Ready</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubectl get nodes<br></code></pre></td></tr></table></figure>
<h3 id="5、kube-proxy开启ipvs"><a href="#5、kube-proxy开启ipvs" class="headerlink" title="5、kube-proxy开启ipvs"></a><strong>5、kube-proxy开启ipvs</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kubectl get configmap kube-proxy -n kube-system -o yaml &gt; kube-proxy-configmap.yaml<br>sed -i &#x27;s/mode: &quot;&quot;/mode: &quot;ipvs&quot;/&#x27; kube-proxy-configmap.yaml<br>kubectl apply -f kube-proxy-configmap.yaml<br>rm -f kube-proxy-configmap.yaml<br>kubectl get pod -n kube-system | grep kube-proxy | awk &#x27;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s连接harbor私有仓库</title>
    <url>/2021/03/16/K8s%E8%BF%9E%E6%8E%A5harbor%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1、登录Docker"><a href="#1、登录Docker" class="headerlink" title="1、登录Docker"></a>1、登录Docker</h3><p>通过注册表进行身份验证才能提取私有映像：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">login</span>  <span class="hljs-selector-tag">registry</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure>

<p>出现提示时，输入您的Docker用户名和密码。登录过程将创建或更新config.json包含授权令牌的文件。</p>
<p>查看config.json文件：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">cat ~<span class="hljs-regexp">/.docker/</span>config.json<br>&#123;<br>        <span class="hljs-string">&quot;auths&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;registry.hello.com&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;YWRtaW46YWRtaW4xMjM=&quot;</span><br>                &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;HttpHeaders&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Docker-Client/18.09.0 (linux)&quot;</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2、根据现有Docker凭证创建密钥"><a href="#2、根据现有Docker凭证创建密钥" class="headerlink" title="2、根据现有Docker凭证创建密钥"></a>2、根据现有Docker凭证创建密钥</h3><p>Kubernetes集群使用Secret docker-registry类型的密钥通过容器注册表进行身份验证以提取私有映像。如果您已</p>
<p>经运行过docker login，则可以将该凭证复制到Kubernetes中：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">kubectl create secret generic harbor <span class="hljs-string">\</span>    <span class="hljs-comment">#命名为harbor</span><br>    --<span class="hljs-keyword">from</span>-file=.dockerconfigjson=<span class="hljs-regexp">/root/</span>.docker/config.json <span class="hljs-string">\</span><br>    --type=kubernetes.io/dockerconfigjson<br></code></pre></td></tr></table></figure>
<p>如果您需要更多控制权（例如，在新密钥上设置名称空间或标签），则可以在存储密钥之前自定义密钥。</p>
<p>务必：</p>
<p>​    将数据项的名称设置为 .dockerconfigjson</p>
<p>​    base64对docker文件进行编码并粘贴该字符串，将其作为字段的值不间断 data[“.dockerconfigjson”]</p>
<p>​    设置type为kubernetes.io/dockerconfigjson</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">apiVersion</span>: v1<br><span class="hljs-attribute">data</span>:<br>  .<span class="hljs-attribute">dockerconfigjson</span>: eyJhdXRocyI6eyJyZWdpc3RyeS5jbi1oYW5nemhvdS5hbGl5dW5jcy5jb20iOnsicGFzc3dvcmQiOiJFY29uYWdlQGs4cyIsInVzZXJuYW1lIjoiazhzQGVjb25hZ2UifX19<br><span class="hljs-attribute">kind</span>: Secret<br><span class="hljs-attribute">metadata</span>:<br>  <span class="hljs-attribute">name</span>: harbor<br>  <span class="hljs-attribute">namespace</span>: default<br><span class="hljs-attribute">type</span>: kubernetes.io/dockerconfigjson<br></code></pre></td></tr></table></figure>
<p>如果收到错误消息 <code>error: no objects passed to create</code>，这可能意味着 base64 编码的字符串无效。如果您收到的错误类似 <code>Secret &quot;myregistrykey&quot; is invalid: data[.dockerconfigjson]: invalid value ...</code>，这意味着数据已成功地编码为 un-base64，但无法解析为一个 <code>.docker/config.json</code> 文件。</p>
<h3 id="3、在-pod-上引用-imagePullSecrets"><a href="#3、在-pod-上引用-imagePullSecrets" class="headerlink" title="3、在 pod 上引用 imagePullSecrets"></a>3、在 pod 上引用 imagePullSecrets</h3><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">imagePullSecrets:</span><br><span class="hljs-symbol">name:</span> harbor<br></code></pre></td></tr></table></figure>


<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20191213023009033.png" alt="image-20191213023009033"></p>
<h3 id="4、使用-Docker-配置创建一个-Secret"><a href="#4、使用-Docker-配置创建一个-Secret" class="headerlink" title="4、使用 Docker 配置创建一个 Secret"></a>4、使用 Docker 配置创建一个 Secret</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistrykey \<br><span class="hljs-attribute">--docker-server</span>=registry.hello.com <span class="hljs-attribute">--docker-username</span>=admin \<br><span class="hljs-attribute">--docker-password</span>=admin123<br></code></pre></td></tr></table></figure>
<p>Pod 只能引用它们自己命名空间中的镜像拉取 secret，因此，每个命名空间都需要完成一次此过程</p>
<h3 id="5、应用场景"><a href="#5、应用场景" class="headerlink" title="5、应用场景"></a>5、应用场景</h3><p>有许多配置私有仓库的解决方案。以下是一些常见的用例和建议的解决方案。</p>
<p>​    1.集群只运行非专有（例如，开放源码）镜像。不需要隐藏镜像。在 Docker hub 上使用公共镜像</p>
<ul>
<li>​            不需要配置。</li>
<li>​            在 GCE 或 GKE 上，自动使用本地镜像来提高速度和可用性。</li>
</ul>
<p>​    2.集群运行一些私有镜像，这些镜像应该对公司以外用户进行隐藏，但对所有集群用户都是可见的。</p>
<ul>
<li>​            使用托管的 Docker 仓库。它可能托管在 Docker Hub 上，或其它地方。像上面描述的那样在每个节点上手动配置 .docker/config.json。</li>
<li>​            或者，在防火墙后面运行内部私有仓库，并打开读取访问权限。不需要 Kubernetes 配置。</li>
<li>​            或者，在 GCE 或 GKE 上，使用项目的 Google 容器仓库。与手动节点配置相比，集群自动伸缩会更好地工作。</li>
<li>​            或者，在更改节点配置不方便的集群上，使用 imagePullSecrets。</li>
</ul>
<p>​    3.拥有专有镜像的集群，其中一些需要更严格的访问控制。</p>
<ul>
<li>​            确保 AlwaysPullImages 准入控制器 打开。否则，所有 pod 都可能访问所有的镜像。</li>
<li>​            将敏感数据移动到 “Secret” 资源中，而不是将其打包到镜像中。</li>
</ul>
<p>​    4.多租户集群，每个租户都需要自己的私有仓库。</p>
<ul>
<li>​            确保 AlwaysPullImages 准入控制器 打开。否则，所有 pod 都可能访问所有的镜像。</li>
<li>​            运行需要授权的私有仓库。为每个租户生成仓库凭证，将其转换为 secret，并将 secret 填充到每个租户命名空间。</li>
<li>​            租户将该 secret 添加到每个命名空间的 imagePullSecrets 中。</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 弃用 Docker</title>
    <url>/2021/04/06/Kubernetes-%E5%BC%83%E7%94%A8-Docker/</url>
    <content><![CDATA[<p><strong>什么？Kubernetes 决定弃用 Docker？</strong></p>
<p>这是真的。Kubernetes 现已弃用 Docker。</p>
<blockquote>
<p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md</a></p>
</blockquote>
<p>​            目前，kubelet 中的 Docker 支持功能现已弃用，并将在之后的版本中被删除。Kubelet 之前使用的是一个名为 dockershim 的模块，用以实现对 Docker 的 CRI 支持。但 Kubernetes 社区发现了与之相关的维护问题，因此建议大家考虑使用包含 CRI 完整实现（兼容 v1alpha1 或 v1）的可用容器运行时。</p>
<p>​            简而言之，Docker 并不支持 CRI（容器运行时接口）这一 Kubernetes 运行时 API，而 Kubernetes 用户一直以来所使用的其实是名为“dockershim”的桥接服务。Dockershim 能够转换 Docker API 与 CRI，但在后续版本当中，Kubernetes 将不再提供这项桥接服务。</p>
<p>​            当然，Docker 本身也是一款非常强大的工具，可用于创建开发环境。但为了了解造成当前状况的原因，我们需要全面分析 Docker 在现有 Kubernetes 架构中的作用。</p>
<p>​            Kubernetes 是一款基础设施工具，可对多种不同计算资源（例如虚拟 / 物理机）进行分组，使其呈现为统一的巨量计算资源，从而供应用程序使用或与其他人共享。在这样的架构中，Docker（或者容器运行时）仅用于通过 Kubernetes 控制平面进行调度，从而在实际主机内运行应用程序。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617763816h.jpg" alt="1617763816h"><br>通过以上架构图，可以看到每个 Kubernetes 节点都与控制平面彼此通信。各个节点上的 kubelet 获取元数据，并执行 CRI 以在该节点上创建 / 删除容器。</p>
<h2 id="1、但-Docker-为什么会被弃用？"><a href="#1、但-Docker-为什么会被弃用？" class="headerlink" title="1、但 Docker 为什么会被弃用？"></a>1、但 Docker 为什么会被弃用？</h2><hr>
<p>如前所述，Kubernetes 只能与 CRI 通信，因此要与 Docker 通信，就必须使用桥接服务。这就是弃用 Docker 的第一点原因。</p>
<p>要解释下一个原因，我们必须稍微聊聊 Docker 架构。首先参考以下示意图。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617763840j.jpg" alt="1617763840j"><br>没错，Kubernetes 实际上需要保持在红框之内。Docker 网络与存储卷都被排除在外。</p>
<p>而这些用不到的功能本身就可能带来安全隐患。事实上，您拥有的功能越少，攻击面也就越小。</p>
<p>因此，我们需要考虑使用替代方案，即 CRI 运行时。</p>
<p>对于啥是 CRI 运行时？我们暂可以简单的将 Ta 理解为与 Docker 同等的存在（另外一个容器容器运行时）。如下图</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/20201215141919798.png" alt="在这里插入图片描述"></p>
<p>通过上边的图片我们可以看到，K8s 是通过 docker-shim 作为桥接服务，将 CRI 转换为 Docker API，然后与 Dokcer 进行通信的。</p>
<h2 id="2、CRI-是啥？"><a href="#2、CRI-是啥？" class="headerlink" title="2、CRI 是啥？"></a>2、CRI 是啥？</h2><p>​            CRI（Container Runtime Interface）是 K8s 定义的一组与容器运行时进行交互的接口，用于将 K8s 平台与特定的容器实现解耦。在 K8s 早期的版本中，对于容器环境的支持是通过 hard code 方式直接调用 Docker API 的，后来为了支持更多的容器运行时和更精简的容器运行时，K8s 提出了CRI。</p>
<p>CRI 运行时有两个实现方案：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">containerd</span>：<br><span class="hljs-variable">containerd</span> 是 <span class="hljs-variable">Docker</span> 的一部分，提供的 <span class="hljs-variable">CRI</span> 都是由 <span class="hljs-variable">Docker</span> 提供的。<br><br><span class="hljs-variable">CRI</span><span class="hljs-operator">-</span><span class="hljs-built_in">O</span>：<br><span class="hljs-variable">CRI</span><span class="hljs-operator">-</span><span class="hljs-built_in">O</span> 在本质上属于纯 <span class="hljs-variable">CRI</span> 运行时，因此不包含除 <span class="hljs-variable">CRI</span> 之外的任何其他内容。<br></code></pre></td></tr></table></figure>
<h2 id="3、OCI-是啥？"><a href="#3、OCI-是啥？" class="headerlink" title="3、OCI 是啥？"></a>3、OCI 是啥？</h2><p>当我们谈论「容器运行时」时，请注意我们到底是在谈论哪种类型的运行时，这里运行时分为两种：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">CRI</span> 运行时<br>OCI 运行时<br></code></pre></td></tr></table></figure>

<p>​            OCI（Open Container Initiative），可以看做是「容器运行时」的一个标准，Ta 使用 Linux 内核系统调用（例如：cgroups 与命名空间）生成容器，按此标准实现的「容器运行时」有 runC 和 gVisor。</p>
<h2 id="4、CRI、OCI-之间的关系？"><a href="#4、CRI、OCI-之间的关系？" class="headerlink" title="4、CRI、OCI 之间的关系？"></a>4、CRI、OCI 之间的关系？</h2><p>还是通过图片来说明下吧：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/20201215143911327.png" alt="在这里插入图片描述"></p>
<p>实际对容器的操作最终还是要交给 OCI，CRI 也只是个中转</p>
<h2 id="5、CRI-运行时"><a href="#5、CRI-运行时" class="headerlink" title="5、CRI 运行时"></a>5、CRI 运行时</h2><hr>
<p>CRI 运行时的实现方案主要有两种。</p>
<h4 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h4><p>​            如果大家只是想从 Docker 迁移出来，那么 containerd 就是最好的选择。因为它实际上就是在 Docker 之内起效，可以完成所有“运行时”工作，如上图所示。更重要的是，它提供的 CRI 其实 100% 就是由 Docker 所提供。</p>
<p>containerd 还属于全开源软件，因此您可以在 GitHub 上查看说明文档甚至参与项目贡献。</p>
<blockquote>
<p><a href="https://github.com/containerd/containerd/">https://github.com/containerd/containerd/</a></p>
</blockquote>
<h4 id="CRI-O"><a href="#CRI-O" class="headerlink" title="CRI-O"></a>CRI-O</h4><p>​            CRI-O 是主要由 Red Hat 员工开发的 CRI 运行时。它的最大区别在于并不依赖于 Docker，而且目前已经在 Red Hat OpenShift 中得到使用。</p>
<p>有趣的是，RHEL 7 同样不官方支持 Docker。相反，其只为容器环境提供 Podman、Buildah 以及 CRI-O。</p>
<blockquote>
<p><a href="https://github.com/cri-o/cri-o">https://github.com/cri-o/cri-o</a></p>
</blockquote>
<p>​            CRI-O 的优势在于其采用极简风格，或者说它的设计本身就是作为“纯 CRI”运行时存在。不同于作为 Docker 组成部分的 containerd，CRI-O 在本质上属于纯 CRI 运行时、因此不包含除 CRI 之外的任何其他内容。</p>
<p>从 Docker 迁移至 CRI-O 往往更为困难，但无论如何，CRI-O 至少可以支持 Docker 容器在 Kubernetes 上的正常运行。</p>
<p>当我们谈论容器运行时时，请注意我们到底是在谈论哪种类型的运行时。运行时分为两种：CRI 运行时与 OCI 运行时。</p>
<h2 id="6、CRI-运行时"><a href="#6、CRI-运行时" class="headerlink" title="6、CRI 运行时"></a>6、CRI 运行时</h2><p>正如之前所提到，CRI 是 Kubernetes 提供的 API，用于同容器运行时进行通信以创建 / 删除容器化应用程序。</p>
<p>各容器化应用程序作为 kubelet 通过 IPC 在 gRPC 内通信，而且运行时也运行在同一主机之上；CRI 运行时负责从 kubelet 获取请求并执行 OCI 容器运行时以运行容器。稍微有点复杂，接下来我们会用图表来解释。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617689983ff.jpg" alt="1617689983ff"></p>
<p>因此，CRI 运行时将执行以下操作：</p>
<ol>
<li>从 kubelet 获取 gRPC 请求。</li>
<li>根据规范创建 OCIjson 配置。</li>
</ol>
<h2 id="7、OCI-运行时"><a href="#7、OCI-运行时" class="headerlink" title="7、OCI 运行时"></a>7、OCI 运行时</h2><p>OCI 运行时负责使用 Linux 内核系统调用（例如 cgroups 与命名空间）生成容器。您可能听说过 runc 或者 gVisor，这就是了。</p>
<h2 id="附录-1：runC-的工作原理"><a href="#附录-1：runC-的工作原理" class="headerlink" title="附录 1：runC 的工作原理"></a>附录 1：runC 的工作原理</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617690010g.jpg" alt="1617690010g"></p>
<p>CRI 会通过 Linux 系统调用以执行二进制文件，而后 runC 生成容器。这表明 runC 依赖于 Linux 计算机上运行的内核。</p>
<p>​            这也意味着，如果您发现 runC 中的漏洞会使您获得主机 root 权限，那么容器化应用程序同样会造成 root 权限外泄。很明显，恶意黑客会抓住机会入侵主机，引发灾难性的后果。正因为如此，大家才需要不断更新 Docker（或者其他容器运行时），而不仅仅是更新容器化应用程序本身。</p>
<h2 id="附录-2：gVisor-工作原理"><a href="#附录-2：gVisor-工作原理" class="headerlink" title="附录 2：gVisor 工作原理"></a>附录 2：gVisor 工作原理</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617690035h.jpg" alt="1617690035h"></p>
<p>​            gVisor 是最初由谷歌员工创建的 OCI 运行时。它实际上运行在承载各类谷歌云服务（包括 Google Cloud Run、Google App Engine 以及 Google Cloud Functions）的同一套基础设施之上。</p>
<p>​            有趣的是，gVisor 中包含一个“访客内核”层，意味着容器化应用程序无法直接接触到主机内核层。即使是应用程序“认为”自己接触到了，实际接触到的也只是 gVisor 的访客内核。</p>
<p>gVisor 的安全模式非常有趣，这里建议大家参阅官方说明文档。</p>
<blockquote>
<p><a href="https://gvisor.dev/docs/">https://gvisor.dev/docs/</a></p>
</blockquote>
<p>gVisor 与 runC 的显著差别如下：</p>
<ul>
<li>性能更差</li>
<li>Linux 内核层并非 100% 兼容：参见官方文档中的兼容性部分</li>
<li>不受默认支持</li>
</ul>
<blockquote>
<p><a href="https://gvisor.dev/docs/user_guide/compatibility/">https://gvisor.dev/docs/user_guide/compatibility/</a></p>
</blockquote>
<h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><hr>
<p><strong>1.Docker 确被弃用，大家应该开始考虑使用 CRI 运行时，例如 containerd 与 CRI-O。</strong></p>
<p>a.containerd 与 Docker 相兼容，二者共享相同的核心组件。</p>
<p>b. 如果您主要使用 Kubernetes 的最低功能选项，CRI-O 可能更为适合。</p>
<p><strong>2.明确理解 CRI 运行时与 OCI 运行时之间的功能与作用范围差异。</strong></p>
<p>根据您的实际工作负载与业务需求，runC 可能并不总是最好的选择，请酌情做出考量！</p>
<p>译文链接：</p>
<blockquote>
<p><a href="https://dev.to/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m">https://dev.to/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes上安装Calico</title>
    <url>/2021/03/17/Kubernetes%E4%B8%8A%E5%AE%89%E8%A3%85Calico/</url>
    <content><![CDATA[<h2 id="1、使用以下命令初始化主机"><a href="#1、使用以下命令初始化主机" class="headerlink" title="1、使用以下命令初始化主机"></a>1、使用以下命令初始化主机</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> init --pod-network-cidr=<span class="hljs-number">192.168.0.0</span>/<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure>
<p>初始化成功截图如下：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424155104307.png" alt="image-20200424155104307"></p>
<h2 id="2、执行以下命令来配置kubectl"><a href="#2、执行以下命令来配置kubectl" class="headerlink" title="2、执行以下命令来配置kubectl"></a>2、执行以下命令来配置kubectl</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo cp -i <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/admin.conf $HOME/</span>.kube/config<br>sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/.kube/</span>config<br></code></pre></td></tr></table></figure>
<h2 id="3、使用以下命令安装Calico"><a href="#3、使用以下命令安装Calico" class="headerlink" title="3、使用以下命令安装Calico"></a>3、使用以下命令安装Calico</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/manifests/</span>calico.yaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424155306261.png" alt="image-20200424155306261"></p>
<h2 id="4、使用以下命令确认所有Pod正在运行"><a href="#4、使用以下命令确认所有Pod正在运行" class="headerlink" title="4、使用以下命令确认所有Pod正在运行"></a>4、使用以下命令确认所有Pod正在运行</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-comment">--all-namespaces</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424155448673.png" alt="image-20200424155448673"></p>
<h2 id="5、移除master的污点"><a href="#5、移除master的污点" class="headerlink" title="5、移除master的污点"></a>5、移除master的污点</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">kubectl taint nodes --all <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-literal">master</span>-<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424155600490.png" alt="image-20200424155600490"></p>
<h2 id="6、使用以下命令确认集群中现在有一个节点"><a href="#6、使用以下命令确认集群中现在有一个节点" class="headerlink" title="6、使用以下命令确认集群中现在有一个节点"></a>6、使用以下命令确认集群中现在有一个节点</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">kubectl get <span class="hljs-keyword">node</span> <span class="hljs-title">-o</span> wide<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200424155645547.png" alt="image-20200424155645547"></p>
<p>配备Calico的单主机Kubernetes集群完成。</p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装Ingress</title>
    <url>/2021/03/18/Kubernetes%E5%AE%89%E8%A3%85Ingress/</url>
    <content><![CDATA[<h2 id="1、Ingress-介绍"><a href="#1、Ingress-介绍" class="headerlink" title="1、Ingress 介绍"></a>1、Ingress 介绍</h2><p>​    ingress是一个kubernetes资源，可让你为运行在kubernetes上的应用程序（由一个或多个<a href="https://kubernetes.io/docs/concepts/services-networking/service/">Services</a>表示）配置HTTP负载平衡器。这样的负载平衡器对于将这些应用程序交付给Kubernetes集群之外的客户端是必需的</p>
<p>ingress支持以下的路由：</p>
<p>​    基于主机域名的路由</p>
<p>​    基于服务路径的路由</p>
<h2 id="2、Ingress-Controller"><a href="#2、Ingress-Controller" class="headerlink" title="2、Ingress Controller"></a>2、Ingress Controller</h2><p>​    Ingress  Controller是在群集中运行的应用程序，可根据Ingress资源配置HTTP负载平衡器。负载平衡器可以是群集中运行的软件负载平衡器，也可以是外部运行的硬件或云负载平衡器。不同的负载平衡器需要不同的Ingress    Controller实现。</p>
<h2 id="3、安装NGINX-Ingress-Controller"><a href="#3、安装NGINX-Ingress-Controller" class="headerlink" title="3、安装NGINX Ingress Controller"></a>3、安装NGINX Ingress Controller</h2><p>拉取yaml文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/nginxinc/</span>kubernetes-ingress/<br>cd kubernetes-ingress / deployments<br>git checkout v1.<span class="hljs-number">7.0</span><br></code></pre></td></tr></table></figure>
<h3 id="3-1-配置RBAC"><a href="#3-1-配置RBAC" class="headerlink" title="3.1 配置RBAC"></a>3.1 配置RBAC</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> common/ns<span class="hljs-operator">-and</span><span class="hljs-literal">-sa</span>.yaml         <span class="hljs-comment">#为Ingress控制器创建名称空间和服务帐户</span><br>kubectl apply <span class="hljs-operator">-f</span> rbac/rbac.yaml                <span class="hljs-comment">#为服务帐户创建集群角色和集群角色绑定</span><br></code></pre></td></tr></table></figure>
<h3 id="3-2-创建公共资源"><a href="#3-2-创建公共资源" class="headerlink" title="3.2 创建公共资源"></a>3.2 创建公共资源</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">kubectl apply -f <span class="hljs-keyword">common</span>/<span class="hljs-literal">default</span>-<span class="hljs-keyword">server</span>-secret.yaml          <span class="hljs-meta">#创建一个包含TLS证书和密钥的密钥</span><br>kubectl apply -f <span class="hljs-keyword">common</span>/nginx-config.yaml                   <span class="hljs-meta">#用于自定义NGINX配置的配置图</span><br><span class="hljs-meta">#为VirtualServer和VirtualServerRoute和TransportServer资源创建自定义资源定义</span><br>kubectl apply -f <span class="hljs-keyword">common</span>/vs-definition.yaml<br>kubectl apply -f <span class="hljs-keyword">common</span>/vsr-definition.yaml<br>kubectl apply -f <span class="hljs-keyword">common</span>/ts-definition.yaml<br></code></pre></td></tr></table></figure>
<h3 id="3-3-使用Ingress-Controller的TCP和UDP负载平衡功能，请创建以下附加资源："><a href="#3-3-使用Ingress-Controller的TCP和UDP负载平衡功能，请创建以下附加资源：" class="headerlink" title="3.3  使用Ingress Controller的TCP和UDP负载平衡功能，请创建以下附加资源："></a>3.3  使用Ingress Controller的TCP和UDP负载平衡功能，请创建以下附加资源：</h3><p>​    <strong>功能状态</strong>：TransportServer和GlobalConfiguration资源可作为预览功能使用：它适合进行实验和测试；但是，在生产环境中必须谨慎使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> common/<span class="hljs-built_in">gc</span><span class="hljs-literal">-definition</span>.yaml            <span class="hljs-comment">#为GlobalConfiguration资源创建一个自定义资源定义</span><br>kubectl apply <span class="hljs-operator">-f</span> common/global<span class="hljs-literal">-configuration</span>.yaml     <span class="hljs-comment">#创建一个GlobalConfiguration资源</span><br></code></pre></td></tr></table></figure>
<h3 id="3-4-使用Deploy部署Ingress-Controller"><a href="#3-4-使用Deploy部署Ingress-Controller" class="headerlink" title="3.4  使用Deploy部署Ingress Controller"></a>3.4  使用Deploy部署Ingress Controller</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">kubectl apply -f deployment/nginx-ingress.yaml<br>kubectl <span class="hljs-keyword">get</span> pod -n nginx-ingress           <span class="hljs-comment">#查看是否运行成功</span><br></code></pre></td></tr></table></figure>
<h3 id="3-5-为Ingress-Controller-Pod创建服务"><a href="#3-5-为Ingress-Controller-Pod创建服务" class="headerlink" title="3.5  为Ingress Controller Pod创建服务"></a>3.5  为Ingress Controller Pod创建服务</h3><figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">kubectl</span> create -f service/node<span class="hljs-keyword">port</span>.yaml<br></code></pre></td></tr></table></figure>
<h3 id="3-6-卸载相关应用"><a href="#3-6-卸载相关应用" class="headerlink" title="3.6  卸载相关应用"></a>3.6  卸载相关应用</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">delete</span> <span class="hljs-keyword">namespace</span> nginx-ingress<br>kubectl <span class="hljs-keyword">delete</span> clusterrole nginx-ingress<br>kubectl <span class="hljs-keyword">delete</span> clusterrolebinding nginx-ingress<br></code></pre></td></tr></table></figure>
<h2 id="4、使用helm安装"><a href="#4、使用helm安装" class="headerlink" title="4、使用helm安装"></a>4、使用helm安装</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">helm repo <span class="hljs-keyword">add</span> nginx-<span class="hljs-keyword">stable</span> https://helm.nginx.com/<span class="hljs-keyword">stable</span><br>helm repo <span class="hljs-keyword">update</span><br>helm install nginx nginx-<span class="hljs-keyword">stable</span>/nginx-ingress<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200515152022370.png" alt="image-20200515152022370"></p>
<p>查看svc会发现状态时pending，需要修改type为NodePort</p>
<h2 id="5、使用hostnetwork"><a href="#5、使用hostnetwork" class="headerlink" title="5、使用hostnetwork"></a>5、使用hostnetwork</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">edit</span> deploy -n dev nginx-nginx-ingress<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200522104002138.png" alt="image-20200522104002138"></p>
<p>修改完成后，重启成功在宿主机telnet   宿主机IP加ingress的nodeport，能通则说名成功了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200522105048235.png" alt="image-20200522105048235"></p>
<h2 id="6、配置本地访问"><a href="#6、配置本地访问" class="headerlink" title="6、配置本地访问"></a>6、配置本地访问</h2><h3 id="6-1-部署一个deploy和svc"><a href="#6-1-部署一个deploy和svc" class="headerlink" title="6.1  部署一个deploy和svc"></a>6.1  部署一个deploy和svc</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span>  <span class="hljs-string">test.yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-service</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">nodePort:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-tomcat</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/kubeguide/tomcat-app:v1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span> <span class="hljs-comment">#Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure>
<h3 id="6-2-创建ingress"><a href="#6-2-创建ingress" class="headerlink" title="6.2  创建ingress"></a>6.2  创建ingress</h3><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">apiVersion</span>: extensions/v1beta1<br><span class="hljs-attribute">kind</span>: Ingress<br><span class="hljs-attribute">metadata</span>:<br>  <span class="hljs-attribute">name</span>: tomcat-ingress<br>  <span class="hljs-attribute">annotations</span>:<br>    kubernetes.io/ingress.<span class="hljs-attribute">class</span>: <span class="hljs-string">&quot;nginx&quot;</span><br><span class="hljs-attribute">spec</span>:<br>  <span class="hljs-attribute">rules</span>:<br>  - <span class="hljs-attribute">host</span>: hello.hello.com<br>    <span class="hljs-attribute">http</span>:<br>      <span class="hljs-attribute">paths</span>:<br>      - <span class="hljs-attribute">path</span>: /<br>        <span class="hljs-attribute">backend</span>:<br>          <span class="hljs-attribute">serviceName</span>: test-service<br>          <span class="hljs-attribute">servicePort</span>: <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure>
<p>查询创建的ingress</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> ing<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200522111429336.png" alt="image-20200522111429336"></p>
<p>因为 ingress 中设置了域名 hello.hello.com，所以需要在浏览器所在的机器上设置 dns。我的IP是192.168.10.11</p>
<p>确定ingress的对外端口</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200522111636797.png" alt="image-20200522111636797"></p>
<p>在浏览器访问：hello.hello.com:30042,我这里是在宿主机curl，即可以看见tomcat的环境界面了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200522111758651.png" alt="image-20200522111758651"></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes架构工作原理</title>
    <url>/2021/04/06/Kubernetes%E6%9E%B6%E6%9E%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​            对于每个想落地kubernetes应用的工程师来说，熟悉kubernetes的架构和工作原理是必经之路，也是必须知道的知识，只有了解kubernetes的架构和工作原理才能更好的应用kubernetes 。</p>
<p><strong>kubernetes 整体架构</strong><br>            Kubernetes最初源于谷歌内部的Borg，提供了面向应用的容器集群部署和管理系统，所以整体的架构和borg很相似，整个架构有api server，control manager，scheduler，etcd，kubelet，kube-proxy，network-plugin等相关组件完成，整体架构如下：<br><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617676a379.jpg" alt="1617676a379"></p>
<h2 id="二、各组件功能："><a href="#二、各组件功能：" class="headerlink" title="二、各组件功能："></a>二、各组件功能：</h2><p><strong>一）、Api server,Control manager,Scheduler,Etcd属于master节点，相关组件功能如下：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">1<span class="hljs-selector-class">.Etcd</span>：保存了整个集群的状态；<br><br>2<span class="hljs-selector-class">.Apiserver</span>：提供了资源操作的唯一入口，并提供认证、授权、访问控制、<span class="hljs-selector-tag">API</span>注册和发现等机制；<br><br>3<span class="hljs-selector-class">.Controller</span> <span class="hljs-selector-tag">manager</span>：负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；<br><br>4<span class="hljs-selector-class">.Scheduler</span>：负责资源的调度，按照预定的调度策略将<span class="hljs-selector-tag">Pod</span>调度到相应的机器上；<br></code></pre></td></tr></table></figure>
<p><strong>二）、Kubelet,Container runtine,Kube-proxy属于woker节点，相关组件功能如下：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">1<span class="hljs-selector-class">.kubelet</span>：负责维护容器的生命周期，同时也负责<span class="hljs-selector-tag">Volume</span>（<span class="hljs-selector-tag">CSI</span>）和网络（<span class="hljs-selector-tag">CNI</span>）的管理；<br><br>2<span class="hljs-selector-class">.Container</span> <span class="hljs-selector-tag">runtime</span>：负责镜像管理以及<span class="hljs-selector-tag">Pod</span>和容器的真正运行（<span class="hljs-selector-tag">CRI</span>）；<br><br>3<span class="hljs-selector-class">.kube-proxy</span>：负责为<span class="hljs-selector-tag">Service</span>提供<span class="hljs-selector-tag">cluster</span>内部的服务发现和负载均衡；<br></code></pre></td></tr></table></figure>
<h2 id="三、kubernetes-工作原理"><a href="#三、kubernetes-工作原理" class="headerlink" title="三、kubernetes 工作原理"></a>三、kubernetes 工作原理</h2><p><strong>kubernetes的整个工作流程图：</strong><br><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617676436s.jpg" alt="1617676436s"><br><strong>下面为一个个pod创建过程：</strong></p>
<p>1.用户提交创建Pod的请求，可以通过API Server的REST API ，也可用Kubectl命令行工具，支持Json和Yaml两种格式；</p>
<p>2.API Server处理用户请求，存储Pod数据到etcd；</p>
<p>3.Schedule通过和API Server的watch机制，查看到新的Pod，尝试为Pod绑定Node；</p>
<p>4.过滤主机：调度器用一组规则过滤掉不符合要求的主机，比如Pod指定了所需要的资源，那么就要过滤掉资源不够的主机；</p>
<p>5.主机打分：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等；</p>
<p>6.选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中；</p>
<p>7.Kubelet根据调度结果执行Pod创建操作： 绑定成功后，会启动container，docker run，scheduler会调用API在数据库etcd中创建一个bound pod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的Kubelet也会定期与etcd同步bound pod信息，一旦发现应该在该工作节点上运行的bound pod对象没有更新，则调用Docker API创建并启动pod内的容器；<br><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1617676461d.jpg" alt="1617676461d"><br>在这期间，Control Manager同时会根据kubernetes的mainfiles文件执行rc pod的数量来保证指定的pod副本数。而其他的组件，比如scheduler负责pod绑定的调度，从而完成整个pod的创建。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux二进制软件包安装Mysql8主从复制</title>
    <url>/2021/01/05/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%AE%89%E8%A3%85Mysql8%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h3 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h3><p>wget  <a href="https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.18-el7-x86_64.tar.gz">https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.18-el7-x86_64.tar.gz</a></p>
<h3 id="2、删除系统自带"><a href="#2、删除系统自带" class="headerlink" title="2、删除系统自带"></a>2、删除系统自带</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -qa |grep  mysql<br><span class="hljs-attribute">rpm</span> -qa |grep mariadb<br><span class="hljs-attribute">rpm</span> -e --nodeps mariadb-libs-<span class="hljs-number">5</span>.<span class="hljs-number">5</span>.<span class="hljs-number">60</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>_<span class="hljs-number">5</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure>
<h3 id="3、初始化数据库"><a href="#3、初始化数据库" class="headerlink" title="3、初始化数据库"></a>3、初始化数据库</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">groupadd</span> mysql<br><span class="hljs-attribute">useradd</span> -r -g mysql -s /bin/false mysql<br><span class="hljs-attribute">cd</span> /usr/local<br><span class="hljs-attribute">tar</span> xvf mysql-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">18</span>-el<span class="hljs-number">7</span>-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.tar.gz<br><span class="hljs-attribute">ln</span> -s mysql-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">18</span>-el<span class="hljs-number">7</span>-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> mysql<br><span class="hljs-attribute">cd</span> mysql<br><span class="hljs-attribute">mkdir</span> mysql-files<br><span class="hljs-attribute">chown</span> mysql:mysql mysql-files<br><span class="hljs-attribute">chmod</span> <span class="hljs-number">750</span> mysql-files<br><span class="hljs-attribute">bin</span>/mysqld --initialize --user=mysql<br><span class="hljs-attribute">bin</span>/mysql_ssl_rsa_setup<br><span class="hljs-attribute">bin</span>/mysqld_safe --user=mysql &amp;<br><span class="hljs-attribute">cp</span> support-files/mysql.server /etc/init.d/mysql.server<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226160516781.png" alt="image-20191226160516781"></p>
<p>记住数据库的密码</p>
<h3 id="4、修改配置文件"><a href="#4、修改配置文件" class="headerlink" title="4、修改配置文件"></a>4、修改配置文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">cat /etc/my.cnf<br><br>[mysqld]<br>log-<span class="hljs-built_in">bin</span>=master-<span class="hljs-built_in">bin</span>    <span class="hljs-comment">#master是master-bin，slave的是slave-bin</span><br>server-<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>           <span class="hljs-comment">#master为1，slave2</span><br><br><span class="hljs-comment">#关闭命令</span><br><span class="hljs-built_in">bin</span>/mysqladmin -u root -p  shutdown<br><span class="hljs-comment">#启动命令</span><br><span class="hljs-built_in">bin</span>/mysqld_safe --user=mysql &amp;<br></code></pre></td></tr></table></figure>
<h3 id="5、设置环境变量："><a href="#5、设置环境变量：" class="headerlink" title="5、设置环境变量："></a>5、设置环境变量：</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cat  <span class="hljs-regexp">/etc/</span>profile.d/msyql.sh<br><br>MYSQL_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span><br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MYSQL_HOME</span>/bin<br></code></pre></td></tr></table></figure>
<h3 id="6、修改随机密码："><a href="#6、修改随机密码：" class="headerlink" title="6、修改随机密码："></a>6、修改随机密码：</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">mysql  -u root  -p    <span class="hljs-comment">#输入初始化随机生成的密码</span><br>ALTER <span class="hljs-keyword">USER</span> <span class="hljs-title">&#x27;root</span>&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;hello123&#x27;;<br>show <span class="hljs-keyword">master</span> <span class="hljs-title">status</span>;      <span class="hljs-comment">#查看master状态</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226161712968.png" alt="image-20191226161712968"></p>
<h3 id="7、为主从复制创建用户"><a href="#7、为主从复制创建用户" class="headerlink" title="7、为主从复制创建用户"></a>7、为主从复制创建用户</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;econage&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;hello123&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">REPLICATION</span> SLAVE <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> econage@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password,把mysql用户登录密码加密规则还原成mysql_native_password. 不然会报错如下<br><br>error connecting <span class="hljs-keyword">to</span> master <span class="hljs-string">&#x27;econage@192.168.0.56:3306&#x27;</span> - retry-<span class="hljs-type">time</span>: <span class="hljs-number">60</span> retries: <span class="hljs-number">1</span> message: Authentication plugin <span class="hljs-string">&#x27;caching_sha2_password&#x27;</span> reported error: Authentication requires secure <span class="hljs-keyword">connection</span>.<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;econage&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;hello123&#x27;</span>;    #添加这一条命令即可<br><br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br></code></pre></td></tr></table></figure>
<p>如果禁用了二进制日志记录，请在创建用户后立即通过发出以下语句再次启用它：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">SQL_LOG_BIN</span>=1;<br></code></pre></td></tr></table></figure>
<h3 id="8、查看连接是否正确："><a href="#8、查看连接是否正确：" class="headerlink" title="8、查看连接是否正确："></a>8、查看连接是否正确：</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>   -ueconage   -phello<span class="hljs-number">123</span>  -h<span class="hljs-number">192.168.0.56</span>   -e   &#x27;status;&#x27;<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226172818003.png" alt="image-20191226172818003"></p>
<h3 id="9、在slave进行连接master："><a href="#9、在slave进行连接master：" class="headerlink" title="9、在slave进行连接master："></a>9、在slave进行连接master：</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">CHANGE MASTER <span class="hljs-keyword">TO</span><br>  <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;192.168.0.56&#x27;</span>,           #master主机ip<br>  <span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;econage&#x27;</span>,  				#上面创建的用户<br>  <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;hello123&#x27;</span>,			#用户密码<br>  <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;master-bin.000002&#x27;</span>,	#master的file文件名<br>  <span class="hljs-attribute">MASTER_LOG_POS</span>=474;					# master的Position号<br></code></pre></td></tr></table></figure>
<p>查看</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">show  <span class="hljs-literal">slave</span>  status\G      <span class="hljs-comment">#可能会状态不对，执行下面命令</span><br><span class="hljs-literal">stop</span>  <span class="hljs-literal">slave</span>；<br><span class="hljs-literal">start</span>  <span class="hljs-literal">slave</span>；<br></code></pre></td></tr></table></figure>
<p>再查看</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226201513037.png" alt="image-20191226201513037"></p>
<p>显示两个yes则正确。</p>
<h3 id="9、验证"><a href="#9、验证" class="headerlink" title="9、验证"></a>9、验证</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">show</span>   databases；      <span class="hljs-meta">#分别在master和slave查看</span><br><span class="hljs-meta">#在master去创建一个库</span><br><span class="hljs-keyword">create</span>  database  hello   <span class="hljs-meta">#会发现slave上也有一个hello的库</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>关系型数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装elasticsearch</title>
    <url>/2021/01/20/Linux%E5%AE%89%E8%A3%85elasticsearch/</url>
    <content><![CDATA[<h2 id="1、准备Java环境"><a href="#1、准备Java环境" class="headerlink" title="1、准备Java环境"></a>1、准备Java环境</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">tar xvf jdk-<span class="hljs-number">8</span>u231-linux-x64.tar.gz -C <span class="hljs-regexp">/usr/</span>local/<br>mv jdk1.<span class="hljs-number">8.0</span>_231 java<br><br>vim <span class="hljs-regexp">/etc/</span>profile.d/java<br>export JAVA_HOME=<span class="hljs-regexp">/usr/</span>local/java<br>export PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br>source <span class="hljs-regexp">/etc/</span>profile.d/java<br>java -version<br></code></pre></td></tr></table></figure>
<h2 id="2、安装es"><a href="#2、安装es" class="headerlink" title="2、安装es"></a>2、安装es</h2><h3 id="2-1-创建用户和数据存放目录"><a href="#2-1-创建用户和数据存放目录" class="headerlink" title="2.1 创建用户和数据存放目录"></a>2.1 创建用户和数据存放目录</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">useradd elk<br>passwd elk<br>mkdir <span class="hljs-regexp">/opt/</span>esdata<br>chown -R elk:elk <span class="hljs-regexp">/opt/</span><br></code></pre></td></tr></table></figure>
<h3 id="2-2配置系统参数"><a href="#2-2配置系统参数" class="headerlink" title="2.2配置系统参数"></a>2.2配置系统参数</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> /etc/security/limits.conf<br><br><span class="hljs-attribute">elk</span> hard nofile <span class="hljs-number">65536</span><br><span class="hljs-attribute">elk</span> soft nofile <span class="hljs-number">65536</span><br></code></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/sysctl.<span class="hljs-keyword">conf</span><br><br><span class="hljs-keyword">vm</span>.max_map_count = <span class="hljs-number">655360</span><br><br>sysctl -<span class="hljs-keyword">p</span><br></code></pre></td></tr></table></figure>
<h3 id="2-3安装es"><a href="#2-3安装es" class="headerlink" title="2.3安装es"></a>2.3安装es</h3><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">xvf</span> <span class="hljs-selector-tag">elasticsearch-6</span>.5.3<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-selector-tag">-C</span> /<span class="hljs-selector-tag">opt</span>/<br><br><span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">jvm</span><span class="hljs-selector-class">.options</span><br><br><span class="hljs-selector-tag">-Xms8g</span><br><span class="hljs-selector-tag">-Xmx8g</span>     #实际内存的50%<br><br><span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">elasticsearch</span><span class="hljs-selector-class">.yml</span><br><br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.name</span>: <span class="hljs-selector-tag">elk</span>    #集群模式这里必须相同<br><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.name</span>: <span class="hljs-selector-tag">elk01</span><br># 自定义属性添加到节点上<br><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.attr</span><span class="hljs-selector-class">.rack</span>: <span class="hljs-selector-tag">r1</span><br><br><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.master</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-id">#node</span><span class="hljs-selector-class">.voting_only</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.data</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-id">#node</span><span class="hljs-selector-class">.ingest</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-id">#node</span><span class="hljs-selector-class">.ml</span>: <span class="hljs-selector-tag">false</span><br>#开启监控<span class="hljs-selector-tag">xpack</span><br><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.monitoring</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">true</span><br>#机器学习关闭<br><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.ml</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">false</span><br># 是否使用<span class="hljs-selector-tag">http</span>协议对外提供服务，默认为<span class="hljs-selector-tag">true</span>，开启<br><span class="hljs-selector-id">#http</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">true</span><br><br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.connect</span>: <span class="hljs-selector-tag">false</span><br><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.data</span>: /<span class="hljs-selector-tag">data01</span>/<span class="hljs-selector-tag">elasticsearch</span>/<span class="hljs-selector-tag">lib</span><br><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.logs</span>: /<span class="hljs-selector-tag">data01</span>/<span class="hljs-selector-tag">elasticsearch</span>/<span class="hljs-selector-tag">logs</span><br>#锁定物理内存地址，防止<span class="hljs-selector-tag">es</span>内存被交换出去，也就是避免<span class="hljs-selector-tag">es</span>使用<span class="hljs-selector-tag">swap</span>交换分区，频繁的交换，会导致<span class="hljs-selector-tag">IOPS</span>变高<br><span class="hljs-selector-tag">bootstrap</span><span class="hljs-selector-class">.memory_lock</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.host</span>: 192.168.88.128<br><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.port</span>: 9200<br>#<span class="hljs-selector-id">#discovery</span><span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.ping</span><span class="hljs-selector-class">.unicast</span><span class="hljs-selector-class">.hosts</span>旧版配置<br><span class="hljs-selector-tag">discovery</span><span class="hljs-selector-class">.seed_hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;192.168.88.128&quot;</span>,<span class="hljs-string">&quot;192.168.99.92&quot;</span>,<span class="hljs-string">&quot;192.168.99.93&quot;</span>]</span><br><span class="hljs-selector-id">#Elasticsearch7</span>新增参数，写入候选主节点的设备地址，来开启服务时就可以被选为主节点<br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.initial_master_nodes</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;192.168.88.128&quot;</span>,<span class="hljs-string">&quot;192.168.99.92&quot;</span>,<span class="hljs-string">&quot;192.168.99.93&quot;</span>]</span><br># 设置集群中<span class="hljs-selector-tag">N</span>个节点启动时进行数据恢复，默认为1。<br><span class="hljs-selector-tag">gateway</span><span class="hljs-selector-class">.recover_after_nodes</span>: 1<br>#设置是否可以通过正则或者_<span class="hljs-selector-tag">all</span>删除或者关闭索引<br><span class="hljs-selector-tag">action</span><span class="hljs-selector-class">.destructive_requires_name</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">discovery</span><span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.minimum_master_nodes</span>: 1   <span class="hljs-selector-id">#node</span><span class="hljs-selector-class">.master</span>数量/2+1<br><span class="hljs-selector-tag">indices</span><span class="hljs-selector-class">.fielddata</span><span class="hljs-selector-class">.cache</span><span class="hljs-selector-class">.size</span>: 20%     #内存回收机制<br><br><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.no_delay</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.keep_alive</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.reuse_address</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.send_buffer_size</span>: 128<span class="hljs-selector-tag">mb</span><br><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.receive_buffer_size</span>: 128<span class="hljs-selector-tag">mb</span><br><span class="hljs-selector-id">#transport</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.port</span>: 9301<br><span class="hljs-selector-tag">transport</span><span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.compress</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.max_content_length</span>: 200<span class="hljs-selector-tag">mb</span><br>#开启跨域访问<br><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">true</span><br><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: &quot;*&quot;<br><br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.fault_detection</span><span class="hljs-selector-class">.leader_check</span><span class="hljs-selector-class">.interval</span>: 15<span class="hljs-selector-tag">s</span><br><span class="hljs-selector-tag">discovery</span><span class="hljs-selector-class">.cluster_formation_warning_timeout</span>: 30<span class="hljs-selector-tag">s</span><br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.join</span><span class="hljs-selector-class">.timeout</span>: 120<span class="hljs-selector-tag">s</span><br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.publish</span><span class="hljs-selector-class">.timeout</span>: 90<span class="hljs-selector-tag">s</span><br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.routing</span><span class="hljs-selector-class">.allocation</span><span class="hljs-selector-class">.cluster_concurrent_rebalance</span>: 16<br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.routing</span><span class="hljs-selector-class">.allocation</span><span class="hljs-selector-class">.node_concurrent_recoveries</span>: 16<br><span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.routing</span><span class="hljs-selector-class">.allocation</span><span class="hljs-selector-class">.node_initial_primaries_recoveries</span>: 16<br><br><span class="hljs-selector-id">#6</span>/5新增<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.write</span><span class="hljs-selector-class">.size</span>: 5<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.write</span><span class="hljs-selector-class">.queue_size</span>: 400<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.size</span>: 7<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.queue_size</span>: 300<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.min_queue_size</span>: 5<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.max_queue_size</span>: 500<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.auto_queue_frame_size</span>: 1000<br><span class="hljs-selector-tag">thread_pool</span><span class="hljs-selector-class">.search</span><span class="hljs-selector-class">.target_response_time</span>: 3<span class="hljs-selector-tag">s</span><br></code></pre></td></tr></table></figure>
<p>命令</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#调整index的merge过程的并发度</span><br>curl -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -XPUT <span class="hljs-string">&#x27;http://localhost:9200/_all/_settings?preserve_existing=true&#x27;</span> -d <span class="hljs-string">&#x27;&#123;&quot;index.merge.scheduler.max_thread_count&quot; : &quot;1&quot;&#125;&#x27;</span><br><br><span class="hljs-meta">#提高refresh的时间间隔，降低系统开销</span><br>curl -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -XPUT <span class="hljs-string">&#x27;http://localhost:9200/_all/_settings?preserve_existing=true&#x27;</span> -d <span class="hljs-string">&#x27;&#123;&quot;index.refresh_interval&quot; : &quot;30s&quot;&#125;&#x27;</span><br><br><span class="hljs-meta">#查看es集群状态</span><br>curl <span class="hljs-string">&#x27;http://localhost:9200/_cluster/health?pretty&#x27;</span><br><br><span class="hljs-meta">#查看es所有索引</span><br>curl <span class="hljs-string">&#x27;http://localhost:9200/_cat/indices?v&#x27;</span><br><br><br><span class="hljs-meta">#查看集群所在磁盘的分配状况</span><br>curl <span class="hljs-string">&#x27;http://127.0.0.1:9200/_cat/allocation?v&#x27;</span><br><span class="hljs-meta">#分片数（shards）:集群中各节点的分片数相同</span><br><span class="hljs-meta">#索引所占空间（disk.indices）:该节点中所有索引在该磁盘所点的空间。</span><br><span class="hljs-meta">#磁盘使用容量（disk.used）:已经使用空间</span><br><span class="hljs-meta">#磁盘可用容量（disk.avail）:可用空间</span><br><span class="hljs-meta">#磁盘总容量（disk.total）:总共容量</span><br><span class="hljs-meta">#磁盘便用率（disk.percent）:磁盘使用率</span><br><br><span class="hljs-meta">#查看节点信息</span><br>curl -XGET <span class="hljs-string">&quot;http://localhost:9200/_cat/nodes?v&amp;pretty&quot;</span><br><br><span class="hljs-meta">#查看分片信息</span><br>curl -XGET <span class="hljs-string">&quot;http://localhost:9200/_cat/shards?v&amp;pretty&quot;</span><br><br><span class="hljs-meta">#查看集群静态信息</span><br>curl -XGET <span class="hljs-string">&#x27;http://localhost:9200/_cluster/stats?pretty=true&#x27;</span><br><br><span class="hljs-meta">#删除索引</span><br>curl -XDELETE <span class="hljs-string">&#x27;http://localhost:9200/app-2019.05,app-2019.05&#x27;</span><br><br><span class="hljs-meta">#查询es当前线程</span><br>curl -XGET <span class="hljs-string">&#x27;http://localhost:9200/_nodes/stats/thread_pool?pretty&#x27;</span><br><br></code></pre></td></tr></table></figure>
<h2 id="3、-logstash调优"><a href="#3、-logstash调优" class="headerlink" title="3、 logstash调优"></a>3、 logstash调优</h2><p>​    当batch.size增大，es处理的事件数就会变少，写入也就越快了。具体的worker/output.workers数量建议等于CPU数，batch.size/batch.delay根据实际的数据量逐渐增大来测试最优值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">pipeline</span><span class="hljs-selector-class">.workers</span>: 24<br><span class="hljs-selector-tag">pipeline</span><span class="hljs-selector-class">.output</span><span class="hljs-selector-class">.workers</span>: 24<br><span class="hljs-selector-tag">pipeline</span><span class="hljs-selector-class">.batch</span><span class="hljs-selector-class">.size</span>: 10000<br><span class="hljs-selector-tag">pipeline</span><span class="hljs-selector-class">.batch</span><span class="hljs-selector-class">.delay</span>: 10<br></code></pre></td></tr></table></figure>
<p>配置参考：<a href="https://www.iteye.com/blog/shihlei-2418651">https://www.iteye.com/blog/shihlei-2418651</a></p>
]]></content>
      <categories>
        <category>Elk</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux（centos）服务器环境通用优化</title>
    <url>/2021/01/05/Linux%EF%BC%88centos%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%80%9A%E7%94%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>建议服务器内存在8G或以上</p>
<h3 id="1、内核参数优化"><a href="#1、内核参数优化" class="headerlink" title="1、内核参数优化"></a>1、内核参数优化</h3><h4 id="1）备份："><a href="#1）备份：" class="headerlink" title="1）备份："></a>1）备份：</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/etc/</span>sysctl.conf <span class="hljs-regexp">/etc/</span>sysctl.conf.bak<br></code></pre></td></tr></table></figure>
<h4 id="2）添加内容："><a href="#2）添加内容：" class="headerlink" title="2）添加内容："></a>2）添加内容：</h4><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vi</span>  /etc/sysctl.conf<br><span class="hljs-comment">#网络性能调优</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_syncookies = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_mem = <span class="hljs-number">131072</span>  <span class="hljs-number">262144</span>  <span class="hljs-number">524288</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_rmem = <span class="hljs-number">8760</span>  <span class="hljs-number">256960</span>  <span class="hljs-number">4088000</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_wmem = <span class="hljs-number">8760</span>  <span class="hljs-number">256960</span>  <span class="hljs-number">4088000</span><br><br><span class="hljs-comment">#TCP/IP调优参数</span><br><span class="hljs-attribute">net</span>.core.rmem_default = <span class="hljs-number">256960</span><br><span class="hljs-attribute">net</span>.core.rmem_max = <span class="hljs-number">513920</span><br><span class="hljs-attribute">net</span>.core.wmem_default = <span class="hljs-number">256960</span><br><span class="hljs-attribute">net</span>.core.wmem_max = <span class="hljs-number">513920</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_timestamps = <span class="hljs-number">0</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_sack = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_window_scaling = <span class="hljs-number">1</span><br><br><span class="hljs-comment">#常见内核参数调优</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_fin_timeout = <span class="hljs-number">30</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_tw_reuse = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_tw_recycle = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_keepalive_time = <span class="hljs-number">1400</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.ip_local_port_range = <span class="hljs-number">9000</span>    <span class="hljs-number">65000</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_syn_backlog = <span class="hljs-number">16384</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_tw_buckets = <span class="hljs-number">36000</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.route.gc_timeout = <span class="hljs-number">100</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_keepalive_intvl = <span class="hljs-number">30</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_keepalive_probes = <span class="hljs-number">3</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_syn_retries = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_synack_retries = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.core.somaxconn = <span class="hljs-number">16384</span><br><span class="hljs-attribute">net</span>.core.netdev_max_backlog = <span class="hljs-number">16384</span><br><span class="hljs-attribute">net</span>.ipv<span class="hljs-number">4</span>.tcp_max_orphans = <span class="hljs-number">16384</span><br><span class="hljs-comment">#内存单个段允许使用的大小，可以设置到总内存的90%</span><br><span class="hljs-comment">#例如16G内存16*1024*1024*1024*90%=15461882265</span><br><span class="hljs-comment">#shmall的大小可以是15461882265/4k(分页大小，getconf PAGESIZE可得到)= 3774873</span><br><span class="hljs-comment">#示例参数以8g内存作为标准</span><br><span class="hljs-attribute">kernel</span>.shmmax=<span class="hljs-number">7730941132</span><br><span class="hljs-attribute">kernel</span>.shmall=<span class="hljs-number">1887436</span><br><span class="hljs-attribute">kernel</span>.msgmax=<span class="hljs-number">65535</span><br><span class="hljs-attribute">kernel</span>.msgmnb=<span class="hljs-number">65535</span><br><span class="hljs-comment">#以下参数是对iptables防火墙的优化，防火墙不开会提示，可以忽略不理。</span><br><span class="hljs-attribute">net</span>.nf_conntrack_max = <span class="hljs-number">25000000</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_max = <span class="hljs-number">25000000</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_tcp_timeout_established = <span class="hljs-number">180</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_tcp_timeout_time_wait = <span class="hljs-number">120</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_tcp_timeout_close_wait = <span class="hljs-number">60</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_tcp_timeout_fin_wait = <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure>
<h4 id="3）生效配置："><a href="#3）生效配置：" class="headerlink" title="3）生效配置："></a>3）生效配置：</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sysctl -p</span><br></code></pre></td></tr></table></figure>
<h3 id="2、关闭透明大页"><a href="#2、关闭透明大页" class="headerlink" title="2、关闭透明大页"></a>2、关闭透明大页</h3><p>目前已知mysql、oracle、redis内存大页功能会产生性能影响</p>
<p>在/etc/rc.local中增加如下内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> test -f <span class="hljs-regexp">/sys/</span>kernel<span class="hljs-regexp">/mm/</span>transparent_hugepage/enabled; then<br>echo never &gt; <span class="hljs-regexp">/sys/</span>kernel<span class="hljs-regexp">/mm/</span>transparent_hugepage/enabled<br>fi<br><span class="hljs-keyword">if</span> test -f <span class="hljs-regexp">/sys/</span>kernel<span class="hljs-regexp">/mm/</span>transparent_hugepage/defrag; then<br>echo never &gt; <span class="hljs-regexp">/sys/</span>kernel<span class="hljs-regexp">/mm/</span>transparent_hugepage/defrag<br>fi<br></code></pre></td></tr></table></figure>
<h3 id="3、调整客户端最大数"><a href="#3、调整客户端最大数" class="headerlink" title="3、调整客户端最大数"></a>3、调整客户端最大数</h3><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">vi /etc/security/limits.<span class="hljs-keyword">conf</span><br><span class="hljs-comment">* soft nofile 65536 # open files (-n)</span><br><span class="hljs-comment">* hard nofile 65536</span><br><span class="hljs-comment">* soft nproc 65565</span><br><span class="hljs-comment">* hard nproc 65565 # max user processes (-u)</span><br></code></pre></td></tr></table></figure>
<h3 id="4、关闭selinux"><a href="#4、关闭selinux" class="headerlink" title="4、关闭selinux"></a>4、关闭selinux</h3><p>修改/etc/selinux/config文件中设置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">SELINUX</span>=disabled<br></code></pre></td></tr></table></figure>
<h3 id="5、关闭防火墙"><a href="#5、关闭防火墙" class="headerlink" title="5、关闭防火墙"></a>5、关闭防火墙</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">systemctl <span class="hljs-keyword">stop</span> firewalld.service     <span class="hljs-meta">#停止firewall</span><br>systemctl <span class="hljs-keyword">disable</span> firewalld.service  <span class="hljs-meta">#禁止firewall开机启动</span><br></code></pre></td></tr></table></figure>
<h3 id="6、禁用交换区"><a href="#6、禁用交换区" class="headerlink" title="6、禁用交换区"></a>6、禁用交换区</h3><p>可以执行如下命令:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Swapoff -a</span><br></code></pre></td></tr></table></figure>
<h3 id="7、修改mysql配置文件"><a href="#7、修改mysql配置文件" class="headerlink" title="7、修改mysql配置文件"></a>7、修改mysql配置文件</h3><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">server_id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">transaction_isolation</span>=READ-COMMITTED<br><span class="hljs-attr">character_set_server</span>=utf8mb4<br><span class="hljs-attr">collation_server</span>=utf8mb4_unicode_ci<br><span class="hljs-attr">log_bin</span>=db-binlog<br><span class="hljs-attr">binlog_format</span>=mixed<br><span class="hljs-attr">expire_logs_days</span>=<span class="hljs-number">15</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-attr">join_buffer_size</span>=<span class="hljs-number">4</span>M<br><span class="hljs-attr">sort_buffer_size</span>=<span class="hljs-number">4</span>M<br><span class="hljs-attr">read_rnd_buffer_size</span>=<span class="hljs-number">16</span>M<br><span class="hljs-attr">innodb_log_buffer_size</span>=<span class="hljs-number">16</span>M<br><span class="hljs-attr">innodb_buffer_pool_size</span>=【物理内存*（<span class="hljs-number">0.5</span>~<span class="hljs-number">0.75</span>）】<br><span class="hljs-attr">innodb_log_file_size</span>=<span class="hljs-number">256</span>M<br><br><span class="hljs-section">[client]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>关系型数据库</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装sonarqube8.2</title>
    <url>/2021/01/05/Linux%E5%AE%89%E8%A3%85sonarqube8-2/</url>
    <content><![CDATA[<p>社区版下载地址：<a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a></p>
<p>环境介绍：（本文使用Oracle jdk 11.0.6，postgreSQL 12）</p>
<h3 id="1、解压缩包"><a href="#1、解压缩包" class="headerlink" title="1、解压缩包"></a>1、解压缩包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unzip</span> sonarqube-<span class="hljs-number">8.2.0.329</span><span class="hljs-number">29</span>.zip<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303112854371.png" alt="image-20200303112854371"></p>
<h3 id="2、创建postgreSQL用户"><a href="#2、创建postgreSQL用户" class="headerlink" title="2、创建postgreSQL用户"></a>2、创建postgreSQL用户</h3><p>安装完后会自动创建postgres用户 su - postgres切换进去</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">psql                     #进入命令行模式<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> sonar；	#创建sonar数据库<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> sonar；	    #创建sonar用户<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> sonar <span class="hljs-keyword">with</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;postgres&#x27;</span>;           #设置sonar用户密码(否则会导致连不上数据库)<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">role</span> sonar <span class="hljs-keyword">createdb</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">role</span> sonar <span class="hljs-keyword">superuser</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">role</span> sonar <span class="hljs-keyword">createrole</span>;    #给sonar授权<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> sonar <span class="hljs-keyword">owner</span> <span class="hljs-keyword">to</span> sonar；      #更改sonar数据库拥有者(这一步是必须的，否则会sonarqube会连接失败)<br><br>psql进入命令行模式 <br>\l查看数据库 <br>\du 查看用户<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303115321618.png" alt="image-20200303115321618"></p>
<h3 id="3、修改系统配置"><a href="#3、修改系统配置" class="headerlink" title="3、修改系统配置"></a>3、修改系统配置</h3><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">1.不能用root起！<br>2.切换用户必须 <span class="hljs-keyword">su</span> - username <br>3.切换好用户千万别忘记给这个用户授权你的sonarQube根目录<br>4.更改一些系统配置<br></code></pre></td></tr></table></figure>
<p>根据需要执行下述命令以使内核参数符合sonar安装需求</p>
<p>#可以使用以下命令查看这些值：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sysctl <span class="hljs-keyword">vm</span>.max_map_count <br>sysctl fs.<span class="hljs-keyword">file</span>-<span class="hljs-built_in">max</span> <br>ulimit -n <br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303120223176.png" alt="image-20200303120223176"></p>
<p>#可以通过以root身份运行以下命令来为当前会话动态设置：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sysctl -w vm.<span class="hljs-attribute">max_map_count</span>=262144<br>sysctl -w fs.<span class="hljs-attribute">file-max</span>=65536<br>ulimit -n 65536<br></code></pre></td></tr></table></figure>
<p>#为了更永久设置这些值，则必须修改/etc/sysctl.d/99-sonarqube.conf（或/etc/sysctl.conf文件）#文件末尾添加下述两行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/sysctl.<span class="hljs-keyword">conf</span><br><br><span class="hljs-keyword">vm</span>.max_map_count=<span class="hljs-number">262144</span><br>fs.<span class="hljs-keyword">file</span>-<span class="hljs-built_in">max</span>=<span class="hljs-number">65536</span><br></code></pre></td></tr></table></figure>
<p>#在/etc/profile文件末尾添加ulimit -n 65536</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">vi <span class="hljs-regexp">/etc/</span>profile<br><br>ulimit -n <span class="hljs-number">65536</span>           #保存后运行#<span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile 使其生效<br><br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure>
<p>创建sonar用户</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">useradd sonar</span><br><span class="hljs-attribute">passwd sonar</span><br></code></pre></td></tr></table></figure>
<p>密码自己设置。</p>
<p>目录授权</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">chown -R sonar:sonar <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span><br></code></pre></td></tr></table></figure>
<h3 id="4、设置对数据库的访问"><a href="#4、设置对数据库的访问" class="headerlink" title="4、设置对数据库的访问"></a>4、设置对数据库的访问</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span>conf/sonar.properties<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303134739877.png" alt="image-20200303134739877"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303151110546.png" alt="image-20200303151110546"></p>
<p>配置自己机器的IP跟端口，保存退出即可</p>
<h3 id="5、配置Elasticsearch存储路径"><a href="#5、配置Elasticsearch存储路径" class="headerlink" title="5、配置Elasticsearch存储路径"></a>5、配置Elasticsearch存储路径</h3><p>默认情况下，Elasticsearch数据存储在*$ SONARQUBE-HOME / data中*，但不建议将其用于生产实例。相反，您应该将此数据存储在其他位置，最好是在具有快速I / O的专用卷中。除了保持可接受的性能外，这样做还可以简化SonarQube的升级</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span>conf/sonar.properties<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303141448981.png" alt="image-20200303141448981"></p>
<p>用于启动SonarQube的用户必须具有对这些目录的读写权限</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">mkdir</span> -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/sonarqube/<span class="hljs-keyword">data</span></span><br><span class="hljs-title">mkdir</span> -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/sonarqube/temp</span><br><span class="hljs-title">chown</span> -<span class="hljs-type">R</span> sonar:sonar /<span class="hljs-class"><span class="hljs-keyword">data</span>/</span><br></code></pre></td></tr></table></figure>
<h3 id="6、Sonar-Scanner扫描器安装及使用方法"><a href="#6、Sonar-Scanner扫描器安装及使用方法" class="headerlink" title="6、Sonar-Scanner扫描器安装及使用方法"></a>6、Sonar-Scanner扫描器安装及使用方法</h3><p>光弄SonarQube是没法扫描项目的，所以还需要装一下sonar-scanner</p>
<p>官方下载地址：<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/">https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#丢到/usr/local/下面解压</span><br><span class="hljs-attribute">unzip</span> sonar-scanner-cli-<span class="hljs-number">4.2.0.187</span><span class="hljs-number">3</span>-linux.zip<br><span class="hljs-attribute">cd</span> sonar-scanner-<span class="hljs-number">4.2.0.187</span><span class="hljs-number">3</span>-linux/<br><br><span class="hljs-attribute">vim</span> conf/sonar-scanner.propertie          #改下配置<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303135545387.png" alt="image-20200303135545387"></p>
<p>保存退出后，创建软连接，将sonar-scanner改为全局即可使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonar-scanner-4.2.0.1873-linux/</span>bin<span class="hljs-regexp">/sonar-scanner /u</span>sr<span class="hljs-regexp">/bin/</span>sonar-scanner<br></code></pre></td></tr></table></figure>
<h3 id="7、启动服务"><a href="#7、启动服务" class="headerlink" title="7、启动服务"></a>7、启动服务</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">su - sonar 别忘了切用户<br><br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sonarqube-8.2.0.32929/</span> <br>bin<span class="hljs-regexp">/linux-x86-64/</span>sonar.sh<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303140123972.png" alt="image-20200303140123972"></p>
<p>访问web界面</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200303151227710.png" alt="image-20200303151227710"></p>
<p>账户密码：admin/admin</p>
<p>安装中文版，然后点击从新启动</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/20191119153859725.png" alt="在这里插入图片描述"></p>
<p>参考文章：<a href="https://blog.csdn.net/qq_42207325/article/details/100998453">https://blog.csdn.net/qq_42207325/article/details/100998453</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Sonarqube</tag>
      </tags>
  </entry>
  <entry>
    <title>MetalLB</title>
    <url>/2021/03/22/MetalLB/</url>
    <content><![CDATA[<h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>​        MetalLB挂接到您的Kubernetes集群中，并提供了网络负载平衡器实现。简而言之，它允许您在未在云提供商上运行的集群中创建类型为“ LoadBalancer”的Kubernetes服务。</p>
<p>​        它具有两个可以共同提供此服务的功能：地址分配和外部通知</p>
<h3 id="1-1-地址分配"><a href="#1-1-地址分配" class="headerlink" title="1.1 地址分配"></a>1.1 地址分配</h3><p>​        在启用了云的Kubernetes集群中，您需要一个负载均衡器，然后您的云平台会为您分配一个IP地址。在裸机集群中，MetalLB负责该分配。</p>
<p>​        MetalLB无法凭空创建IP地址，因此您必须为它提供可以使用的IP地址<em>池</em>。MetalLB将随着服务的来来去往分配和取消分配单个地址，但它只会分发作为其已配置池一部分的IP。</p>
<h3 id="1-2-外部通知"><a href="#1-2-外部通知" class="headerlink" title="1.2  外部通知"></a>1.2  外部通知</h3><p>​        一旦MetalLB为服务分配了外部IP地址，它就需要使群集之外的网络意识到IP在群集中“存在”。MetalLB使用标准路由协议来实现此目的：ARP，NDP或BGP。</p>
<h4 id="第2层模式（ARP-NDP）"><a href="#第2层模式（ARP-NDP）" class="headerlink" title="第2层模式（ARP / NDP）"></a>第2层模式（ARP / NDP）</h4><p>​        在第2层模式下，群集中的一台机器获得服务的所有权，并使用标准地址发现协议（<a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol">ARP协议</a> 对于IPv4）以使这些IP在本地网络上可以访问。从LAN的角度来看，通告机仅具有多个IP地址。</p>
<p><a href="https://metallb.universe.tf/concepts/layer2/">https://metallb.universe.tf/concepts/layer2/</a></p>
<h4 id="BGP协议"><a href="#BGP协议" class="headerlink" title="BGP协议"></a>BGP协议</h4><p>​        在BGP模式下，群集中的所有计算机都将建立 <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP协议</a> 与您控制的附近路由器的对等会话，并告诉这些路由器如何将流量转发到服务IP。借助BGP的策略机制，使用BGP可以在多个节点之间实现真正的负载平衡，并实现细粒度的流量控制。</p>
<p><a href="https://metallb.universe.tf/concepts/bgp/">https://metallb.universe.tf/concepts/bgp/</a></p>
<h2 id="2、第2层模式下的METALLB"><a href="#2、第2层模式下的METALLB" class="headerlink" title="2、第2层模式下的METALLB"></a>2、第2层模式下的METALLB</h2><p>第2层模式的主要优点是它的通用性：它可以在任何以太网网络上运行，不需要特殊的硬件，甚至不需要花哨的路由器。</p>
<h3 id="负载均衡行为"><a href="#负载均衡行为" class="headerlink" title="负载均衡行为"></a>负载均衡行为</h3><p>​        在第2层模式下，服务IP的所有流量都流向一个节点。从那里， <code>kube-proxy</code>将流量分散到所有服务的Pod。</p>
<p>​        从这个意义上讲，第2层没有实现负载平衡器。相反，它实现了故障转移机制，以便当当前引导节点由于某种原因发生故障时，其他节点可以接管。</p>
<p>​        如果领导节点由于某种原因失败，则故障转移是自动的：使用以下命令检测到失败的节点 <a href="https://github.com/hashicorp/memberlist">用户列表</a>，此时新节点将接管发生故障的节点的IP地址所有权。</p>
<h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>​        第2层模式有两个主要限制：单节点瓶颈和潜在的故障转移速度很慢。</p>
<p>​        如上所述，在第2层模式下，单个领导者当选节点接收服务IP的所有流量。这意味着服务的入口带宽被限制为单个节点的带宽。这是使用ARP和NDP引导流量的基本限制。</p>
<p>​        在当前的实现中，节点之间的故障转移取决于客户端的合作。当发生故障转移时，MetalLB发送大量免费的第2层数据包（有点用词不正确-它实际上应称为“未经请求的第2层数据包”），以通知客户端与服务IP关联的MAC地址已更改。</p>
<p>​        大多数操作系统正确处理“免费”数据包，并迅速更新其邻居缓存。在这种情况下，故障转移将在几秒钟内发生。但是，某些系统要么根本不执行免费处理，要么具有错误的实现，从而延迟了缓存更新。</p>
<p>​        所有主要版本的现代操作系统（Windows，Mac，Linux）都可以正确实现第2层故障转移，因此唯一可能出现问题的情况是较旧的或较不常见的操作系统。</p>
<h3 id="与Keepalived的比较"><a href="#与Keepalived的比较" class="headerlink" title="与Keepalived的比较"></a>与Keepalived的比较</h3><p>​        MetalLB的layer2模式与Keepalived有很多相似之处，因此，如果您熟悉Keepalived，听起来应该很熟悉。但是，还有一些差异值得一提。</p>
<p>​        Keepalived使用虚拟路由器冗余协议（VRRP）。Keepalived实例会不断相互交换VRRP消息，以选择领导者并通知该领导者何时离开。</p>
<p>​        另一方面，MetalLB依靠 <a href="https://github.com/hashicorp/memberlist">用户列表</a> 知道何时无法再访问群集中的节点，并且应将来自该节点的服务IP移动到其他位置。</p>
<p>​        从客户端的角度来看，Keepalived和MetalLB“看起来”是相同的：发生故障转移时，服务IP地址似乎从一台计算机迁移到另一台计算机，而在其余时间中，看起来机器都具有多个IP地址。</p>
<p>​        由于MetalLB不使用VRRP，因此不受该协议的某些限制。例如，MetalLB中不存在每个网络255个负载均衡器的VRRP限制。只要您的网络中有可用的IP，您就可以拥有任意数量的负载平衡IP。与VRRP相比，MetalLB还需要更少的配置-例如，没有虚拟路由器ID</p>
<p>​        另一方面，因为MetalLB依赖 <a href="https://github.com/hashicorp/memberlist">用户列表</a>对于群集成员信息，它不能与支持VRRP的第三方路由器和基础架构互操作。这可以按预期工作：MetalLB专为<em>在</em> Kubernetes群集<em>内</em>提供负载平衡和故障转移而设计，在这种情况下，与第三方LB软件的互操作性超出了范围。</p>
<h2 id="3、BGP模式下的METALLB"><a href="#3、BGP模式下的METALLB" class="headerlink" title="3、BGP模式下的METALLB"></a>3、BGP模式下的METALLB</h2><p>​        在BGP模式下，群集中的每个节点都与网络路由器建立BGP对等会话，并使用该对等会话来通告外部群集服务的IP。</p>
<p>​        假设您的路由器配置为支持多路径，则可以实现真正的负载平衡：MetalLB发布的路由彼此等效，除了它们的下一跳。这意味着路由器将一起使用所有下一跳，并在它们之间进行负载平衡。</p>
<p>​        数据包到达节点后，<code>kube-proxy</code>负责流量路由的最后一跳，以将数据包到达服务中的一个特定容器。</p>
<h3 id="负载均衡行为-1"><a href="#负载均衡行为-1" class="headerlink" title="负载均衡行为"></a>负载均衡行为</h3><p>​        负载平衡的确切行为取决于特定的路由器型号和配置，但是常见的行为是基于<em>数据包哈希值</em>来平衡 <em>每个连接</em>。</p>
<p>​        每次连接意味着单个TCP或UDP会话的所有数据包都将定向到群集中的单个计算机。流量扩散仅发生<em>在</em>不同的连接<em>之间</em>，而不是一个连接中的数据包。</p>
<p>这是一个<em>很好的</em>事情，因为分散在多个群集节点的数据包会导致在几个层次上不良行为：</p>
<ul>
<li>将单个连接分布在多条路径上会导致数据包在网络上重新排序，这将严重影响最终主机的性能。</li>
<li>不保证Kubernetes中的节点上流量路由在各个节点之间是一致的。这意味着两个不同的节点可能决定将同一连接的数据包路由到不同的Pod，这将导致连接失败。</li>
</ul>
<p>数据包哈希是高性能路由器如何在多个后端之间无状态地分布连接。对于每个数据包，他们提取一些字段，并将它们用作“种子”，以确定性地选择一个可能的后端。如果所有字段都相同，则将选择相同的后端。</p>
<p>​        可用的确切哈希方法取决于路由器的硬件和软件。两个典型的选项是<em>3元组</em>和<em>5元组</em> 哈希。三元组<code>(protocol, source-ip, dest-ip)</code>用作密钥，这意味着两个唯一IP之间的所有数据包都将到达同一后端。5元组散列将源端口和目标端口添加到混合中，这允许来自同一客户端的不同连接分布在群集中。</p>
<p>​        通常，最好将尽可能多的<em>熵</em>放入数据包哈希中，这意味着使用更多字段通常是好的。这是因为熵的增加使我们更接近“理想”的负载平衡状态，在该状态下，每个节点都接收完全相同数量的数据包。由于上面列出的问题，我们永远无法达到理想状态，但是我们可以做的是尝试并尽可能均匀地分布连接，以尝试防止热点的形成。</p>
<h3 id="局限性-1"><a href="#局限性-1" class="headerlink" title="局限性"></a>局限性</h3><p>​        将BGP用作负载平衡机制的优势在于，您可以使用标准的路由器硬件，而不是定制的负载平衡器。但是，这也有缺点。</p>
<p>​        最大的问题是，基于BGP的负载平衡无法对地址<em>后端集的</em>更改做出适当的响应。这意味着，当群集节点发生故障时，您应该希望断开与服务的<em>所有</em>活动连接（用户将看到“对等方重置连接”）。</p>
<p>​        基于BGP的路由器实现无状态负载平衡。他们通过散列数据包头中的某些字段，并将该散列用作可用后端数组的索引，将给定的数据包分配给特定的下一跳。</p>
<p>​        问题在于，路由器中使用的哈希通常 <em>不稳定</em>，因此，只要后端集的大小发生变化（例如，当节点的BGP会话断开时），现有连接就会被随机有效地重新哈希，这意味着大多数现有连接连接最终将突然转发到另一后端，而该后端不知道所讨论的连接。</p>
<p>​        这样做的结果是，每当服务的IP→节点映射发生更改时，您都应该会看到一次一次性命中，其中最活跃的服务连接中断。没有持续的数据包丢失或黑洞，只有一次干净的休息时间。</p>
<p>根据您的服务工作，可以采用几种缓解策略：</p>
<ul>
<li>您的BGP路由器可以选择使用更稳定的ECMP哈希算法。有时称为“弹性ECMP”或“弹性LAG”。当后端集更改时，使用这种算法可以大大减少受影响的连接数。</li>
<li>将您的服务部署固定到特定的节点，以最大程度地减少必须“小心”的节点池。</li>
<li>当大多数用户处于睡眠状态并且流量较低时，可以在“低谷”期间安排对服务部署的更改。</li>
<li>将每个逻辑服务划分为两个具有不同IP的Kubernetes服务，并使用DNS在中断“排水”服务之前将用户流量从一个迁移到另一个。</li>
<li>在客户端添加透明的重试逻辑，以从突然的断开中正常恢复。如果您的客户是诸如移动应用程序或丰富的单页Web应用程序之类的东西，则此方法特别有用。</li>
<li>将您的服务放在入口控制器后面。入口控制器本身可以使用MetalLB接收流量，但是BGP与服务之间具有状态层意味着您可以更改服务而无需担心。您只需要在更改入口控制器本身的部署时小心即可（例如，在添加更多nginx pod进行扩展时）。</li>
<li>接受偶尔会有突发的重置连接。对于低可用性内部服务，这可能是可接受的。</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>MetalLB</tag>
      </tags>
  </entry>
  <entry>
    <title>LiteIDE搭建Go语言开发环境</title>
    <url>/2021/04/07/LiteIDE%E6%90%AD%E5%BB%BAGo%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="下载-LiteIDE"><a href="#下载-LiteIDE" class="headerlink" title="下载 LiteIDE"></a>下载 LiteIDE</h2><p>大家可以通过下面三种方式来下载 LiteIDE 安装包：</p>
<ul>
<li>开源软件平台：<a href="https://sourceforge.net/projects/liteide/files/%EF%BC%9B">https://sourceforge.net/projects/liteide/files/；</a></li>
<li>GitHub：<a href="https://github.com/visualfc/liteide/releases%EF%BC%9B">https://github.com/visualfc/liteide/releases；</a></li>
<li>百度网盘：<a href="https://pan.baidu.com/s/1wYHSEfG1TJRC2iOkE_saJg%EF%BC%88%E5%AF%86%E7%A0%81%EF%BC%9Ajzrc%EF%BC%89%E3%80%82">https://pan.baidu.com/s/1wYHSEfG1TJRC2iOkE_saJg（密码：jzrc）。</a></li>
</ul>
<p>需要下载 Windows 版本的 LiteIDE 安装包。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706144756954.png" alt="image-20200706144756954"></p>
<p>因为 LiteIDE 是绿色版的，无需安装，所以下载完成后，得到的是一个 ZIP 格式的压缩文件。</p>
<p>将压缩包解压到任意目录，这里我们将压缩包解压到了 D 盘，解压后会得到一个名为“liteide”的文件夹。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706145135263.png" alt="image-20200706145135263"></p>
<p>进入 LiteIDE 文件夹中的 bin 文件夹，可以在 bin 文件夹中找到名为“liteide.exe”的文件，它就是 LiteIDE 的启动程序。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706145221694.png" alt="image-20200706145221694"></p>
<p>​        双击运行“liteide.exe”就可以正常打开 LiteIDE 了，为了方便以后的使用，建议大家在桌面创建 LiteIDE 的快捷方式（在“liteide.exe”上右键→“发送到”→“桌面快捷方式”）。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102Q54T04U.gif" alt="修改当前运行环境"></p>
<p>配置当前运行环境，点击“工具”，在下拉菜单中选择“编辑当前环境”，如下图所示。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102Q60J04Z.gif" alt="编辑当前环境"></p>
<p>在打开的文件中找到“GOROOT=xxx”，并将其修改为环境变量中 GOROOT 对应的值，如下所示。（注意：修改完成后记得保存）</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102QG015335.gif" alt="编辑Go语言开发包的安装目录"></p>
<p>如果记不清了也没关系，可以在 CMD 窗口中使用<code>go env</code>命令查看 GOROOT 对应的值。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102QG934Y5.gif" alt="使用go env命令查看Go语言开发包的相关信息"></p>
<p>​        添加自定义 GOPATH，在“工具”菜单中找到“管理 GOPATH/Modules…”，如下图所示。（注意：因为系统中已经包含了一个默认的 GOPATH，所以此步骤不是必须的，了解即可）</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102QP05E13.gif" alt="管理 GOPATH"><br> 管理 GOPATH<br> 在弹出的窗口中找到“使用自定义 GOPATH”，将其勾选，然后点击“添加目录”，选择合适的目录即可。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102Z91212956.gif" alt="添加自定义 GOPATH"><br> 添加自定义 GOPATH</p>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>​        到这里 LiteIDE 已经基本上配置完成了，下面我们就来创建一个项目来测试一下。</p>
<p>​         首先，在“文件”菜单中选择“新建”，在弹出的窗口中，选择系统默认的 GOPATH 路径，模板选择“Go1 Command Project”，最后填写项目名称，并选择合适的目录，确认无误后点击“OK”。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102Z93433343.gif" alt="新建项目"></p>
<p>新建好的项目是下面这样的，编辑器自动为我们创建了两个文件，并在“main.go”中生成了简单的代码。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102Z9402U15.gif" alt="新建完成的项目"></p>
<p>点击编辑器右上方的“BR”按钮，就可以运行“main.go”中的代码，同时会在当前目录下生成一个 .exe 的可执行文件。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-19102Z95054c8.gif" alt="运行程序"></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus启动参数详解</title>
    <url>/2021/03/22/Prometheus%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">Flags:<br><span class="hljs-comment">#帮助</span><br>  -h, <span class="hljs-comment">--help                     Show context-sensitive help (also try --help-long and --help-man).</span><br><span class="hljs-comment">#版本</span><br>      <span class="hljs-comment">--version                  Show application version.</span><br><span class="hljs-comment">#配置文件</span><br>      <span class="hljs-comment">--config.file=&quot;prometheus.yml&quot;</span><br>                                 Prometheus configuration <span class="hljs-built_in">file</span> path.<br><span class="hljs-comment">#监听端口</span><br>      <span class="hljs-comment">--web.listen-address=&quot;0.0.0.0:9090&quot;</span><br>                                 Address <span class="hljs-built_in">to</span> listen <span class="hljs-keyword">on</span> <span class="hljs-title">for</span> <span class="hljs-title">UI</span>, <span class="hljs-title">API</span>, <span class="hljs-title">and</span> <span class="hljs-title">telemetry</span>.<br><span class="hljs-comment">#空闲连接的超时时间</span><br>      <span class="hljs-comment">--web.read-timeout=5m      Maximum duration before timing out read of the request, and closing idle connections.</span><br><span class="hljs-comment">#最大连接数</span><br>      <span class="hljs-comment">--web.max-connections=512  Maximum number of simultaneous connections.</span><br><br><span class="hljs-comment">#可从外部访问Prometheus的URL（例如，如果Prometheus是通过反向代理提供的）。 用于生成返回到Prometheus本身的相对和绝对链接。 如果URL包含路径部分，它将被用作Prometheus服务的所有HTTP端点的前缀。 如果省略，则会自动派生相关的URL组件。</span><br>      <span class="hljs-comment">--web.external-url=&lt;URL&gt;   The URL under which Prometheus is externally reachable (for example, if Prometheus is served via a reverse proxy). Used for generating relative and absolute links back to</span><br>                                 Prometheus itself. If <span class="hljs-keyword">the</span> <span class="hljs-built_in">URL</span> has <span class="hljs-keyword">a</span> path portion, <span class="hljs-keyword">it</span> will be used <span class="hljs-built_in">to</span> prefix all HTTP endpoints served <span class="hljs-keyword">by</span> Prometheus. If omitted, relevant <span class="hljs-built_in">URL</span> components will be derived<br>                                 automatically.<br><span class="hljs-comment">#内部路由的前缀。 默认为--web.external-url的路径。</span><br>      <span class="hljs-comment">--web.route-prefix=&lt;path&gt;  Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.</span><br><span class="hljs-comment">#静态资源目录的路径，位于/ user</span><br>      <span class="hljs-comment">--web.user-assets=&lt;path&gt;   Path to static asset directory, available at /user.</span><br><span class="hljs-comment">#启用是否通过HTTP请求重新加载</span><br>      <span class="hljs-comment">--web.enable-lifecycle     Enable shutdown and reload via HTTP request.</span><br><span class="hljs-comment">#管理控制操作启用API端点</span><br>      <span class="hljs-comment">--web.enable-admin-api     Enable API endpoints for admin control actions.</span><br><span class="hljs-comment">#模板目录的路径，位于/consoles</span><br>      <span class="hljs-comment">--web.console.templates=&quot;consoles&quot;</span><br>                                 Path <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> console template <span class="hljs-built_in">directory</span>, available <span class="hljs-keyword">at</span> /consoles.<br><span class="hljs-comment">#控制台库目录的路径</span><br>      <span class="hljs-comment">--web.console.libraries=&quot;console_libraries&quot;</span><br>                                 Path <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> console library <span class="hljs-built_in">directory</span>.<br><span class="hljs-comment">#Prometheus实例页面的文档标题</span><br>      <span class="hljs-comment">--web.page-title=&quot;Prometheus Time Series Collection and Processing Server&quot;</span><br>                                 Document title <span class="hljs-keyword">of</span> Prometheus instance.<br><span class="hljs-comment">#用于CORS来源的正则表达式。</span><br>      <span class="hljs-comment">--web.cors.origin=&quot;.*&quot;     Regex for CORS origin. It is fully anchored. Example: &#x27;https?://(domain1|domain2)\.com&#x27;</span><br><span class="hljs-comment">#指标(数据）存储的基本路径</span><br>      <span class="hljs-comment">--storage.tsdb.path=&quot;data/&quot;</span><br>                                 Base path <span class="hljs-keyword">for</span> metrics storage.<br><span class="hljs-comment">#将数据保留多长时间。 此标志已被弃用，请改用“ storage.tsdb.retention.time”。</span><br>      <span class="hljs-comment">--storage.tsdb.retention=STORAGE.TSDB.RETENTION</span><br>                                 [DEPRECATED] How <span class="hljs-keyword">long</span> <span class="hljs-built_in">to</span> retain samples <span class="hljs-keyword">in</span> storage. This flag has been deprecated, use <span class="hljs-string">&quot;storage.tsdb.retention.time&quot;</span> instead.<br><span class="hljs-comment">#将数据保留多长时间。默认15天</span><br>      <span class="hljs-comment">--storage.tsdb.retention.time=STORAGE.TSDB.RETENTION.TIME</span><br>                                 How <span class="hljs-keyword">long</span> <span class="hljs-built_in">to</span> retain samples <span class="hljs-keyword">in</span> storage. When this flag is <span class="hljs-built_in">set</span> <span class="hljs-keyword">it</span> overrides <span class="hljs-string">&quot;storage.tsdb.retention&quot;</span>. If neither this flag nor <span class="hljs-string">&quot;storage.tsdb.retention&quot;</span> nor<br>                                 <span class="hljs-string">&quot;storage.tsdb.retention.size&quot;</span> is <span class="hljs-built_in">set</span>, <span class="hljs-keyword">the</span> retention <span class="hljs-built_in">time</span> defaults <span class="hljs-built_in">to</span> <span class="hljs-number">15</span>d.<br><span class="hljs-comment">#可以为块存储的最大字节数。 支持的单位：KB，MB，GB，TB，PB。</span><br>      <span class="hljs-comment">--storage.tsdb.retention.size=STORAGE.TSDB.RETENTION.SIZE</span><br>                                 [EXPERIMENTAL] Maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">bytes</span> that can be stored <span class="hljs-keyword">for</span> blocks. Units supported: KB, MB, GB, TB, PB. This flag is experimental <span class="hljs-keyword">and</span> can be changed <span class="hljs-keyword">in</span> future releases.<br><span class="hljs-comment">#不在数据目录中创建锁文件</span><br>      <span class="hljs-comment">--storage.tsdb.no-lockfile</span><br>                                 Do <span class="hljs-keyword">not</span> <span class="hljs-built_in">create</span> lockfile <span class="hljs-keyword">in</span> data <span class="hljs-built_in">directory</span>.<br><span class="hljs-comment">#允许重叠的块，从而启用垂直压缩和垂直查询合并。</span><br>      <span class="hljs-comment">--storage.tsdb.allow-overlapping-blocks</span><br>                                 [EXPERIMENTAL] Allow overlapping blocks, which <span class="hljs-keyword">in</span> turn enables vertical compaction <span class="hljs-keyword">and</span> vertical query <span class="hljs-built_in">merge</span>.<br><span class="hljs-comment">#压缩tsdb WAL</span><br>      <span class="hljs-comment">--storage.tsdb.wal-compression</span><br>                                 Compress <span class="hljs-keyword">the</span> tsdb WAL.<br><span class="hljs-comment">#关闭或配置重新加载时等待刷写数据的时间</span><br>      <span class="hljs-comment">--storage.remote.flush-deadline=&lt;duration&gt;</span><br>                                 How <span class="hljs-keyword">long</span> <span class="hljs-built_in">to</span> <span class="hljs-built_in">wait</span> flushing sample <span class="hljs-keyword">on</span> <span class="hljs-title">shutdown</span> <span class="hljs-title">or</span> <span class="hljs-title">config</span> <span class="hljs-title">reload</span>.<br><span class="hljs-comment">#在单个查询中通过远程读取接口返回的最大样本总数。 0表示没有限制。 对于流式响应类型，将忽略此限制。</span><br>      <span class="hljs-comment">--storage.remote.read-sample-limit=5e7</span><br>                                 Maximum overall <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> samples <span class="hljs-built_in">to</span> <span class="hljs-literal">return</span> via <span class="hljs-keyword">the</span> remote <span class="hljs-built_in">read</span> interface, <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> single query. <span class="hljs-number">0</span> means no limit. This limit is ignored <span class="hljs-keyword">for</span> streamed response types.<br><span class="hljs-comment">#并发远程读取调用的最大数目。 0表示没有限制。</span><br>      <span class="hljs-comment">--storage.remote.read-concurrent-limit=10</span><br>                                 Maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> concurrent remote <span class="hljs-built_in">read</span> calls. <span class="hljs-number">0</span> means no limit.<br><span class="hljs-comment">#用于流式传输远程读取响应类型的单个帧中的最大字节数。 请注意，客户端也可能会限制帧大小。 1MB为默认情况下由protobuf推荐</span><br><br><span class="hljs-comment">--storage.remote.read-max-bytes-in-frame=1048576</span><br>                                 Maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> single frame <span class="hljs-keyword">for</span> streaming remote <span class="hljs-built_in">read</span> response types <span class="hljs-keyword">before</span> marshalling. Note that client might have limit <span class="hljs-keyword">on</span> <span class="hljs-title">frame</span> <span class="hljs-title">size</span> <span class="hljs-title">as</span> <span class="hljs-title">well</span>. <span class="hljs-title">1MB</span> <span class="hljs-title">as</span><br>                                 recommended <span class="hljs-keyword">by</span> protobuf <span class="hljs-keyword">by</span> default.<br><span class="hljs-comment">#容忍中断以恢复警报“ for”状态的最长时间。</span><br>      <span class="hljs-comment">--rules.alert.for-outage-tolerance=1h</span><br>                                 Max <span class="hljs-built_in">time</span> <span class="hljs-built_in">to</span> tolerate prometheus outage <span class="hljs-keyword">for</span> restoring <span class="hljs-string">&quot;for&quot;</span> state <span class="hljs-keyword">of</span> alert.<br><span class="hljs-comment">#警报和恢复的“ for”状态之间的最短持续时间。 仅对于配置的“ for”时间大于宽限期的警报，才保持此状态。</span><br>      <span class="hljs-comment">--rules.alert.for-grace-period=10m</span><br>                                 Minimum duration between alert <span class="hljs-keyword">and</span> restored <span class="hljs-string">&quot;for&quot;</span> state. This is maintained only <span class="hljs-keyword">for</span> alerts <span class="hljs-keyword">with</span> configured <span class="hljs-string">&quot;for&quot;</span> <span class="hljs-built_in">time</span> greater than grace period.<br><span class="hljs-comment">#将警报重新发送到Alertmanager之前等待的最短时间。</span><br>      <span class="hljs-comment">--rules.alert.resend-delay=1m</span><br>                                 Minimum amount <span class="hljs-keyword">of</span> <span class="hljs-built_in">time</span> <span class="hljs-built_in">to</span> <span class="hljs-built_in">wait</span> <span class="hljs-keyword">before</span> resending <span class="hljs-keyword">an</span> alert <span class="hljs-built_in">to</span> Alertmanager.<br><span class="hljs-comment">#等待的Alertmanager通知的队列容量。</span><br>      <span class="hljs-comment">--alertmanager.notification-queue-capacity=10000</span><br>                                 The capacity <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> queue <span class="hljs-keyword">for</span> pending Alertmanager notifications.<br><span class="hljs-comment">#向Alertmanager发送警报的超时。</span><br>      <span class="hljs-comment">--alertmanager.timeout=10s</span><br>                                 Timeout <span class="hljs-keyword">for</span> sending alerts <span class="hljs-built_in">to</span> Alertmanager.<br><span class="hljs-comment">#在表达式求值期间检索指标的最大回溯持续时间。</span><br>      <span class="hljs-comment">--query.lookback-delta=5m  The maximum lookback duration for retrieving metrics during expression evaluations.</span><br><span class="hljs-comment">#最大查询时间。</span><br>      <span class="hljs-comment">--query.timeout=2m         Maximum time a query may take before being aborted.</span><br><span class="hljs-comment">#最大查询并发数</span><br>      <span class="hljs-comment">--query.max-concurrency=20</span><br>                                 Maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> queries executed concurrently.<br><span class="hljs-comment">#单个查询可以加载到内存中的最大样本数。 请注意，如果查询尝试将更多的样本加载到内存中，则查询将失败，因此这也限制了查询可以返回的样本数。</span><br><br>      <span class="hljs-comment">--query.max-samples=50000000</span><br>                                 Maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> samples <span class="hljs-keyword">a</span> single query can <span class="hljs-built_in">load</span> <span class="hljs-keyword">into</span> memory. Note that queries will fail <span class="hljs-keyword">if</span> they <span class="hljs-keyword">try</span> <span class="hljs-built_in">to</span> <span class="hljs-built_in">load</span> more samples than this <span class="hljs-keyword">into</span> memory, so this also limits <span class="hljs-keyword">the</span><br>                                 <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> samples <span class="hljs-keyword">a</span> query can <span class="hljs-literal">return</span>.<br><span class="hljs-comment">#日志级别</span><br>      <span class="hljs-comment">--log.level=info           Only log messages with the given severity or above. One of: [debug, info, warn, error]</span><br><span class="hljs-comment">#日志格式</span><br>      <span class="hljs-comment">--log.format=logfmt        Output format of log messages. One of: [logfmt, json]</span><br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://www.cnblogs.com/zhoujinyi/p/11934062.html">https://www.cnblogs.com/zhoujinyi/p/11934062.html</a></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自动备份脚本</title>
    <url>/2021/01/05/MySQL%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="1、备份脚本"><a href="#1、备份脚本" class="headerlink" title="1、备份脚本"></a>1、备份脚本</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/my</span>sqlbak/&#123;data,logs,scripts&#125;<br><br>cd <span class="hljs-regexp">/data/my</span>sqlbak/scripts<br><br>cat &gt; backup.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/bash</span><br><br>DATE=$(date +%Y%m%d)<br>BACKUP_ROOT=<span class="hljs-regexp">/data/my</span>sqlbak<br>BACKUP_FILEDIR=<span class="hljs-variable">$BACKUP_ROOT</span><span class="hljs-regexp">/data/</span><span class="hljs-variable">$DATE</span><br><br>mkdir -p <span class="hljs-variable">$BACKUP_ROOT</span><span class="hljs-regexp">/data/</span><span class="hljs-variable">$DATE</span><br>source <span class="hljs-regexp">/etc/</span>profile.d/mysql<br><br>DATABASES=$(mysql -uroot -peconage123 -e <span class="hljs-string">&quot;show databases&quot;</span> | grep -Ev <span class="hljs-string">&quot;Database|sys|information_schema|performance_schema|mysql&quot;</span>)<br><br><span class="hljs-keyword">for</span> db <span class="hljs-keyword">in</span> <span class="hljs-variable">$DATABASES</span><br><span class="hljs-keyword">do</span><br>echo<br>echo ----------<span class="hljs-variable">$BACKUP_FILEDIR</span>/<span class="hljs-variable">$&#123;db&#125;</span>_<span class="hljs-variable">$DATE</span>.sql.gz <span class="hljs-keyword">BEGIN</span>----------<br>mysqldump -uroot -phello123 --default-character-set=utf8 -q -n --lock-all-tables --flush-logs -E -R --triggers -B <span class="hljs-variable">$&#123;db&#125;</span> | gzip &gt; <span class="hljs-variable">$BACKUP_FILEDIR</span>/<span class="hljs-variable">$&#123;db&#125;</span>_<span class="hljs-variable">$DATE</span>.sql.gz<br>echo ----------<span class="hljs-variable">$BACKUP_FILEDIR</span>/<span class="hljs-variable">$&#123;db&#125;</span>_<span class="hljs-variable">$DATE</span>.sql.gz COMPLETE-------<br>echo<br>done<br><br>echo <span class="hljs-string">&quot;done&quot;</span><br>EOF<br></code></pre></td></tr></table></figure>
<h2 id="2、清理脚本"><a href="#2、清理脚本" class="headerlink" title="2、清理脚本"></a>2、清理脚本</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">cat &gt; backup_clean.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-keyword">echo</span> <span class="hljs-params">----------CLEAN</span> BEGIN<span class="hljs-params">----------</span><br>find <span class="hljs-string">/data/mysqlbak/data/</span> -mtime +14  -exec rm -rf &#123;&#125; \;<br><span class="hljs-keyword">echo</span> <span class="hljs-params">----------CLEAN</span> COMPLETE<span class="hljs-params">-------</span><br>EOF<br></code></pre></td></tr></table></figure>
<h2 id="3、给脚本执行权限"><a href="#3、给脚本执行权限" class="headerlink" title="3、给脚本执行权限"></a>3、给脚本执行权限</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">backup</span><span class="hljs-selector-class">.sh</span><br><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">backup_clean</span><span class="hljs-selector-class">.sh</span><br></code></pre></td></tr></table></figure>
<h2 id="4、设置定时任务"><a href="#4、设置定时任务" class="headerlink" title="4、设置定时任务"></a>4、设置定时任务</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">crontab -e<br><span class="hljs-number">00</span> <span class="hljs-number">1</span> * * <span class="hljs-number">5</span> <span class="hljs-regexp">/data/my</span>sqlbak<span class="hljs-regexp">/scripts/</span>backup.sh<br><span class="hljs-number">00</span> <span class="hljs-number">1</span> * * <span class="hljs-number">5</span> <span class="hljs-regexp">/data/my</span>sqlbak<span class="hljs-regexp">/scripts/</span>backup_clean.sh &gt; <span class="hljs-regexp">/data/my</span>sqlbak<span class="hljs-regexp">/logs/</span>backup_full_clean.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>关系型数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控MySQL</title>
    <url>/2021/03/22/Prometheus%E7%9B%91%E6%8E%A7MySQL/</url>
    <content><![CDATA[<p>官方地址：<a href="https://github.com/prometheus/mysqld_exporter">https://github.com/prometheus/mysqld_exporter</a></p>
<p>软件包下载地址：<a href="https://github.com/prometheus/mysqld_exporter/releases">https://github.com/prometheus/mysqld_exporter/releases</a></p>
<h2 id="1、进入数据库创建用户"><a href="#1、进入数据库创建用户" class="headerlink" title="1、进入数据库创建用户"></a>1、进入数据库创建用户</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;exporter&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> PROCESS, <span class="hljs-keyword">REPLICATION</span> CLIENT, <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;exporter&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br></code></pre></td></tr></table></figure>
<h2 id="2、解压压缩包"><a href="#2、解压压缩包" class="headerlink" title="2、解压压缩包"></a>2、解压压缩包</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> xvf mysqld_exporter-<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>.linux-amd<span class="hljs-number">64</span>.tar.gz -C /usr/local/<br><span class="hljs-attribute">mv</span> mysqld_exporter-<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>.linux-amd<span class="hljs-number">64</span> mysqld_exporter<br></code></pre></td></tr></table></figure>
<h2 id="3、创建mysql配置文件、运行时可免密码连接数据库："><a href="#3、创建mysql配置文件、运行时可免密码连接数据库：" class="headerlink" title="3、创建mysql配置文件、运行时可免密码连接数据库："></a>3、创建mysql配置文件、运行时可免密码连接数据库：</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql_exporter/</span>.my.cnf<br><br>[client]<br>user=exporter<br>password=hello<br></code></pre></td></tr></table></figure>
<h2 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">nohup <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysqld_exporter/my</span>sqld_exporter  --config.my-cnf=<span class="hljs-string">&quot;/usr/local/mysqld_exporter/.my.cnf&quot;</span> &amp;<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608164830184.png" alt="image-20200608164830184"></p>
<h2 id="5、web界面网站查看捕获mysql数据"><a href="#5、web界面网站查看捕获mysql数据" class="headerlink" title="5、web界面网站查看捕获mysql数据"></a>5、web界面网站查看捕获mysql数据</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608165039884.png" alt="image-20200608165039884"></p>
<h2 id="6、Prometheus中添加mysql"><a href="#6、Prometheus中添加mysql" class="headerlink" title="6、Prometheus中添加mysql"></a>6、Prometheus中添加mysql</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">- <span class="hljs-attr">job_name:</span> mysql<br>  <span class="hljs-symbol">static_configs:</span><br>  - <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;192.168.1.10:9104&#x27;</span>]<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608165432286.png" alt="image-20200608165432286"></p>
<p>刷新Prometheus的配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">curl -X POST http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.103</span>:<span class="hljs-number">31842</span><span class="hljs-regexp">/-/</span>reload      <span class="hljs-comment">#nodeIP+nodeport</span><br></code></pre></td></tr></table></figure>
<p>通过Prometheus就能查看到获取到了MySQL的数据</p>
<p><strong><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608165844341.png" alt="image-20200608165844341"></strong></p>
<h2 id="7、进入grafana导入mysql"><a href="#7、进入grafana导入mysql" class="headerlink" title="7、进入grafana导入mysql"></a>7、进入grafana导入mysql</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608171608124.png" alt="image-20200608171608124"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608171630600.png" alt="image-20200608171630600"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608171706439.png" alt="image-20200608171706439"></p>
<p>参考文章：<a href="https://www.cnblogs.com/xiangsikai/p/11289675.html">https://www.cnblogs.com/xiangsikai/p/11289675.html</a></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控Redis</title>
    <url>/2021/03/22/Prometheus%E7%9B%91%E6%8E%A7Redis/</url>
    <content><![CDATA[<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> xvf redis_exporter-v<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.linux-amd<span class="hljs-number">64</span>.tar.gz -C /usr/local/<br><span class="hljs-attribute">mv</span> redis_exporter-v<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.linux-amd<span class="hljs-number">64</span> redis_exporter<br><span class="hljs-comment">## 无密码</span><br><span class="hljs-attribute">nohup</span> ./redis_exporter -redis.addr <span class="hljs-number">192.168.1.120:6379</span> &amp;<br><span class="hljs-comment">## 有密码</span><br><span class="hljs-attribute">nohup</span> ./redis_exporter -redis.addr <span class="hljs-number">192.168.1.120:6379</span>  -redis.password <span class="hljs-number">123456</span><br><span class="hljs-comment">#查看是否运行成功</span><br><span class="hljs-attribute">ss</span> -auntlp |grep <span class="hljs-number">9121</span><br></code></pre></td></tr></table></figure>
<h2 id="2、Prometheus收集redis"><a href="#2、Prometheus收集redis" class="headerlink" title="2、Prometheus收集redis"></a>2、Prometheus收集redis</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">    scrape_configs:<br>    - job_name: <span class="hljs-string">&#x27;redis-dev&#x27;</span><br>      static_configs:<br>      - targets:<br>        - <span class="hljs-string">&quot;192.168.1.120:9121&quot;</span><br><span class="hljs-comment">#可以重启Prometheus的服务，也可以热加载</span><br>curl -X POST http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.103</span>:<span class="hljs-number">31842</span><span class="hljs-regexp">/-/</span>reload        <span class="hljs-comment">#Prometheus的web访问地址</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200619140854076.png" alt="image-20200619140854076"></p>
<h2 id="3、grafana导入模板模板编号763"><a href="#3、grafana导入模板模板编号763" class="headerlink" title="3、grafana导入模板模板编号763"></a>3、grafana导入模板模板编号763</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200619150016808.png" alt="image-20200619150016808"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis介绍</title>
    <url>/2021/03/22/Redis%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="1、redis持久化"><a href="#1、redis持久化" class="headerlink" title="1、redis持久化"></a><strong>1、redis持久化</strong></h2><p>redis提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）。</p>
<p>RDB，简而言之，就是在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上；</p>
<p>AOF，则是换了一个角度来实现持久化，那就是将redis执行过的所有写指令记录下来，在下次redis重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了。</p>
<p>其实RDB和AOF两种方式也可以同时使用，在这种情况下，如果redis重启的话，则会优先采用AOF方式来进行数据恢复，这是因为AOF方式的数据恢复完整度更高。</p>
<p>如果你没有数据持久化的需求，也完全可以关闭RDB和AOF方式，这样的话，redis将变成一个纯内存数据库，就像memcache一样。</p>
<h2 id="2、-RDB"><a href="#2、-RDB" class="headerlink" title="2、 RDB"></a><strong>2、 RDB</strong></h2><p>RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。</p>
<p>redis在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。</p>
<p>对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何IO操作的，这样就确保了redis极高的性能。</p>
<p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p>
<p>虽然RDB有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么RDB方式就不太适合你，因为即使你每5分钟都持久化一次，当redis故障时，仍然会有近5分钟的数据丢失。所以，redis还提供了另一种持久化方式，那就是AOF。</p>
<h2 id="3、-AOF"><a href="#3、-AOF" class="headerlink" title="3、 AOF"></a><strong>3、 AOF</strong></h2><p>AOF，英文是Append Only File，即只允许追加不允许改写的文件。</p>
<p>如前面介绍的，AOF方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。</p>
<p>我们通过配置redis.conf中的appendonly yes就可以打开AOF功能。如果有写操作（如SET等），redis就会被追加到AOF文件的末尾。</p>
<p>默认的AOF持久化策略是每秒钟fsync一次（fsync是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis仍然可以保持很好的处理性能，即使redis故障，也只会丢失最近1秒钟的数据。</p>
<p>如果在追加日志时，恰好遇到磁盘空间满、inode满或断电等情况导致日志写入不完整，也没有关系，redis提供了redis-check-aof工具，可以用来进行日志修复。</p>
<p>因为采用了追加方式，如果不做任何处理的话，AOF文件会变得越来越大，为此，redis提供了AOF文件重写（rewrite）机制，即当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。举个例子或许更形象，假如我们调用了100次INCR指令，在AOF文件中就要存储100条指令，但这明显是很低效的，完全可以把这100条指令合并成一条SET指令，这就是重写机制的原理。</p>
<p>在进行AOF重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响AOF文件的可用性，这点大家可以放心。</p>
<p>AOF方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作redis时，不小心执行了FLUSHALL，导致redis内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要redis配置了AOF持久化方式，且AOF文件还没有被重写（rewrite），我们就可以用最快的速度暂停redis并编辑AOF文件，将最后一行的FLUSHALL命令删除，然后重启redis，就可以恢复redis的所有数据到FLUSHALL之前的状态了。是不是很神奇，这就是AOF持久化方式的好处之一。但是如果AOF文件已经被重写了，那就无法通过这种方法来恢复数据了。</p>
<p>虽然优点多多，但AOF方式也同样存在缺陷，比如在同样数据规模的情况下，AOF文件要比RDB文件的体积大。而且，AOF方式的恢复速度也要慢于RDB方式。</p>
<p>如果你直接执行BGREWRITEAOF命令，那么redis会生成一个全新的AOF文件，其中便包括了可以恢复现有数据的最少的命令集。</p>
<p>如果运气比较差，AOF文件出现了被写坏的情况，也不必过分担忧，redis并不会贸然加载这个有问题的AOF文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：</p>
<p>1.备份被写坏的AOF文件<br> 2.运行redis-check-aof –fix进行修复<br> 3.用diff -u来看下两个文件的差异，确认问题点<br> 4.重启redis，加载修复后的AOF文件</p>
<h2 id="4、AOF重写"><a href="#4、AOF重写" class="headerlink" title="4、AOF重写"></a><strong>4、AOF重写</strong></h2><p>AOF重写的内部运行原理，我们有必要了解一下。</p>
<p>在重写即将开始之际，redis会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</p>
<p>与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。</p>
<p>当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。</p>
<p>当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中了。</p>
<h2 id="5、如何选择RDB和AOF"><a href="#5、如何选择RDB和AOF" class="headerlink" title="5、如何选择RDB和AOF"></a><strong>5、如何选择RDB和AOF</strong></h2><p>对于我们应该选择RDB还是AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。</p>
<h2 id="6、主从模式"><a href="#6、主从模式" class="headerlink" title="6、主从模式"></a><strong>6、主从模式</strong></h2><p>主从模式的应用场景有点类似于数据库的主从集群，主从往往是为了读写分离、backup  等目的才使用的，所谓主从模式简单的说就是有多个节点，里面包含主节点和从节点，结构如下图：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/fe191ea03b8c313a4494ce5cd82f1e07.jpeg" alt="Redis中主从、哨兵、分片集群入门篇"></p>
<p>从节点在保持连接后每隔一个时间节点会主动的和主节点通信并发送同步请求，而后进行同步。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/077da3deb76b3b49498aec96e4c92bb8.jpeg" alt="Redis中主从、哨兵、分片集群入门篇"></p>
<p>其实在整个流程中，最需要主要的就是数据间的同步，主要的同步方式有两种也就是全量同步和增量同步。</p>
<p>全量同步：全量同步一般使用在从节点刚接入主节点时进行全量复制，当然你也可以根据你的需求进行主动的全量同步</p>
<p>增量同步：Redis增量复制是指从节点初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。   增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令，一般使用缓冲区、队列(先进先出)等方式辅助进行增量的同步。</p>
<h2 id="7、哨兵模式"><a href="#7、哨兵模式" class="headerlink" title="7、哨兵模式"></a><strong>7、哨兵模式</strong></h2><p>哨兵模式是为了保证redis的高可用产生的架构，简单地说就是通过构建1个或多个哨兵对节点进行监控，如果master发生故障下线之后，哨兵之间会进行投票，在2.8之后使用的是Raft算法进行master选举，关于这个算法其实这个算法也应用于zookeeper和某些网络拓扑中，简单说就是在选举的过程可通信节点达成共识后那个投票选举master，而后进行故障转移操作。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/b006b2a827d407a68fc7b79182808d89.jpeg" alt="Redis中主从、哨兵、分片集群入门篇"></p>
<p>哨兵是作为一个进程单独运行在redis中，哨兵之间也是通过该进程进行通信的，这一点和zookeeper的原理也是类似的，假设一个6节点3个哨兵的集群的结构应该如下图：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200702100152234.png" alt="image-20200702100152234"></p>
<h2 id="8、那么哨兵是如何监控master下线的呢"><a href="#8、那么哨兵是如何监控master下线的呢" class="headerlink" title="8、那么哨兵是如何监控master下线的呢?"></a><strong>8、那么哨兵是如何监控master下线的呢?</strong></h2><p>前面也有看到哨兵之间会进行集群的检测和哨兵之间的互相监测，但是哨兵不用做什么配置，因为哨兵巧妙的利用了master的发布/订阅机制去自动发现其它也监控了统一master的sentinel节点，在监测master方面一般分为两种：</p>
<p>主观下线(Subjectively Down， 简称 SDOWN)指的是单个 Sentinel 实例对服务器做出的下线判断。</p>
<p>客观下线(Objectively Down， 简称 ODOWN)指的是多个 Sentinel 实例在对同一个服务器做出 SDOWN 判断，  并且通过命令互相交流之后， 得出的服务器下线判断。 一个 Sentinel 可以通过向另一个 Sentinel   发送命令来询问对方是否认为给定的服务器已下线。</p>
<h2 id="9、分片集群"><a href="#9、分片集群" class="headerlink" title="9、分片集群"></a><strong>9、分片集群</strong></h2><p>在上面的部分不管redis主从，还是高可用的 sentinel   哨兵模式。我们所做的这些工作只是保证了数据备份以及高可用，目前为止我们的程序一直都是向1台redis写数据，其他的redis只是备份而已。在实际使用中一般分片集群使用较多，我为什么要特意强调是分片集群呢，其实上面所说的主从和哨兵都是集群但是他们都是备份式的集群，实际数据是由一台进行控制的，所谓分片其实是将不同的数据按照一定的分布规则分布在不同的机器上</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/7c040c0e14c86d49d76b08dc101c57a2.jpeg" alt="Redis中主从、哨兵、分片集群入门篇"></p>
<p>在redis中，我们的应用在存取数据的时候需要根据一定的算法(一致性hash)进行计算和存取 ，那么在redis中如何实现数据分片的呢?   首先Redis至少存在三个数据分片，每个分片称为master，假设整个cluster有N个节点，那么每个节点都和其他N-1个节点保持连接和心跳，节点之间相互通信主要确认节点是否存活、节点的数据版本、投票选择新的master等</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200702100058383.png" alt="image-20200702100058383"></p>
<p>那么我们最终的集群结构大致如下：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/e42fe470d4bb59125b1f3fcecf65ce83.jpeg" alt="Redis中主从、哨兵、分片集群入门篇"></p>
<p>集群分片连接：<a href="https://www.cnblogs.com/flgb/p/10810269.html">https://www.cnblogs.com/flgb/p/10810269.html</a></p>
]]></content>
      <categories>
        <category>非关系型数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控k8s集群</title>
    <url>/2021/03/22/Prometheus%E7%9B%91%E6%8E%A7k8s%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="1、特征"><a href="#1、特征" class="headerlink" title="1、特征"></a>1、特征</h3><p>普罗米修斯的主要特点是：</p>
<ul>
<li>一个多维<a href="https://prometheus.io/docs/concepts/data_model/">数据模型，</a>其中包含通过度量标准名称和键/值对标识的时间序列数据</li>
<li>PromQL，一种<a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">灵活的查询语言</a> ，可利用此维度</li>
<li>不依赖分布式存储；单服务器节点是自治的</li>
<li>时间序列收集通过HTTP上的拉模型进行</li>
<li>通过中间网关支持<a href="https://prometheus.io/docs/instrumenting/pushing/">推送时间序列</a></li>
<li>通过服务发现或静态配置发现目标</li>
<li>多种图形和仪表板支持模式</li>
</ul>
<h3 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h3><p>Prometheus生态系统包含多个组件，其中许多是可选的：</p>
<ul>
<li><a href="https://github.com/prometheus/prometheus">Prometheus</a>主<a href="https://github.com/prometheus/prometheus">服务器</a>，它会刮取并存储时间序列数据</li>
<li><a href="https://prometheus.io/docs/instrumenting/clientlibs/">客户端库，</a>用于检测应用程序代码</li>
<li>一个支持短期工作的<a href="https://github.com/prometheus/pushgateway">推送网关</a></li>
<li>诸如HAProxy，StatsD，Graphite等服务的专用<a href="https://prometheus.io/docs/instrumenting/exporters/">出口商</a></li>
<li>一个<a href="https://github.com/prometheus/alertmanager">alertmanager</a>处理警报</li>
<li>各种支持工具</li>
</ul>
<p>大多数Prometheus组件都是用<a href="https://golang.org/">Go</a>编写的，因此易于构建和部署为静态二进制文件。</p>
<h3 id="3、架构"><a href="#3、架构" class="headerlink" title="3、架构"></a>3、架构</h3><p>下图说明了Prometheus的体系结构及其某些生态系统组件：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/architecture.png" alt="普罗米修斯建筑"></p>
<p>​        从上图可以看出，Prometheus 的主要模块包括：Prometheus server, exporters, Pushgateway, PromQL, Alertmanager 以及图形界面。Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p>
<h4 id="Prometheus工作流程"><a href="#Prometheus工作流程" class="headerlink" title="Prometheus工作流程"></a>Prometheus工作流程</h4><p>​        1.Prometheus server 定期从配置好的 jobs 或者 exporters 中拉取 metrics，或者从Pushgateway 拉取metrics，或者从其他的 Prometheus server 中拉 metrics。</p>
<p>​        2.Prometheus server 在本地存储收集到的 metrics，并运行已定义好的 alert.rules，通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。记录新的时间序列或者向 Alertmanager 推送警报。</p>
<p>​        3.Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。</p>
<h3 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h3><p>前提需要有helm环境：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226101438796.png" alt="image-20191226101438796"></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">helm  <span class="hljs-keyword">install</span>  prometheus   stable/prometheus<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226102249663.png" alt="image-20191226102249663"></p>
<p>安装成功，查看pod状态会发现有两个处于pending状态，是因为需要请求pv</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226102456756.png" alt="image-20191226102456756"></p>
<p>这里使用hostPath来创建pv</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> prometheus-pv1<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">2</span>Gi<br><span class="hljs-symbol">  volumeMode:</span> Filesystem<br><span class="hljs-symbol">  accessModes:</span><br>  -  ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Retain<br><span class="hljs-symbol">  hostPath:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/app/</span>prometheus/pv1<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226104015715.png" alt="image-20191226104015715"></p>
<p>查看pod状态会发现有个pod会报错，并查看日志是报错是容器名不同</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226110521033.png" alt="image-20191226110521033"></p>
<p>真正的原因是因为使用的hoatPath，pvc请求的权限不够，到worker节点给对应的hostpath加777的权限即可，这是我通过rancher查看到的报错</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">msg</span>=<span class="hljs-string">&quot;Error opening query log file&quot;</span> <span class="hljs-attribute">file</span>=/data/queries.active <span class="hljs-attribute">err</span>=<span class="hljs-string">&quot;open /data/queries.active: permission denied&quot;</span><br></code></pre></td></tr></table></figure>
<h3 id="5、访问web界面"><a href="#5、访问web界面" class="headerlink" title="5、访问web界面"></a>5、访问web界面</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226110837974.png" alt="image-20191226110837974"></p>
<p>这里还需要修改Prometheus-server的Port类型为NodePort。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226111719532.png" alt="image-20191226111719532"></p>
<h3 id="6、安装grafana"><a href="#6、安装grafana" class="headerlink" title="6、安装grafana"></a>6、安装grafana</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span>  pull  stable/grafana<br><span class="hljs-attribute">tar</span> xvf grafana-<span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.tgz<br><span class="hljs-attribute">vim</span> grafana/values.yaml    #设置admin的密码为admin<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226123259170.png" alt="image-20191226123259170"></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">helm  <span class="hljs-keyword">install</span> grafana  ./grafana<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226112115185.png" alt="image-20191226112115185"></p>
<p>由于grafana没有使用持久存储，根据需求修改为hostpath持久存储，需要注意的是，宿主机目录也需要777的权限</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226112409792.png" alt="image-20191226112409792"></p>
<p>还需要需改grafana的svc类型为NodePort</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226112700284.png" alt="image-20191226112700284"></p>
<p>访问web界面，用户admin，密码：admin123</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226112917716.png" alt="image-20191226112917716"></p>
<h3 id="7、导入Prometheus"><a href="#7、导入Prometheus" class="headerlink" title="7、导入Prometheus"></a>7、导入Prometheus</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226123838456.png" alt="image-20191226123838456"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226123903143.png" alt="image-20191226123903143"></p>
<p>填入Prometheus的地址</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124039501.png" alt="image-20191226124039501"></p>
<p>则表示验证通过</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124212726.png" alt="image-20191226124212726"></p>
<p>导入grafana的模板</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124257031.png" alt="image-20191226124257031"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124315485.png" alt="image-20191226124315485"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124336333.png" alt="image-20191226124336333"></p>
<p>这里选择Prometheus</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124409629.png" alt="image-20191226124409629"></p>
<p>即可看到灰常华丽的仪表盘了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226124450163.png" alt="image-20191226124450163"></p>
<p>这里提供几个模板的编号：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10000</span>，<span class="hljs-number">315</span>，<span class="hljs-number">7249</span>，<span class="hljs-number">5228</span>，<span class="hljs-number">8685</span>，<span class="hljs-number">8588</span><br></code></pre></td></tr></table></figure>
<h3 id="8、配置alertmanager告警"><a href="#8、配置alertmanager告警" class="headerlink" title="8、配置alertmanager告警"></a>8、配置alertmanager告警</h3><h4 id="8-1关联alertmanager和prometheus"><a href="#8-1关联alertmanager和prometheus" class="headerlink" title="8.1关联alertmanager和prometheus"></a>8.1关联alertmanager和prometheus</h4><p>添加alertmanager的服务名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">alertmanagers:<br>- static_configs:<br>   - targets: [<span class="hljs-string">&quot;prometheus-alertmanager:80&quot;</span>]<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1611813608(1).jpg" alt="1611813608(1)"></p>
<p>添加告警规则</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1611813573(1).jpg" alt="1611813573(1)"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rules.yml: |<br>  groups:<br>  - name: Host<br>    rules:<br>    - alert: HostMemory Usage<br>      expr: sum(kube_pod_container_resource_requests_memory_bytes) / sum(kube_node_status_allocatable_memory_bytes) * 100 &gt;  80<br>      <span class="hljs-keyword">for</span>: 1m<br>      labels:<br>        name: Memory<br>        team: wechat<br>        severity: Warning<br>      annotations:<br>        summary: <span class="hljs-string">&quot; &#123;&#123; <span class="hljs-variable">$labels</span>.appname &#125;&#125; &quot;</span><br>        description: <span class="hljs-string">&quot;宿主机内存使用率超过80%.&quot;</span><br>        value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;&quot;</span><br>    - alert: HostCPU Usage<br>      expr: sum(kube_pod_container_resource_requests_cpu_cores) / sum(kube_node_status_allocatable_cpu_cores) * 100 &gt; 60<br>      <span class="hljs-keyword">for</span>: 1m<br>      labels:<br>        name: CPU<br>        team: wechat<br>        severity: Warning<br>      annotations:<br>        summary: <span class="hljs-string">&quot; &#123;&#123; <span class="hljs-variable">$labels</span>.appname &#125;&#125; &quot;</span><br>        description: <span class="hljs-string">&quot;宿主机CPU使用率超过60%.&quot;</span><br>        value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;&quot;</span><br>    - alert: HostFilesystem Usage<br>      expr: (sum(node_filesystem_size_bytes&#123;device!=<span class="hljs-string">&quot;rootfs&quot;</span>&#125;) - sum(node_filesystem_free_bytes&#123;device!=<span class="hljs-string">&quot;rootfs&quot;</span>&#125;)) / sum(node_filesystem_size_bytes&#123;device!=<span class="hljs-string">&quot;rootfs&quot;</span>&#125;) &gt;  0.8<br>      <span class="hljs-keyword">for</span>: 1m<br>      labels:<br>        name: Disk<br>        team: wechat<br>        severity: Warning<br>      annotations:<br>        summary: <span class="hljs-string">&quot; &#123;&#123; <span class="hljs-variable">$labels</span>.appname &#125;&#125; &quot;</span><br>        description: <span class="hljs-string">&quot; 宿主机 [ &#123;&#123; <span class="hljs-variable">$labels</span>.mountpoint &#125;&#125; ]分区使用超过80%.&quot;</span><br>        value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;%&quot;</span><br></code></pre></td></tr></table></figure>
<p>保存后重新启动Prometheus服务。</p>
<h4 id="8-2配置企业微信告警"><a href="#8-2配置企业微信告警" class="headerlink" title="8.2配置企业微信告警"></a>8.2配置企业微信告警</h4><p>编写告警模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>data:<br>  wechat.tmpl: |<br>    &#123;&#123; define <span class="hljs-string">&quot;wechat.default.message&quot;</span> &#125;&#125;<br>    &#123;&#123; range .Alerts &#125;&#125;<br>    ========start==========<br>    告警程序: prometheus_alert<br>    告警级别: &#123;&#123; .Labels.severity &#125;&#125;<br>    告警类型: &#123;&#123; .Labels.alertname &#125;&#125;<br>    故障主机: &#123;&#123; .Labels.instance &#125;&#125;<br>    告警主题: &#123;&#123; .Annotations.summary &#125;&#125;<br>    告警详情: &#123;&#123; .Annotations.description &#125;&#125;<br>    触发时间: &#123;&#123; .StartsAt.Format <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;<br>    ========end==========<br>    &#123;&#123; end &#125;&#125;<br>    &#123;&#123; end &#125;&#125;<br>kind: ConfigMap<br>metadata:<br>  name: wechat-tmpl<br>  namespace: default<br></code></pre></td></tr></table></figure>
<p>修改prometheus-alertmanager的yaml文件，将微信配置挂载进来</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/1616395467(1).jpg" alt="1616395467(1)"></p>
<p>登录企业微信，创建机器人</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/1616395487(1).jpg" alt="1616395487(1)"></p>
<p>获取api_secret和agent_id</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/1616395498(1).jpg" alt="1616395498(1)"></p>
<p>点击我的企业、企业信息，获取corp_id</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/asdw.jpg" alt="asdw"></p>
<p>需要报警的组，获取to_party</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/1616395516(1).jpg" alt="1616395516(1)"></p>
<p>修改prometheus-alertmanager的configmap文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>data:<br>  alertmanager.yml: |<br>    global:<br>      resolve_timeout: 5m<br>    route:<br>      group_interval: 5m<br>      group_wait: 10s<br>      receiver: email<br>      repeat_interval: 10m<br>      routes:<br>      - receiver: wechat<br>        group_wait: 10s<br>        match:<br>          team: wechat<br>    templates:<br>      - <span class="hljs-string">&quot;/etc/alertmanager-tmpl/wechat.tmpl&quot;</span><br>    receivers:<br>    - name: wechat<br>      wechat_configs:<br>      - corp_id: ww8e2ba8bad3ee2df5<br>        to_party: 1<br>        agent_id: 1000002<br>        api_secret: HbyB2SNaa26y9fziO7zt3FQnd34wT1i_iB6Q0I6KG60<br>        send_resolved: <span class="hljs-literal">true</span><br>kind: ConfigMap<br>metadata:<br>  labels:<br>    app: prometheus<br>  name: prometheus-alertmanager<br>  namespace: default<br></code></pre></td></tr></table></figure>
<p>重启alertmanager服务即可，如果需要测试，在告警规则降低阈值即可。</p>
<h4 id="8-3配置邮件告警"><a href="#8-3配置邮件告警" class="headerlink" title="8.3配置邮件告警"></a>8.3配置邮件告警</h4><p>修改alertmanager的configmap文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>data:<br>  alertmanager.yml: |<br>    global:<br>      resolve_timeout: 5m<br>      smtp_smarthost: smtp.qq.com:587       <span class="hljs-comment">#端口有的是465，有的是587</span><br>      smtp_from: 982012556@qq.com         <span class="hljs-comment">#邮箱地址</span><br>      smtp_auth_username: 982012556@qq.com     <span class="hljs-comment">#邮箱地址</span><br>      smtp_auth_password: hblcukkqnzwebdai     <span class="hljs-comment">#在邮箱中开启SMTP服务所得的密码</span><br>      smtp_require_tls: <span class="hljs-literal">true</span><br>    route:<br>      group_interval: 5m<br>      group_wait: 10s<br>      receiver: email<br>      repeat_interval: 10m<br>      routes:<br>      - receiver: email<br>        group_wait: 10s<br>        match:<br>          team: wechat          <span class="hljs-comment">#这是我设置的规则组，可在Prometheus的配置文件中随意设置</span><br>    receivers:<br>    - name: email<br>      email_configs:<br>      - to: 982012556@qq.com<br>        send_resolved: <span class="hljs-literal">true</span><br>kind: ConfigMap<br>metadata:<br>  labels:<br>    app: prometheus<br>  name: prometheus-alertmanager<br>  namespace: default<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/1616395526(1).jpg" alt="1616395526(1)"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Rancher宕机后命令行接管K8s集群</title>
    <url>/2021/04/01/Rancher%E5%AE%95%E6%9C%BA%E5%90%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E7%AE%A1K8s%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>​        使用rancher创建的k8s集群，当rancher的UI宕机不能访问后，不能接续使用<code>kubectl</code>接管集群，从 Rancher v2.2.2 开始，从 Rancher UI 创建的集群默认开启<code>授权集群访问地址</code>。创建好集群后 Rancher UI 生成的 kubecfg 文件中将显示多个 master 节点 IP 对应的 <code>server</code>。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210331142119003.png" alt="image-20210331142119003"></p>
<h2 id="1、命令行访问集群"><a href="#1、命令行访问集群" class="headerlink" title="1、命令行访问集群"></a>1、命令行访问集群</h2><p>​        自行下载好kubectl文件，在.kube/config中配置好集群访问地址。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210331142403423.png" alt="image-20210331142403423"></p>
<p>在命令行查看</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210331142458066.png" alt="image-20210331142458066"></p>
<h2 id="2、切换server控制端"><a href="#2、切换server控制端" class="headerlink" title="2、切换server控制端"></a>2、切换server控制端</h2><p>查看集群可使用的context</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">kubectl <span class="hljs-built_in">config</span> view<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210331142807728.png" alt="image-20210331142807728"></p>
<p>查看现在集群默认使用的context</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">kubectl <span class="hljs-built_in">config</span> current-<span class="hljs-built_in">context</span><br></code></pre></td></tr></table></figure>
<p>通过context：name来切换，比如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">kubectl <span class="hljs-keyword">config</span> <span class="hljs-keyword">use</span>-<span class="hljs-keyword">context</span>  test-docker2<br></code></pre></td></tr></table></figure>
<p>即可实现rancher宕机后也可继续接管集群了。</p>
<h2 id="3、未保存kubeconfig文件"><a href="#3、未保存kubeconfig文件" class="headerlink" title="3、未保存kubeconfig文件"></a>3、未保存kubeconfig文件</h2><p>参考：<a href="https://www.xtplayer.cn/rancher/restore-kubecfg/">https://www.xtplayer.cn/rancher/restore-kubecfg/</a></p>
]]></content>
      <categories>
        <category>Rancher</category>
      </categories>
      <tags>
        <tag>Rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+PicGo+Gitee写博客和个人博客图床</title>
    <url>/2020/12/30/Typora-PicGo-Gitee%E5%86%99%E5%8D%9A%E5%AE%A2%E5%92%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="图床简介"><a href="#图床简介" class="headerlink" title="图床简介"></a>图床简介</h2><p>​        在写博客的过程中，我们都会遇到<strong>插入图片</strong>的情况，图片存在本地的话，我们把博客上传到网站后，会没有办法显示，而且存放在本地移植性也不太好，我们就需要图床辅助我们。</p>
<p>​        图床就是一个便于在博文中插入在线图片连接的个人图片仓库。设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除非自己亲自删除。</p>
<p>备注：需要nodejs环境</p>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><ul>
<li><code>Typora</code>: Markdown工具，写Markdown文件的神器，简洁、方便、免费</li>
<li><code>PicGo</code> 开源的图片管理工具，可以自己上传图片到各种图床</li>
<li><code>gitee-uploader</code>: PicGo依赖这个插件进行上传到<code>gitee</code> 仓库</li>
<li><code>gitee码云</code>: 借助<code>gitee</code> 码云建立自己的仓库，构建<strong>免费</strong>图床，国内速度快</li>
</ul>
<h3 id="Picgo-介绍"><a href="#Picgo-介绍" class="headerlink" title="Picgo 介绍"></a>Picgo 介绍</h3><p>详情请看github地址： <a href="https://github.com/Molunerfinn/">https://github.com/Molunerfinn/</a></p>
<p>安装完成后打开，选择插件安装gitee</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229153454132.png" alt="image-20201229153454132"></p>
<h2 id="gitee-建立自己的图片仓库"><a href="#gitee-建立自己的图片仓库" class="headerlink" title="gitee 建立自己的图片仓库"></a>gitee 建立自己的图片仓库</h2><p>官网：<a href="https://gitee.com/login">https://gitee.com/login</a></p>
<p>创建存放图片的库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229154329807.png" alt="image-20201229154329807"></p>
<p>获取私人令牌</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229154433314.png" alt="image-20201229154433314"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229154601830.png" alt="image-20201229154601830"></p>
<p>token令牌，进行复制后面会PicGo会用到，路径直接写名称就好，不用加/号</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229155712389.png" alt="image-20201229155712389"></p>
<p>测试上传</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229155810273.png" alt="image-20201229155810273"></p>
<p>在gitee查看</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229155830364.png" alt="image-20201229155830364"></p>
<h2 id="Typora-设置支持PicGo"><a href="#Typora-设置支持PicGo" class="headerlink" title="Typora 设置支持PicGo"></a>Typora 设置支持PicGo</h2><blockquote>
<p>设置Typora工具，当插入图片的时候，触发上传图片操作，然后上传服务选择PicGo.app来支持</p>
</blockquote>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20201229160054210.png" alt="image-20201229160054210"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装虚拟机</title>
    <url>/2021/04/01/VMware%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="1、创建虚拟机"><a href="#1、创建虚拟机" class="headerlink" title="1、创建虚拟机"></a>1、创建虚拟机</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165040949.png" alt="image-20210330165040949"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165110723.png" alt="image-20210330165110723"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165302189.png" alt="image-20210330165302189"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165408082.png" alt="image-20210330165408082"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165503816.png" alt="image-20210330165503816"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165531369.png" alt="image-20210330165531369"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165623238.png" alt="image-20210330165623238"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330165746567.png" alt="image-20210330165746567"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170105890.png" alt="image-20210330170105890"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170315406.png" alt="image-20210330170315406"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170446550.png" alt="image-20210330170446550"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170512815.png" alt="image-20210330170512815"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170643041.png" alt="image-20210330170643041"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170728249.png" alt="image-20210330170728249"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330170748430.png" alt="image-20210330170748430"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330171008241.png" alt="image-20210330171008241"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330171125650.png" alt="image-20210330171125650"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330171225072.png" alt="image-20210330171225072"></p>
<h2 id="2、配置网络"><a href="#2、配置网络" class="headerlink" title="2、配置网络"></a>2、配置网络</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330172715893.png" alt="image-20210330172715893"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330172908460.png" alt="image-20210330172908460"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330173034578.png" alt="image-20210330173034578"></p>
<h2 id="3、关闭防火墙和SElinux"><a href="#3、关闭防火墙和SElinux" class="headerlink" title="3、关闭防火墙和SElinux"></a>3、关闭防火墙和SElinux</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">systemctl stop firewalld<br>systemctl <span class="hljs-builtin-name">disable</span> firewalld<br><br>vim   /etc/selinux/config<br><span class="hljs-attribute">SELINUX</span>=disabled<br></code></pre></td></tr></table></figure>
<h2 id="4、关机保存快照"><a href="#4、关机保存快照" class="headerlink" title="4、关机保存快照"></a>4、关机保存快照</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">init</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20210330173400861.png" alt="image-20210330173400861"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>alertmanager配置文件详解</title>
    <url>/2021/03/22/alertmanager%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">smtp_smarthost:</span> <span class="hljs-string">&#x27;localhost:25&#x27;</span><br>  <span class="hljs-attr">smtp_from:</span> <span class="hljs-string">&#x27;alertmanager@example.org&#x27;</span>         <span class="hljs-comment">#用于邮件通知的P发件人</span><br><br><span class="hljs-attr">route:</span>                                          <span class="hljs-comment">#每个输入警报进入根路由</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;team-X-mails&#x27;</span>                      <span class="hljs-comment">#根路由不得包含任何匹配项，因为它是所有警报的入口点</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;cluster&#x27;</span>]            <span class="hljs-comment">#将传入警报分组的标签。例如，将有个针对cluster = A和alertname = LatencyHigh的警报进入批处理成一个组</span><br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">30s</span>                               <span class="hljs-comment">#当传入的警报创建了一组新的警报时，请至少等待多少秒发送初始通知</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">5m</span>                            <span class="hljs-comment">#发送第一个通知时，请等待多少分钟发送一批已开始为该组触发的新警报</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">3h</span>                           <span class="hljs-comment">#如果警报已成功发送，请等待多少小时以重新发送警报</span><br>  <span class="hljs-attr">routes:</span>                                       <span class="hljs-comment">#子路由，父路由的所有属性都会被子路由继承</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match_re:</span>                                   <span class="hljs-comment">#此路由在警报标签上执行正则表达式匹配，以捕获与服务列表相关的警报</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">^(foo1|foo2|baz)$</span><br>    <span class="hljs-attr">receiver:</span> <span class="hljs-string">team-X-mails</span><br><br>    <span class="hljs-attr">routes:</span>                                     <span class="hljs-comment">#服务有严重警报，任何警报子路径不匹配，即通过父路由配置直接发送给收件人</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>        <span class="hljs-attr">severity:</span> <span class="hljs-string">critical</span><br>      <span class="hljs-attr">receiver:</span> <span class="hljs-string">team-X-pager</span><br><br>    <span class="hljs-attr">routes:</span>                                      <span class="hljs-comment">#此路由处理来自数据库服务的所有警报</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>        <span class="hljs-attr">severity:</span> <span class="hljs-string">critical</span><br>      <span class="hljs-attr">receiver:</span> <span class="hljs-string">team-Y-pager</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">database</span><br>    <span class="hljs-attr">receiver:</span> <span class="hljs-string">team-DB-pager</span>                       <span class="hljs-comment">#还可以按受影响的数据库对警报进行分组</span><br>    <span class="hljs-attr">group_by:</span> [<span class="hljs-string">alertname</span>, <span class="hljs-string">cluster</span>, <span class="hljs-string">database</span>]<br><br>    <span class="hljs-attr">routes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>        <span class="hljs-attr">owner:</span> <span class="hljs-string">team-X</span><br>      <span class="hljs-attr">receiver:</span> <span class="hljs-string">team-X-pager</span><br><br><span class="hljs-comment">#如果另一个警报正在触发，则禁止规则允许将一组警报静音，如果同一警报已经严重，我们将使用此选项禁用任何警告级别的通知</span><br><span class="hljs-attr">inhibit_rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">source_match:</span><br>    <span class="hljs-attr">severity:</span> <span class="hljs-string">&#x27;critical&#x27;</span><br>  <span class="hljs-attr">target_match:</span><br>    <span class="hljs-attr">severity:</span> <span class="hljs-string">&#x27;warning&#x27;</span><br>  <span class="hljs-attr">equal:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br><br><span class="hljs-comment">#如果警报名称相同，则应用抑制，如果源警报和目标警报中均缺少“equal”中列出的所有标签名称，则将应用禁止规则！</span><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;team-X-mails&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;team-X+alerts@example.org, team-Y+alerts@example.org&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;team-X-pager&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;team-X+alerts-critical@example.org&#x27;</span><br>  <span class="hljs-attr">pagerduty_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">routing_key:</span> <span class="hljs-string">&lt;team-X-key&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch性能测试工具rally</title>
    <url>/2021/01/20/elasticsearch%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7rally/</url>
    <content><![CDATA[<h2 id="1、esrally功能：es的性能测试工具"><a href="#1、esrally功能：es的性能测试工具" class="headerlink" title="1、esrally功能：es的性能测试工具"></a>1、esrally功能：es的性能测试工具</h2><p>esrally不支持windows版本，目前只支持Linux和Mac OS。</p>
<h3 id="1-1-依赖环境"><a href="#1-1-依赖环境" class="headerlink" title="1.1 依赖环境"></a>1.1 依赖环境</h3><p>Install Python 3.8+ including <code>pip3</code>, git 1.9+ and an appropriate JDK to run ElasticsearchBe sure that <code>JAVA_HOME</code> points to that JDK</p>
<h3 id="1-2安装Python3"><a href="#1-2安装Python3" class="headerlink" title="1.2安装Python3"></a>1.2安装Python3</h3><p>官网： <a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> gcc <span class="hljs-keyword">make</span> cmake zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel<br>tar xvf Python-<span class="hljs-number">3.8</span>.<span class="hljs-number">5</span>.tgz<br>./configure<br><span class="hljs-keyword">make</span> &amp;&amp; <span class="hljs-keyword">make</span> install<br><span class="hljs-keyword">python3</span> -V<br><br>#卸载<span class="hljs-keyword">python</span><br>rpm -<span class="hljs-keyword">qa</span>|<span class="hljs-keyword">grep</span> <span class="hljs-keyword">python</span>|xargs rpm -ev --allmatches --nodeps ##强制删除已安装程序及其关联<br>whereis <span class="hljs-keyword">python</span> |xargs rm -frv ##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令<br>whereis <span class="hljs-keyword">python</span> ##验证删除，返回无结果<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806113743822.png" alt="image-20200806113743822"></p>
<h3 id="1-3安装pip3"><a href="#1-3安装pip3" class="headerlink" title="1.3安装pip3"></a>1.3安装pip3</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#首先安装setuptools</span><br><span class="hljs-attribute">wget</span> --no-check-certificate  https://files.pythonhosted.org/packages/<span class="hljs-number">4</span>f/<span class="hljs-number">20</span>/b<span class="hljs-number">97449</span>e<span class="hljs-number">107801263</span>cf<span class="hljs-number">6</span>df<span class="hljs-number">2</span>eceaeed<span class="hljs-number">290</span>ee<span class="hljs-number">63262</span>ac<span class="hljs-number">2</span>c<span class="hljs-number">6</span>f<span class="hljs-number">736</span>df<span class="hljs-number">6964</span>a<span class="hljs-number">90879</span>/setuptools-<span class="hljs-number">49</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.zip<br><br><span class="hljs-attribute">unzip</span> setuptools-<span class="hljs-number">49</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.zip<br><span class="hljs-attribute">cd</span> setuptools-<span class="hljs-number">49</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>/<br><span class="hljs-attribute">python3</span> setup.py build<br><span class="hljs-attribute">python3</span> setup.py install<br><br><br><span class="hljs-attribute">wget</span>  --no-check-certificate  https://files.pythonhosted.org/packages/<span class="hljs-number">68</span>/<span class="hljs-number">1</span>a/<span class="hljs-number">8</span>cfcf<span class="hljs-number">3</span>a<span class="hljs-number">8</span>cba<span class="hljs-number">0</span>dd<span class="hljs-number">0</span>f<span class="hljs-number">125927</span>c<span class="hljs-number">986</span>b<span class="hljs-number">1502</span>f<span class="hljs-number">2</span>eed<span class="hljs-number">284</span>c<span class="hljs-number">63</span>fdfd<span class="hljs-number">6797</span>ea<span class="hljs-number">74300</span>ae<span class="hljs-number">4</span>/pip-<span class="hljs-number">20</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.tar.gz<br><br><span class="hljs-attribute">tar</span> xvf pip-<span class="hljs-number">20</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.tar.gz<br><span class="hljs-attribute">cd</span> pip-<span class="hljs-number">20</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>/<br><span class="hljs-attribute">python3</span> setup.py build<br><span class="hljs-attribute">python3</span> setup.py install<br><span class="hljs-attribute">pip3</span> -V<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806114132939.png" alt="image-20200806114132939"></p>
<h3 id="1-4安装git"><a href="#1-4安装git" class="headerlink" title="1.4安装git"></a>1.4安装git</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#安装依赖</span><br>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker<br>wget https:<span class="hljs-regexp">//mi</span>rrors.edge.kernel.org<span class="hljs-regexp">/pub/</span>software<span class="hljs-regexp">/scm/gi</span>t/git-<span class="hljs-number">2.8</span>.<span class="hljs-number">0</span>.tar.gz<br>tar xvf git-<span class="hljs-number">2.8</span>.<span class="hljs-number">0</span>.tar.gz<br>cd git-<span class="hljs-number">2.8</span>.<span class="hljs-number">0</span>/<br>make &amp;&amp; make install<br><br>vim <span class="hljs-regexp">/etc/</span>profile<br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-regexp">/root/gi</span>t-<span class="hljs-number">2.8</span>.<span class="hljs-number">0</span>/bin<br><br>source <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure>
<p>环境准备完毕</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806142208386.png" alt="image-20200806142208386"></p>
<h2 id="2、安装Rally"><a href="#2、安装Rally" class="headerlink" title="2、安装Rally"></a>2、安装Rally</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> esrally<br></code></pre></td></tr></table></figure>
<p>报错</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ERROR</span>: THESE PACKAGES DO NOT MATCH THE HASHES FROM THE REQUIREMENTS FILE. If you have updated the package versions, please update the hashes. Otherwise, examine the package contents carefully; someone may have tampered with them.<br>    <span class="hljs-attribute">esrally</span> from https://files.pythonhosted.org/packages/<span class="hljs-number">84</span>/b<span class="hljs-number">6</span>/b<span class="hljs-number">4</span>ff<span class="hljs-number">1889355508</span>c<span class="hljs-number">78</span>ed<span class="hljs-number">34</span>c<span class="hljs-number">7772</span>a<span class="hljs-number">84</span>b<span class="hljs-number">3</span>b<span class="hljs-number">54</span>b<span class="hljs-number">1</span>fcbf<span class="hljs-number">62</span>d<span class="hljs-number">2</span>f<span class="hljs-number">8433</span>d<span class="hljs-number">4</span>f<span class="hljs-number">0</span>eb<span class="hljs-number">0</span>f<span class="hljs-number">6</span>a<span class="hljs-number">4</span>/esrally-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-py<span class="hljs-number">3</span>-none-any.whl#sha<span class="hljs-number">256</span>=e<span class="hljs-number">12</span>c<span class="hljs-number">735</span>f<span class="hljs-number">7058</span>d<span class="hljs-number">555835</span>daa<span class="hljs-number">58</span>a<span class="hljs-number">8</span>a<span class="hljs-number">7</span>dd<span class="hljs-number">27</span>f<span class="hljs-number">1</span>ad<span class="hljs-number">8575</span>ad<span class="hljs-number">18052</span>ac<span class="hljs-number">3</span>d<span class="hljs-number">864</span>c<span class="hljs-number">6</span>cd<span class="hljs-number">6766</span>d<span class="hljs-number">8</span>:<br>        <span class="hljs-attribute">Expected</span> sha<span class="hljs-number">256</span> e<span class="hljs-number">12</span>c<span class="hljs-number">735</span>f<span class="hljs-number">7058</span>d<span class="hljs-number">555835</span>daa<span class="hljs-number">58</span>a<span class="hljs-number">8</span>a<span class="hljs-number">7</span>dd<span class="hljs-number">27</span>f<span class="hljs-number">1</span>ad<span class="hljs-number">8575</span>ad<span class="hljs-number">18052</span>ac<span class="hljs-number">3</span>d<span class="hljs-number">864</span>c<span class="hljs-number">6</span>cd<span class="hljs-number">6766</span>d<span class="hljs-number">8</span><br>             <span class="hljs-attribute">Got</span>        bba<span class="hljs-number">4</span>f<span class="hljs-number">1907942</span>fec<span class="hljs-number">7284</span>bc<span class="hljs-number">8</span>d<span class="hljs-number">099</span>d<span class="hljs-number">1881</span>b<span class="hljs-number">0</span>a<span class="hljs-number">5</span>b<span class="hljs-number">2</span>ba<span class="hljs-number">87631</span>e<span class="hljs-number">289240</span>b<span class="hljs-number">086</span>fb<span class="hljs-number">2</span>cef<span class="hljs-number">9</span>e<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">python3 -m pip install --<span class="hljs-keyword">user</span> <span class="hljs-title">--upgrade</span> pip<br></code></pre></td></tr></table></figure>
<p>再次执行安装</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806134605060.png" alt="image-20200806134605060"></p>
<h2 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">esrally</span> configure                <span class="hljs-comment">#首次配置 检测环境</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806153619205.png" alt="image-20200806153619205"></p>
<p>3.1 track介绍</p>
<p>​        默认使用的track是geonames 。track 是赛道的意思，在这里是指压测用的数据和测试策略。esrally 自带的track都在 github 上，地址在这里 <a href="https://github.com/elastic/rally-tracks%E3%80%82%E5%9C%A8%E8%AF%A5">https://github.com/elastic/rally-tracks。在该</a> repository 中，有很多测试数据，比如 geonames、geopoint、logging、nested 等，每个数据文件夹中的 README.md 中有详细的数据介绍，而 track.json 便是压测策略的定义文件。</p>
<p>​        附上esrally本身自带的数据集：主要用来压力测试的数据。默认测试就是选择geonames数据</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806170040030.png" alt="image-20200806170040030"></p>
<p>这里的需求很简单，需要测试的是现有集群，所以使用pipeline方式，官方自带的数据样本必须要安装git ,然后下载</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">esrally  <span class="hljs-attribute">--target-hosts</span>=127.0.0.1:9200  <span class="hljs-attribute">--pipeline</span>=benchmark-only  <span class="hljs-attribute">--track</span>=percolator        #测试远端的集群。更换IP即可<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806170202853.png" alt="image-20200806170202853"></p>
<p>成功截图，很长截取了最后部分</p>
<p><strong><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806170302756.png" alt="image-20200806170302756"></strong></p>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/laoyang360/article/details/52155481">https://blog.csdn.net/laoyang360/article/details/52155481</a></p>
<p><a href="https://github.com/elastic/rally">https://github.com/elastic/rally</a></p>
<p><a href="https://esrally.readthedocs.io/en/latest/quickstart.html">https://esrally.readthedocs.io/en/latest/quickstart.html</a></p>
]]></content>
      <categories>
        <category>Elk</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerignore文件</title>
    <url>/2021/03/18/dockerignore%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>​    该.dockerignore文件是隐藏文件也是一个工具，可以帮助你定义你真正需要的Docker构建上下文。使用此文件，你可以为这些文件和文件夹规则指定忽略规则和异常，这些规则和异常将不包含在构建上下文中，因此不会打包到存档中并上载到Docker服务器。</p>
<h2 id="1、dockerignore语法"><a href="#1、dockerignore语法" class="headerlink" title="1、dockerignore语法"></a>1、dockerignore语法</h2><p>​    该.dockerignore文件类似于gitignore该git工具使用的文件。与.gitignore文件类似，它允许你为生成构建上下文时Docker客户端应忽略的文件和文件夹指定模式。虽然.dockerignore用于描述忽略模式的文件语法类似于.gitignore，但它并不相同。<br>​    该.dockerignore模式匹配的语法是基于filepath.Match()和filepath.clean的功能，包括一些补充。如：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">Docker还支持一个**匹配任意数量目录（包括零）的特殊通配符字符串。例如，**/*<span class="hljs-string">.go</span>将排除<span class="hljs-string">.go</span> 在所有目录中找到的以该结尾的所有文件，包括构建上下文的根。<br></code></pre></td></tr></table></figure>
<h2 id="2、以下是完整的语法-dockerignore："><a href="#2、以下是完整的语法-dockerignore：" class="headerlink" title="2、以下是完整的语法.dockerignore："></a>2、以下是完整的语法.dockerignore：</h2><figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">pattern:<br>&#123;term&#125;<br>术语：<br><span class="hljs-string">&#x27;*&#x27;</span>      匹配任何非分隔符字符序列<br><span class="hljs-string">&#x27;？&#x27;</span>     匹配任何单个非分隔符<br><span class="hljs-string">&#x27;[&#x27;</span>[<span class="hljs-string">&#x27;^&#x27;</span>] &#123;character-range&#125;<span class="hljs-string">&#x27;]&#x27;</span><br>字符类（必须是非空的）<br>c匹配字符c  （c！=<span class="hljs-string">&#x27;*&#x27;</span>，<span class="hljs-string">&#x27;？&#x27;</span>，<span class="hljs-string">&#x27;\\&#x27;</span>，<span class="hljs-string">&#x27;[&#x27;</span>）<br><span class="hljs-string">&#x27;\\&#x27;</span>    c匹配字符c<br><br>字符范围：<br>c匹配字符c  （c！=<span class="hljs-string">&#x27;\\&#x27;</span>，<span class="hljs-string">&#x27; - &#x27;</span>，<span class="hljs-string">&#x27;]&#x27;</span>）<br><span class="hljs-string">&#x27;\\&#x27;</span>    c匹配字符c<br>lo<span class="hljs-string">&#x27; - &#x27;</span>hi匹配字符c <span class="hljs-keyword">for</span> lo＆<span class="hljs-keyword">lt</span>; = c＆<span class="hljs-keyword">lt</span>; = hi<br><br>补充：<br><span class="hljs-string">&#x27;**&#x27;</span>    匹配任意数量的目录（包括零）<br><span class="hljs-string">&#x27;！&#x27;</span>     行开头！ （感叹号）可用于排除例外情况<br>以此字符开头的<span class="hljs-string">&#x27;＃&#x27;</span>行将被忽略：将其用于评论<br></code></pre></td></tr></table></figure>
<h2 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h2><figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos">＃ignore除了README-secret.<span class="hljs-built_in">md</span>以外的所有README*.<span class="hljs-built_in">md</span>和旁边的所有markdown文件（<span class="hljs-built_in">md</span>）格式的都不要<br>*.<span class="hljs-built_in">MD</span><br>！README*.<span class="hljs-built_in">MD</span><br>README-secret.<span class="hljs-built_in">md</span><br></code></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">＃ignore所有文件夹中的所有*.<span class="hljs-built_in">class</span>文件，包括构建根目录<br>**/*.<span class="hljs-built_in">class</span><br></code></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">＃<span class="hljs-selector-tag">ignore</span> <span class="hljs-selector-class">.git</span>和<span class="hljs-selector-class">.cache</span>文件夹<br><span class="hljs-selector-class">.git</span><br><span class="hljs-selector-class">.cache</span><br></code></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"># 排除名称以temp根目录的任何直接子目录开头的文件或者目录，如<span class="hljs-regexp">/somedir/</span>tempfile.txt,录<span class="hljs-regexp">/somedir/</span>temp/<br>*/temp*<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># temp从以下两级以下的任何子目录开始排除文件和目录。例如，/somedir/subdir/temporary.txt被排除在外。</span><br>*<span class="hljs-regexp">/*/</span>temp*<br></code></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"># 排除根目录中的文件和目录，其名称是单字符扩展名temp。例如，<span class="hljs-regexp">/tempa与/</span>tempb被排除在外<br>temp?<br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://www.linuxea.com/2297.html">https://www.linuxea.com/2297.html</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab使用minio实现分布式存储</title>
    <url>/2021/03/25/gitlab%E4%BD%BF%E7%94%A8minio%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="1、分布式优势"><a href="#1、分布式优势" class="headerlink" title="1、分布式优势"></a>1、分布式优势</h2><h3 id="1-minio分布式介绍"><a href="#1-minio分布式介绍" class="headerlink" title="1.minio分布式介绍"></a>1.minio分布式介绍</h3><p>​        分布式模式下的MinIO使您可以将多个驱动器（甚至在不同的计算机上）合并到一个对象存储服务器中。由于驱动器分布在多个节点上，因此分布式MinIO可以承受多个节点故障，但仍可以确保完整的数据保护。</p>
<p>​        分布式模式下的MinIO可以帮助您通过单个对象存储部署来设置高可用性存储系统。借助分布式MinIO，无论存储设备在网络中的位置如何，您都可以最佳地使用存储设备。</p>
<h3 id="2-数据保护"><a href="#2-数据保护" class="headerlink" title="2.数据保护"></a>2.数据保护</h3><p>​        分布式MinIO 使用擦除代码提供针对多个节点/驱动器故障和位腐烂的保护。由于分布式MinIO所需的最小磁盘为4（与擦除编码所需的最小磁盘相同），因此在启动分布式MinIO时，擦除代码会自动启动。</p>
<h3 id="3-高可用性"><a href="#3-高可用性" class="headerlink" title="3.高可用性"></a>3.高可用性</h3><p>​        如果托管磁盘的服务器脱机，则独立的MinIO服务器将关闭。相反，只要n / 2个或更多磁盘在线，具有n个磁盘的分布式MinIO设置将使您的数据安全。不过，您至少需要（n / 2 + 1）个法定磁盘来创建新对象。</p>
<p>例如，即使最多有8台服务器处于脱机状态，一个16节点的分布式MinIO设置（每个节点具有16个磁盘）仍可继续提供文件。但是，您至少需要在线9台服务器才能创建新对象。</p>
<h3 id="4-限度"><a href="#4-限度" class="headerlink" title="4.限度"></a>4.限度</h3><p>​        与独立模式下的MinIO一样，分布式MinIO的每个租户限制为最少2个，最多32个服务器。这些服务器上的磁盘数量没有限制。如果您需要多租户设置，则可以轻松启动由协调工具（如Kubernetes，Docker Swarm等）管理的多个MinIO实例。</p>
<p>​        请注意，使用分布式MinIO，只要遵守限制，就可以处理节点和驱动器的数量。例如，您可以有2个节点，每个节点4个驱动器，4个节点每个4个驱动器，8个节点每个2个驱动器，32个服务器每个64个驱动器，依此类推。</p>
<h3 id="5-一致性保证"><a href="#5-一致性保证" class="headerlink" title="5.一致性保证"></a>5.一致性保证</h3><p>​        MinIO遵循严格的读后写和列表后读 /一致性模型的所有输入输出都在分布式和独立模式操作。</p>
<h2 id="2、使用Helm-Chart部署MinIO"><a href="#2、使用Helm-Chart部署MinIO" class="headerlink" title="2、使用Helm Chart部署MinIO"></a>2、使用Helm Chart部署MinIO</h2><p>前提条件：</p>
<p>​    1.一个k8s集群</p>
<p>​    2.具备helm环境</p>
<h3 id="1-部署minio"><a href="#1-部署minio" class="headerlink" title="1.部署minio"></a>1.部署minio</h3><p>创建minio需要的pv</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#vim  pv1.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> minio-pv1<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">10</span>Gi<br><span class="hljs-symbol">  volumeMode:</span> Filesystem<br><span class="hljs-symbol">  accessModes:</span><br>  -  ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Retain<br><span class="hljs-symbol">  hostPath:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/helm/</span>minio/pv1<br></code></pre></td></tr></table></figure>
<p>在此使用的是hostpath，在worker节点创建相应的目录。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212211059077.png" alt="image-20191212211059077"></p>
<h3 id="2-安装minio"><a href="#2-安装minio" class="headerlink" title="2.安装minio"></a>2.安装minio</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#先拉到本地在安装</span><br><span class="hljs-attribute">helm</span>  pull  stable/minio<br><span class="hljs-attribute">tar</span>  -zxvf  minio-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.tgz<br><span class="hljs-attribute">helm</span>  install  minio  ./minio<br><br><span class="hljs-comment">#或者直接安装</span><br><span class="hljs-attribute">helm</span>  install  minio  stable/minio<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212211624813.png" alt="image-20191212211624813"></p>
<p>查看pod状态</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212212110685.png" alt="image-20191212212110685"></p>
<h3 id="3-登录访问minio"><a href="#3-登录访问minio" class="headerlink" title="3.登录访问minio"></a>3.登录访问minio</h3><p>默认参数：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/1576157102(1)_%E7%9C%8B%E5%9B%BE%E7%8E%8B_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png"></p>
<p>访问web界面</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212213046502.png" alt="image-20191212213046502"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212213103278.png" alt="image-20191212213103278"></p>
<p>access Key和secret Key都是默认的，上图配置中</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212213237181.png" alt="image-20191212213237181"></p>
<h2 id="3、gitlab和minio进行关联"><a href="#3、gitlab和minio进行关联" class="headerlink" title="3、gitlab和minio进行关联"></a>3、gitlab和minio进行关联</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> deploy minio -oyaml    查看关联Key<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212213506646.png" alt="image-20191212213506646"></p>
<p>在gitlab的yaml文件中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">edit</span> <span class="hljs-string">deploy</span> <span class="hljs-string">gitlab-gitlab-ce</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MINIO_ACCESS_KEY</span><br>  <span class="hljs-attr">valueFrom:</span><br>    <span class="hljs-attr">secretKeyRef:</span><br>      <span class="hljs-attr">key:</span> <span class="hljs-string">accesskey</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">minio</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MINIO_SECRET_KEY</span><br>  <span class="hljs-attr">valueFrom:</span><br>     <span class="hljs-attr">secretKeyRef:</span><br>       <span class="hljs-attr">key:</span> <span class="hljs-string">secretkey</span><br>       <span class="hljs-attr">name:</span> <span class="hljs-string">minio</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212213738745.png" alt="image-20191212213738745"></p>
<p>查看到状态正常</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212214106629.png" alt="image-20191212214106629"></p>
<p>登录gitlab创建一个文件</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212222659865.png" alt="image-20191212222659865"></p>
<p>删除原来的pod</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212223057279.png" alt="image-20191212223057279"></p>
<p>gitlab的pod启动时间有点长，等启动完成访问界面可以看到</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191212223514760.png" alt="image-20191212223514760"></p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>filebeat收集K8s日志</title>
    <url>/2021/03/16/filebeat%E6%94%B6%E9%9B%86K8s%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuration-filebeat-options.html">https://www.elastic.co/guide/en/beats/filebeat/current/configuration-filebeat-options.html</a></p>
<h3 id="1、Filebeat概述"><a href="#1、Filebeat概述" class="headerlink" title="1、Filebeat概述"></a>1、Filebeat概述</h3><p>​        Filebeat是用于转发和集中日志数据的轻量级传送程序。作为服务器上的代理安装，Filebeat监视您指定的日</p>
<p>志文件或位置，收集日志事件，并将其转发给<a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>或 <a href="https://www.elastic.co/products/logstash">Logstash</a>进行索引。</p>
<p>​        Filebeat的工作方式如下：启动Filebeat时，它将启动一个或多个输入，这些输入将在为日志数据指定的位置</p>
<p>中查找。对于Filebeat所找到的每个日志，Filebeat都会启动收集器。每个收割机都读取单个日志以获取新内容，</p>
<p>并将新日志数据发送到libbeat，libbeat将聚集事件并将聚集的数据发送到为Filebeat配置的输出。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20191224102720177.png" alt="image-20191224102720177"></p>
<h3 id="2、Filebeat输入类型"><a href="#2、Filebeat输入类型" class="headerlink" title="2、Filebeat输入类型"></a>2、Filebeat输入类型</h3><ul>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-log.html">Log</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-stdin.html">Stdin</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-container.html">Container</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-kafka.html">Kafka</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-redis.html">Redis</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-udp.html">UDP</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-docker.html">Docker</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-tcp.html">TCP</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-syslog.html">Syslog</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-s3.html">s3</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-netflow.html">NetFlow</a></li>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-google-pubsub.html">Google Pub/Sub</a></li>
</ul>
<h3 id="3、在Kubernetes上运行Filebeat"><a href="#3、在Kubernetes上运行Filebeat" class="headerlink" title="3、在Kubernetes上运行Filebeat"></a>3、在Kubernetes上运行Filebeat</h3><p>​        将Filebeat部署为DaemonSet， 以确保集群的每个节点上都有一个正在运行的实例。Docker日志主机文件夹</p>
<p>（/var/lib/docker/containers）安装在Filebeat容器上。Filebeat会开始输入文件，并在文件出现在文件夹中后立</p>
<p>即开始收集它们。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -L -O https://raw.githubusercontent.com/elastic/beats/7.5/deploy/kubernetes/filebeat-kubernetes.yaml<br></code></pre></td></tr></table></figure>
<h3 id="4、设置"><a href="#4、设置" class="headerlink" title="4、设置"></a>4、设置</h3><p>默认情况下，Filebeat将事件发送到现有的Elasticsearch部署（如果存在）。要指定其他目标，请在清单文件中更</p>
<p>改以下参数：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">env</span>:<br>- <span class="hljs-attribute">name</span>: ELASTICSEARCH_HOST<br>  <span class="hljs-attribute">value</span>: elasticsearch<br>- <span class="hljs-attribute">name</span>: ELASTICSEARCH_PORT<br>  <span class="hljs-attribute">value</span>: <span class="hljs-string">&quot;9200&quot;</span><br>- <span class="hljs-attribute">name</span>: ELASTICSEARCH_USERNAME<br>  <span class="hljs-attribute">value</span>: elastic<br>- <span class="hljs-attribute">name</span>: ELASTICSEARCH_PASSWORD<br>  <span class="hljs-attribute">value</span>: changeme<br>- <span class="hljs-attribute">name</span>: ELASTIC_CLOUD_ID<br>  <span class="hljs-attribute">value</span>:<br>- <span class="hljs-attribute">name</span>: ELASTIC_CLOUD_AUTH<br>  <span class="hljs-attribute">value</span>:<br></code></pre></td></tr></table></figure>
<p>输出到logstash：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">filebeat.yml:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-attr">filebeat.config:</span><br>      <span class="hljs-attr">inputs:</span><br>        <span class="hljs-comment"># Mounted `filebeat-inputs` configmap:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;path.config&#125;/inputs.d/*.yml</span><br>        <span class="hljs-comment"># Reload inputs configs as they change:</span><br>        <span class="hljs-attr">reload.enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">modules:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;path.config&#125;/modules.d/*.yml</span><br>        <span class="hljs-comment"># Reload module configs as they change:</span><br>        <span class="hljs-attr">reload.enabled:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># To enable hints based autodiscover, remove `filebeat.config.inputs` configuration and uncomment this:</span><br>    <span class="hljs-comment">#filebeat.autodiscover:</span><br>    <span class="hljs-comment">#  providers:</span><br>    <span class="hljs-comment">#    - type: kubernetes</span><br>    <span class="hljs-comment">#      hints.enabled: true</span><br><br>    <span class="hljs-attr">processors:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">add_cloud_metadata:</span><br><br>    <span class="hljs-comment">#cloud.id: $&#123;ELASTIC_CLOUD_ID&#125;</span><br>    <span class="hljs-comment">#cloud.auth: $&#123;ELASTIC_CLOUD_AUTH&#125;</span><br><br>    <span class="hljs-comment">#output.elasticsearch:</span><br>      <span class="hljs-comment">#hosts: [&#x27;$&#123;ELASTICSEARCH_HOST:elasticsearch&#125;:$&#123;ELASTICSEARCH_PORT:9200&#125;&#x27;]</span><br>      <span class="hljs-comment">#username: $&#123;ELASTICSEARCH_USERNAME&#125;</span><br>      <span class="hljs-comment">#password: $&#123;ELASTICSEARCH_PASSWORD&#125;</span><br>    <span class="hljs-attr">output.logstash:</span><br>      <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:5044&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-inputs</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">kubernetes.yml:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>    <span class="hljs-comment">#设置类型为log</span><br>        <span class="hljs-attr">paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/docker/logs/*.log</span><br>        <span class="hljs-comment">#fields:</span><br>          <span class="hljs-comment">#app: k8s</span><br>          <span class="hljs-comment">#type: docker-log</span><br>        <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">json.keys_under_root:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">json.overwrite_keys:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">encoding:</span> <span class="hljs-string">utf-8</span><br>        <span class="hljs-attr">fields.sourceType:</span> <span class="hljs-string">docker-log</span>         <span class="hljs-comment">#索引名格式</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">filebeat</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/beats/filebeat:6.5.4</span>       <span class="hljs-comment">#提前准备好镜像，需要翻墙下载</span><br>        <span class="hljs-attr">args:</span> [<br>          <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/etc/filebeat.yml&quot;</span>,<br>          <span class="hljs-string">&quot;-e&quot;</span>,<br>        ]<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">0</span><br>          <span class="hljs-comment"># If using Red Hat OpenShift uncomment this:</span><br>          <span class="hljs-comment">#privileged: true</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/filebeat.yml</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">filebeat.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">inputs</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/filebeat/inputs.d</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/filebeat/data</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">logs</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/logs</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">inputs</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-inputs</span><br>      <span class="hljs-comment"># data folder stores a registry of read status for all files, so we don&#x27;t send everything again on a Filebeat pod restart</span><br>      <span class="hljs-comment">#data文件夹存储所有文件的读取状态的注册表</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/filebeat-data</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">DirectoryOrCreate</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment"># &quot;&quot; indicates the core API group</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br></code></pre></td></tr></table></figure>
<p>运行</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20191224105720755.png" alt="image-20191224105720755"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20191224105648509.png" alt="image-20191224105648509"></p>
<p>能看到上面日志，则表示启动成功。</p>
<h3 id="5、排错"><a href="#5、排错" class="headerlink" title="5、排错"></a>5、排错</h3><p>如果没启动成功，查看logstash的日志，报错如下</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><code class="hljs sml">[<span class="hljs-number">2019</span>-<span class="hljs-number">12</span>-<span class="hljs-number">20</span>T19:<span class="hljs-number">53</span>:<span class="hljs-number">14</span>,<span class="hljs-number">049</span>][<span class="hljs-type">ERROR</span>][logstash.outputs.elasticsearch] <span class="hljs-type">Could</span> not index event to <span class="hljs-type">Elasticsearch</span>. &#123;:status=&gt;<span class="hljs-number">400</span>, :action=&gt;[<span class="hljs-string">&quot;index&quot;</span>, &#123;:_id=&gt;<span class="hljs-literal">nil</span>, :_index=&gt;<span class="hljs-string">&quot;dev-%&#123;[fields][sourceType]&#125;-2019-12-20&quot;</span>, :_type=&gt;<span class="hljs-string">&quot;doc&quot;</span>, :routing=&gt;<span class="hljs-literal">nil</span>&#125;, #&lt;<span class="hljs-type">LogStash</span>::<span class="hljs-type">Event</span>:<span class="hljs-number">0x4c8737db</span>&gt;], :response=&gt;&#123;<span class="hljs-string">&quot;index&quot;</span>=&gt;&#123;<span class="hljs-string">&quot;_index&quot;</span>=&gt;<span class="hljs-string">&quot;dev-%&#123;[fields][sourceType]&#125;-2019-12-20&quot;</span>, <span class="hljs-string">&quot;_type&quot;</span>=&gt;<span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;_id&quot;</span>=&gt;<span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;status&quot;</span>=&gt;<span class="hljs-number">400</span>, <span class="hljs-string">&quot;error&quot;</span>=&gt;&#123;<span class="hljs-string">&quot;type&quot;</span>=&gt;<span class="hljs-string">&quot;invalid_index_name_exception&quot;</span>, <span class="hljs-string">&quot;reason&quot;</span>=&gt;<span class="hljs-string">&quot;Invalid index name [dev-%&#123;[fields][sourceType]&#125;-2019-12-20], must be lowercase&quot;</span>, <span class="hljs-string">&quot;index_uuid&quot;</span>=&gt;<span class="hljs-string">&quot;_na_&quot;</span>, <span class="hljs-string">&quot;index&quot;</span>=&gt;<span class="hljs-string">&quot;dev-%&#123;[fields][sourceType]&#125;-2019-12-20&quot;</span>&#125;&#125;&#125;&#125;<br>[<span class="hljs-number">2019</span>-<span class="hljs-number">12</span>-<span class="hljs-number">20</span>T19:<span class="hljs-number">53</span>:<span class="hljs-number">14</span>,<span class="hljs-number">049</span>][<span class="hljs-type">ERROR</span>][logstash.outputs.<br></code></pre></td></tr></table></figure>
<p>原因是logstash中output的index不能有大写：</p>
<p>我原来的logstash的conf文件</p>
<figure class="highlight puppet"><table><tr><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">output</span> &#123;<br>    elasticsearch &#123;<br>            <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;localhost:9200&quot;</span>]<br>            <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&#x27;%&#123;platform&#125;-%&#123;[fields][sourceType]&#125;-%&#123;+YYYY-MM-dd&#125;&#x27;</span><br>            <span class="hljs-attr">template</span> =&gt; <span class="hljs-string">&quot;/opt/logstash-6.5.2/config/af-template.json&quot;</span><br>            <span class="hljs-attr">template_overwrite</span> =&gt; <span class="hljs-keyword">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>修改后的</p>
<figure class="highlight puppet"><table><tr><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">output</span> &#123;<br>    elasticsearch &#123;<br>            <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;localhost:9200&quot;</span>]<br>            <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;k8s-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>            <span class="hljs-attr">template</span> =&gt; <span class="hljs-string">&quot;/opt/logstash-6.5.2/config/af-template.json&quot;</span><br>            <span class="hljs-attr">template_overwrite</span> =&gt; <span class="hljs-keyword">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>完美结束！</p>
]]></content>
      <categories>
        <category>Elk</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>helm3使用minio自建仓库</title>
    <url>/2021/03/25/helm3%E4%BD%BF%E7%94%A8minio%E8%87%AA%E5%BB%BA%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1、helm3存储库更改"><a href="#1、helm3存储库更改" class="headerlink" title="1、helm3存储库更改"></a>1、helm3存储库更改</h3><p>​    在Helm 2中，默认情况下包括稳定的图表存储库。在Helm 3中，默认情况下不包含任何存储库。因此需要做的第一件事就是添加一个存储库。官方图表存储库将在有限的时间内继续接收补丁，但是将不再作为默认存储库包含在Helm客户端中。</p>
<h3 id="2、minio介绍"><a href="#2、minio介绍" class="headerlink" title="2、minio介绍"></a>2、minio介绍</h3><p>​    MinIO 是一个基于Apache License  v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p>
<p>​    MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p>
<h3 id="3、安装minio服务端和客户端"><a href="#3、安装minio服务端和客户端" class="headerlink" title="3、安装minio服务端和客户端"></a>3、安装minio服务端和客户端</h3><h4 id="3-1使用容器安装服务端"><a href="#3-1使用容器安装服务端" class="headerlink" title="3.1使用容器安装服务端"></a>3.1使用容器安装服务端</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">docker pull minio/minio<br>docker <span class="hljs-builtin-name">run</span> -p 9000:9000 minio/minio<span class="hljs-built_in"> server </span>/data<br></code></pre></td></tr></table></figure>
<h4 id="3-2使用二进制安装服务端"><a href="#3-2使用二进制安装服务端" class="headerlink" title="3.2使用二进制安装服务端"></a>3.2使用二进制安装服务端</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio<br>chmod +x minio<br>mkdir  -p  /chart<br>.<span class="hljs-regexp">/minio server /</span>chart<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130171343371.png" alt="image-20191130171343371"></p>
<p>访问Browser Access地址：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130171714286.png" alt="image-20191130171714286"></p>
<p>在启动日志中获取access  key和secret  key</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130171906111.png" alt="image-20191130171906111"></p>
<p>看到这个页面则表示登陆成功</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130172024345.png" alt="image-20191130172024345"></p>
<p>至此服务端部署完成。</p>
<h3 id="4、安装minio客户端"><a href="#4、安装minio客户端" class="headerlink" title="4、安装minio客户端"></a>4、安装minio客户端</h3><h4 id="1-使用容器安装客户端"><a href="#1-使用容器安装客户端" class="headerlink" title="1.使用容器安装客户端"></a>1.使用容器安装客户端</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">docker pull minio/mc<br>docker <span class="hljs-keyword">run</span><span class="bash"> minio/mc ls play</span><br></code></pre></td></tr></table></figure>
<h4 id="2-使用二进制安装客户端"><a href="#2-使用二进制安装客户端" class="headerlink" title="2.使用二进制安装客户端"></a>2.使用二进制安装客户端</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/client/m</span>c<span class="hljs-regexp">/release/</span>linux-amd64/mc<br>chmod +x mc<br>./mc<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130172613972.png" alt="image-20191130172613972"></p>
<h4 id="3-连接至服务端"><a href="#3-连接至服务端" class="headerlink" title="3.连接至服务端"></a>3.连接至服务端</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">./mc <span class="hljs-built_in">config</span> host add myminio http:<span class="hljs-comment">//172.17.0.1:9000 XH2LCA4AJIP52RDB4P5M CDDCuoS2FNsdW8S0bodkcs2729N+TH5lFov+rrT3</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130172936479.png" alt="image-20191130172936479"></p>
<p>服务端启动时候的access  key和secret  key</p>
<h4 id="4-mc的shell使用别名"><a href="#4-mc的shell使用别名" class="headerlink" title="4.mc的shell使用别名"></a>4.mc的shell使用别名</h4><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ls</span>=<span class="hljs-string">&#x27;mc ls&#x27;</span><br><span class="hljs-attr">cp</span>=<span class="hljs-string">&#x27;mc cp&#x27;</span><br><span class="hljs-attr">cat</span>=<span class="hljs-string">&#x27;mc cat&#x27;</span><br><span class="hljs-attr">mkdir</span>=<span class="hljs-string">&#x27;mc mb&#x27;</span><br><span class="hljs-attr">pipe</span>=<span class="hljs-string">&#x27;mc pipe&#x27;</span><br><span class="hljs-attr">find</span>=<span class="hljs-string">&#x27;mc find&#x27;</span><br></code></pre></td></tr></table></figure>
<h4 id="5-创建bucket"><a href="#5-创建bucket" class="headerlink" title="5.创建bucket"></a>5.创建bucket</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/mc mb myminio/mi</span>nio-helm-repo<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130173348740.png" alt="image-20191130173348740"></p>
<h4 id="6-设置bucket和objects匿名访问"><a href="#6-设置bucket和objects匿名访问" class="headerlink" title="6.设置bucket和objects匿名访问"></a>6.设置bucket和objects匿名访问</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">./mc<span class="hljs-built_in"> policy </span><span class="hljs-builtin-name">set</span> download myminio/minio-helm-repo<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130173746863.png" alt="image-20191130173746863"></p>
<h4 id="7-helm创建与仓库连接的index-yaml文件"><a href="#7-helm创建与仓库连接的index-yaml文件" class="headerlink" title="7.helm创建与仓库连接的index.yaml文件"></a>7.helm创建与仓库连接的index.yaml文件</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/root/</span>helm/repo<br>helm repo index helm<span class="hljs-regexp">/repo/</span><br></code></pre></td></tr></table></figure>
<h3 id="5、helm与minio仓库进行连接"><a href="#5、helm与minio仓库进行连接" class="headerlink" title="5、helm与minio仓库进行连接"></a>5、helm与minio仓库进行连接</h3><h4 id="1-将index-yaml文件推送到backet中去"><a href="#1-将index-yaml文件推送到backet中去" class="headerlink" title="1.将index.yaml文件推送到backet中去"></a>1.将index.yaml文件推送到backet中去</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/mc cp helm/</span>repo<span class="hljs-regexp">/index.yaml myminio/mi</span>nio-helm-repo<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130174336894.png" alt="image-20191130174336894"></p>
<h4 id="2-helm连接私仓"><a href="#2-helm连接私仓" class="headerlink" title="2.helm连接私仓"></a>2.helm连接私仓</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">helm</span> repo <span class="hljs-keyword">add</span> fengnan http:<span class="hljs-comment">//192.168.0.119:9000/minio-helm-repo</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130174456212.png" alt="image-20191130174456212"></p>
<h4 id="3-更新repo仓库"><a href="#3-更新repo仓库" class="headerlink" title="3.更新repo仓库"></a>3.更新repo仓库</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helm repo update</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130174603525.png" alt="image-20191130174603525"></p>
<h4 id="4-查看repo"><a href="#4-查看repo" class="headerlink" title="4.查看repo"></a>4.查看repo</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helm repo list</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130174649812.png" alt="image-20191130174649812"></p>
<h5 id="5-查看repo中的文件"><a href="#5-查看repo中的文件" class="headerlink" title="5.查看repo中的文件"></a>5.查看repo中的文件</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/mc ls myminio/mi</span>nio-helm-repo<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130174754911.png" alt="image-20191130174754911"></p>
<h4 id="6-登录服务端web界面查看"><a href="#6-登录服务端web界面查看" class="headerlink" title="6.登录服务端web界面查看"></a>6.登录服务端web界面查看</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191130174845497.png" alt="image-20191130174845497"></p>
<p>完美结束！</p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Minio</tag>
      </tags>
  </entry>
  <entry>
    <title>helm3安装gitlab</title>
    <url>/2021/03/25/helm3%E5%AE%89%E8%A3%85gitlab/</url>
    <content><![CDATA[<h3 id="1、添加helm源"><a href="#1、添加helm源" class="headerlink" title="1、添加helm源"></a>1、添加helm源</h3><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">helm repo <span class="hljs-built_in">add</span> stable http<span class="hljs-variable">s:</span>//kubernetes-charts.storage.googleapis.<span class="hljs-keyword">com</span><br>helm repo <span class="hljs-built_in">add</span> aliyun http<span class="hljs-variable">s:</span>//kubernetes.oss-<span class="hljs-keyword">cn</span>-hangzhou.aliyuncs.<span class="hljs-keyword">com</span>/charts<br>helm repo <span class="hljs-built_in">add</span>  apphub http<span class="hljs-variable">s:</span>//apphub.aliyuncs.<span class="hljs-keyword">com</span>/<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208143345136.png" alt="image-20191208143345136"></p>
<h3 id="2、下载gitlab-ce"><a href="#2、下载gitlab-ce" class="headerlink" title="2、下载gitlab-ce"></a>2、下载gitlab-ce</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> pull stable/gitlab-ce<br><span class="hljs-attribute">tar</span>  -zxvf  gitlab-ce-<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.tgz<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208162422584.png" alt="image-20191208162422584"></p>
<h3 id="3、修改values-yaml文件"><a href="#3、修改values-yaml文件" class="headerlink" title="3、修改values.yaml文件"></a>3、修改values.yaml文件</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208164650121.png" alt="image-20191208164650121"></p>
<h3 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">helm <span class="hljs-keyword">install</span> gitlab gitlab-ce<br></code></pre></td></tr></table></figure>
<p>备注：由于我是最新16.3的集群，所以这里会报错。如果你是16以下的版本这里不会报错</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208162724007.png" alt="image-20191208162724007"></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;extensions/v1beta1&quot;</span> gitlab-<span class="hljs-keyword">ce</span> | <span class="hljs-keyword">grep</span> deployment<br><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;extensions/v1beta1&quot;</span> gitlab-<span class="hljs-keyword">ce</span> | <span class="hljs-keyword">grep</span> deploy | xargs sed -i <span class="hljs-string">&#x27;s#extensions/v1beta1#apps/v1#g&#x27;</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208162849870.png" alt="image-20191208162849870"></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">#在进行安装，错误原因是现有 k8s不支持gitlab-<span class="hljs-keyword">ce</span>的deployment spec<br>helm install gitlab gitlab-<span class="hljs-keyword">ce</span><br><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;apps/v1&quot;</span> gitlab-<span class="hljs-keyword">ce</span> | <span class="hljs-keyword">grep</span> deployment<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163017603.png" alt="image-20191208163017603"></p>
<p>依次修改配置文件：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">vim gitlab-ce<span class="hljs-meta-keyword">/templates/</span>deployment.yaml<br>添加：<br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> &#123;&#123; template <span class="hljs-string">&quot;gitlab-ce.fullname&quot;</span> . &#125;&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208164344044.png" alt="image-20191208164344044"></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">vim gitlab-ce<span class="hljs-meta-keyword">/charts/</span>postgresql<span class="hljs-meta-keyword">/templates/</span>deployment.yaml<br>添加：<br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> &#123;&#123; template <span class="hljs-string">&quot;postgresql.fullname&quot;</span> . &#125;&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208164456496.png" alt="image-20191208164456496"></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">vim gitlab-ce<span class="hljs-meta-keyword">/charts/</span>redis<span class="hljs-meta-keyword">/templates/</span>deployment.yaml<br>添加：<br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> &#123;&#123; template <span class="hljs-string">&quot;redis.fullname&quot;</span> . &#125;&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208164543666.png" alt="image-20191208164543666"></p>
<p>再进行安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">helm <span class="hljs-keyword">install</span> gitlab gitlab-ce<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163321853.png" alt="image-20191208163321853"></p>
<h3 id="5、查看集群状态"><a href="#5、查看集群状态" class="headerlink" title="5、查看集群状态"></a>5、查看集群状态</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> pod<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163410784.png" alt="image-20191208163410784"></p>
<p>由于资源需要请求pv，所以我们还需要创建pv</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> pv<br>kubectl <span class="hljs-builtin-name">get</span> pvc<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163548128.png" alt="image-20191208163548128"></p>
<p>在worker节点创建hostpath挂在目录</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">mkdir</span>  -p  /<span class="hljs-class"><span class="hljs-keyword">data</span>/gitlab/pv&#123;1..4&#125;</span><br></code></pre></td></tr></table></figure>
<p>在master节点创建pv文件</p>
<ul>
<li><pre><code>[root@node1 pv]# cat pv1.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gitlab-pv1
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:

  -  ReadWriteOnce
     persistentVolumeReclaimPolicy: Retain
       hostPath:
     path: /data/gitlab/pv1</code></pre>
</li>
</ul>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163829783.png" alt="image-20191208163829783"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163904286.png" alt="image-20191208163904286"></p>
<p>再查看集群状态</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208163957511.png" alt="image-20191208163957511"></p>
<p>登录界面</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191208164012158.png" alt="image-20191208164012158"></p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>helm3安装harbor</title>
    <url>/2021/03/25/helm3%E5%AE%89%E8%A3%85harbor/</url>
    <content><![CDATA[<h2 id="1、下载并修改"><a href="#1、下载并修改" class="headerlink" title="1、下载并修改"></a>1、下载并修改</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> repo add harbor https://helm.goharbor.io<br><br><span class="hljs-attribute">helm</span> pull harbor/harbor --version <span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<p>修改values.yaml文件</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218094113775.png" alt="image-20191218094113775"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218095431741.png" alt="image-20191218095431741"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218094043836.png" alt="image-20191218094043836"></p>
<h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">helm install harbor ./harbor<br><br><span class="hljs-keyword">Error: </span>unable to build kubernetes objects from release manifest: unable to recognize &quot;&quot;: no matches for kind &quot;Deployment&quot; in version &quot;extensions/v1beta1&quot;<br></code></pre></td></tr></table></figure>
<p>由于我是最新版的k8s集群，所以不支持version “extensions/v1beta1”，下面修改版本为apps</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;extensions/v1beta1&quot;</span> harbor | <span class="hljs-keyword">grep</span> deployment<br><br><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;extensions/v1beta1&quot;</span> harbor | <span class="hljs-keyword">grep</span> deploy | xargs sed -i <span class="hljs-string">&#x27;s#extensions/v1beta1#apps/v1#g&#x27;</span><br></code></pre></td></tr></table></figure>
<p>再次执行安装</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218094627633.png" alt="image-20191218094627633"></p>
<p>服务需要请求pv，所以这里我们使用hostPath来创建pv</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> harbor-pv1<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">10</span>Gi<br><span class="hljs-symbol">  volumeMode:</span> Filesystem<br><span class="hljs-symbol">  accessModes:</span><br>  -  ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Retain<br><span class="hljs-symbol">  hostPath:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/helm/</span>harbor/pv1<br><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218094806015.png" alt="image-20191218094806015"></p>
<h2 id="3、访问web界面"><a href="#3、访问web界面" class="headerlink" title="3、访问web界面"></a>3、访问web界面</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218095238237.png" alt="image-20191218095238237"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218095454993.png" alt="image-20191218095454993"></p>
<p>使用用户密码登录胡发现登录不了。我们查看pod日志会发现</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218095756759.png" alt="image-20191218095756759"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> logs harbor-harbor-redis-<span class="hljs-number">0</span><br><br><span class="hljs-attribute">1</span>:M <span class="hljs-number">18</span> Dec <span class="hljs-number">02</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>.<span class="hljs-number">032</span> * <span class="hljs-number">10</span> changes in <span class="hljs-number">300</span> seconds. Saving...<br><span class="hljs-attribute">1</span>:M <span class="hljs-number">18</span> Dec <span class="hljs-number">02</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>.<span class="hljs-number">033</span> * Background saving started by pid <span class="hljs-number">97</span><br><span class="hljs-attribute">97</span>:C <span class="hljs-number">18</span> Dec <span class="hljs-number">02</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>.<span class="hljs-number">033</span> # Failed opening the RDB file dump.rdb (in server root dir /var/lib/redis) for saving: Permission denied<br><span class="hljs-attribute">1</span>:M <span class="hljs-number">18</span> Dec <span class="hljs-number">02</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>.<span class="hljs-number">133</span> # Background saving error<br></code></pre></td></tr></table></figure>
<p>由于redis请求的pv权限不够</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl get pvc   <span class="hljs-comment">#查看绑定的pv是主机的路径，然后给与777的权限即可</span><br>chmod <span class="hljs-number">777</span> <span class="hljs-regexp">/helm/</span>harbor<span class="hljs-regexp">/pv4/</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218100454712.png" alt="image-20191218100454712"></p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><code class="hljs scilab">kubectl logs harbor-harbor-clair-c9757f6cb<span class="hljs-number">-9</span>x8nr<br><br>&#123;<span class="hljs-string">&quot;Event&quot;</span>:<span class="hljs-string">&quot;could not download Oracle&#x27;</span>s update <span class="hljs-built_in">list</span><span class="hljs-string">&quot;,&quot;</span>Level<span class="hljs-string">&quot;:&quot;</span><span class="hljs-built_in">error</span><span class="hljs-string">&quot;,&quot;</span>Location<span class="hljs-string">&quot;:&quot;</span>oracle.go:<span class="hljs-number">162</span><span class="hljs-string">&quot;,&quot;</span>Time<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-12</span><span class="hljs-number">-18</span> <span class="hljs-number">01</span>:<span class="hljs-number">54</span>:<span class="hljs-number">54.608195</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-built_in">error</span><span class="hljs-string">&quot;:&quot;</span>Get https:<span class="hljs-comment">//linux.oracle.com/oval/com.oracle.elsa-20161292.xml: read tcp 10.244.2.34:35278-\u003e23.63.35.142:443: read: connection reset by peer&quot;&#125;</span><br>&#123;<span class="hljs-string">&quot;Event&quot;</span>:<span class="hljs-string">&quot;an error occured when fetching update&quot;</span>,<span class="hljs-string">&quot;Level&quot;</span>:<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;Location&quot;</span>:<span class="hljs-string">&quot;updater.go:246&quot;</span>,<span class="hljs-string">&quot;Time&quot;</span>:<span class="hljs-string">&quot;2019-12-18 01:54:54.609261&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>:<span class="hljs-string">&quot;could not download requested resource&quot;</span>,<span class="hljs-string">&quot;updater name&quot;</span>:<span class="hljs-string">&quot;oracle&quot;</span>&#125;<br></code></pre></td></tr></table></figure>
<p>将pod删除，自动生成即可</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218101344298.png" alt="image-20191218101344298"></p>
<p>再次根据设置的密码登录，我这里是admin/admin12345</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191218101451910.png" alt="image-20191218101451910"></p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>helm3安装nexus</title>
    <url>/2021/03/25/helm3%E5%AE%89%E8%A3%85nexus/</url>
    <content><![CDATA[<h3 id="1、环境介绍"><a href="#1、环境介绍" class="headerlink" title="1、环境介绍"></a>1、环境介绍</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216191648008.png" alt="image-20191216191648008"></p>
<h3 id="2、安装nexus"><a href="#2、安装nexus" class="headerlink" title="2、安装nexus"></a>2、安装nexus</h3><figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">helm</span> search repo nexus<br><span class="hljs-title">helm</span>  pull  stable/sona<span class="hljs-keyword">type</span>-nexus<br><span class="hljs-title">tar</span>  xvf  sona<span class="hljs-keyword">type</span>-nexus-1.21.2.tgz<br><span class="hljs-title">helm</span>  install  nexus  ./sona<span class="hljs-keyword">type</span>-nexus<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216192002575.png" alt="image-20191216192002575"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl  <span class="hljs-builtin-name">get</span>  pod<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216192102750.png" alt="image-20191216192102750"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> describe pod nexus-sonatype-nexus-<span class="hljs-number">79</span>b<span class="hljs-number">5865</span>bbc-<span class="hljs-number">4</span>lb<span class="hljs-number">49</span><br></code></pre></td></tr></table></figure>
<p>从而得知在请求pvc，所以创建pv</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">vim  pv.yaml    <span class="hljs-meta">#这里采用的hostpath</span><br><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nexus-pv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">10</span>Gi<br><span class="hljs-symbol">  volumeMode:</span> Filesystem<br><span class="hljs-symbol">  accessModes:</span><br>  -  ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Retain<br><span class="hljs-symbol">  hostPath:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/helm/</span>nexus<br><br>mkdir  -p  <span class="hljs-meta-keyword">/helm/</span>nexus   <span class="hljs-meta">#在worker节点创建相应的目录</span><br>kubecel  apply  -f pv.yaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216192605851.png" alt="image-20191216192605851"></p>
<p>查看pod状态</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> pod<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216193256502.png" alt="image-20191216193256502"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">kubectl logs nexus-sonatype-nexus<span class="hljs-number">-64</span>c75f5786-gtvlg<br><br>Java HotSpot(TM) <span class="hljs-number">64</span>-<span class="hljs-type">Bit</span> <span class="hljs-keyword">Server</span> VM <span class="hljs-built_in">warning</span>: Cannot <span class="hljs-keyword">open</span> file /nexus-data/<span class="hljs-keyword">log</span>/jvm.<span class="hljs-keyword">log</span> due <span class="hljs-keyword">to</span> <span class="hljs-keyword">No</span> such file <span class="hljs-keyword">or</span> directory<br><span class="hljs-built_in">Warning</span>:  Cannot <span class="hljs-keyword">open</span> <span class="hljs-keyword">log</span> file: /nexus-data/<span class="hljs-keyword">log</span>/jvm.<span class="hljs-keyword">log</span><br><span class="hljs-built_in">Warning</span>:  Forcing <span class="hljs-keyword">option</span> -XX:LogFile=/tmp/jvm.<span class="hljs-keyword">log</span><br>Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> instance pid: Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> directory /nexus-data/instances<br>/nexus-data/<span class="hljs-keyword">log</span>/karaf.log (<span class="hljs-keyword">No</span> such file <span class="hljs-keyword">or</span> directory)<br>Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> instance pid: Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> directory /nexus-data/instances<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216193340495.png" alt="image-20191216193340495"></p>
<p>从而得知是目录/nexus-data/instances没有权限</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">kubectl</span> get deploy nexus-sona<span class="hljs-keyword">type</span>-nexus -oyaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216193530490.png" alt="image-20191216193530490"></p>
<p>是因为我们创建的pv没有权限，在worker节点给与刚才创建pv的目录777权限</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> /helm/nexus/<br><span class="hljs-attribute">kubectl</span> delete pod nexus-sonatype-nexus-<span class="hljs-number">64</span>c<span class="hljs-number">75</span>f<span class="hljs-number">5786</span>-gtvlg   #删掉原来的pod<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216193918028.png" alt="image-20191216193918028"></p>
<p>完美起来了。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> svc<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216194009883.png" alt="image-20191216194009883"></p>
<p>然后会发现端口不通</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> <span class="hljs-number">192.18.10.12</span> <span class="hljs-number">30070</span><br><br><span class="hljs-attribute">Trying</span> <span class="hljs-number">192.18.10.12</span>...<br><span class="hljs-attribute">telnet</span>: connect to address <span class="hljs-number">192.18.10.12</span>: Connection refused<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/root/</span>nexus<span class="hljs-regexp">/sonatype-nexus/</span>values.yaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216194304572.png" alt="image-20191216194304572"></p>
<p>可以看到8080并不是nexus的真正端口，而真正的端口是</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216194403061.png" alt="image-20191216194403061"></p>
<p>所以又要修改service文件</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">kubectl</span> edit svc nexus-sona<span class="hljs-keyword">type</span>-nexus<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216194516370.png" alt="image-20191216194516370"></p>
<p>再访问即可进入</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191216194625975.png" alt="image-20191216194625975"></p>
<p>用户名是admin，密码是admin123</p>
<p>完美结束！</p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>helm3安装sonarqube</title>
    <url>/2021/03/25/helm3%E5%AE%89%E8%A3%85sonarqube/</url>
    <content><![CDATA[<h2 id="1、总览"><a href="#1、总览" class="headerlink" title="1、总览"></a>1、总览</h2><p>SonarQube平台由4个组件组成：<br><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/architecture-scanning.png" alt="SonarQube平台。"></p>
<ol>
<li>一台SonarQube Server启动3个主要过程：<ul>
<li>Web服务器，供开发人员，管理人员浏览高质量的快照并配置SonarQube实例</li>
<li>基于Elasticsearch的Search Server从UI进行后退搜索</li>
<li>Compute Engine服务器，负责处理代码分析报告并将其保存在SonarQube数据库中</li>
</ul>
</li>
<li>一个SonarQube数据库要存储：<ul>
<li>SonarQube实例的配置（安全性，插件设置等）</li>
<li>项目，视图等的质量快照。</li>
</ul>
</li>
<li>服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和管理插件</li>
<li>在构建/持续集成服务器上运行一个或多个SonarScanner，以分析项目</li>
</ol>
<h2 id="2、架构"><a href="#2、架构" class="headerlink" title="2、架构"></a>2、架构</h2><p>以下架构显示了SonarQube如何与其他ALM工具集成以及使用SonarQube的各种组件的位置。<br><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/architecture-integrate.png" alt="SonarQube集成。"></p>
<ol>
<li>开发人员在其IDE中进行编码，并使用<a href="https://sonarlint.org/">SonarLint</a>运行本地分析。</li>
<li>开发人员将他们的代码放入他们最喜欢的SCM中：git，SVN，TFVC等。</li>
<li>Continuous Integration Server会触发自动生成，并执行运行SonarQube分析所需的SonarScanner。</li>
<li>分析报告将发送到SonarQube服务器进行处理。</li>
<li>SonarQube Server处理分析报告结果并将其存储在SonarQube数据库中，并在UI中显示结果。</li>
<li>开发人员通过SonarQube UI审查，评论，挑战他们的问题，以管理和减少技术债务。</li>
<li>经理从分析中接收报告。Ops使用API自动执行配置并从SonarQube提取数据。运维人员使用JMX监视SonarQube Server。</li>
</ol>
<h2 id="3、关于服务器"><a href="#3、关于服务器" class="headerlink" title="3、关于服务器"></a>3、关于服务器</h2><ul>
<li>SonarQube平台不能具有多个SonarQube服务器（尽管该服务器可以<a href="https://docs.sonarqube.org/latest/setup/install-cluster/">作为集群</a>安装）和一个SonarQube数据库。</li>
<li>为了获得最佳性能，应将每个组件（服务器，数据库，扫描仪）安装在单独的计算机上，并且服务器计算机应专用。</li>
<li>SonarScanners通过添加机器进行扩展。</li>
<li>所有机器必须时间同步。</li>
<li>SonarQube服务器和SonarQube数据库必须位于同一网络中</li>
<li>SonarScanners不需要与SonarQube Server位于同一网络上。</li>
<li>有<strong>没有沟通</strong>之间<strong>SonarScanners</strong>和<strong>SonarQube数据库</strong>。</li>
</ul>
<h2 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h2><p>前提环境需要k8s集群和helm</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226223315113.png" alt="image-20191226223315113"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> pull stable/sonarqube<br><span class="hljs-attribute">tar</span> xvf sonarqube-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">7</span>.tgz<br><span class="hljs-attribute">vim</span> sonarqube/values.yaml<br></code></pre></td></tr></table></figure>
<p>设置用户和密码</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226223702365.png" alt="image-20191226223702365"></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">helm install sonarqube ./sonarqube<br><br>#报错原因是我的集群是1.16版本了<br><span class="hljs-keyword">Error: </span>unable to build kubernetes objects from release manifest: unable to recognize &quot;&quot;: no matches for kind &quot;Deployment&quot; in version &quot;extensions/v1beta1&quot;<br></code></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;extensions/v1beta1&quot;</span> sonarqube | <span class="hljs-keyword">grep</span> deployment<br><br><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;extensions/v1beta1&quot;</span> sonarqube | <span class="hljs-keyword">grep</span> deploy | xargs sed -i <span class="hljs-string">&#x27;s#extensions/v1beta1#apps/v1#g&#x27;</span><br></code></pre></td></tr></table></figure>
<p>再次执行安装</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">helm install sonarqube ./sonarqube<br><br><span class="hljs-keyword">Error: </span>unable to build kubernetes objects from release manifest: error validating &quot;&quot;: error validating data: ValidationError(Deployment.spec): missing required field &quot;selector&quot; in io.k8s.api.apps.v1.DeploymentSpec<br></code></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -irl <span class="hljs-string">&quot;apps/v1&quot;</span> sonarqube | <span class="hljs-keyword">grep</span> deployment<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226224502628.png" alt="image-20191226224502628"></p>
<p>依次修改以上文件。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim sonarqube<span class="hljs-regexp">/templates/</span>deployment.yaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226224706142.png" alt="image-20191226224706142"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim sonarqube<span class="hljs-regexp">/charts/</span>postgresql<span class="hljs-regexp">/templates/</span>deployment.yaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226224831497.png" alt="image-20191226224831497"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim sonarqube<span class="hljs-regexp">/charts/my</span>sql<span class="hljs-regexp">/templates/</span>deployment.yaml<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226224933183.png" alt="image-20191226224933183"></p>
<p>再次执行安装</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226225015906.png" alt="image-20191226225015906"></p>
<p>pod需要请求pv，这里使用hostpath</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226225113200.png" alt="image-20191226225113200"></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">cat pv/pv1.yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> sonarqube-pv1<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">10</span>Gi<br><span class="hljs-symbol">  volumeMode:</span> Filesystem<br><span class="hljs-symbol">  accessModes:</span><br>  -  ReadWriteOnce<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Retain<br><span class="hljs-symbol">  hostPath:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-meta-keyword">/helm/</span>sonarqube/pv1<br></code></pre></td></tr></table></figure>
<p>稍等会儿就能看到pod状态</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191226225808478.png" alt="image-20191226225808478"></p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Sonarqube</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash字符转换</title>
    <url>/2021/01/20/logstash%E5%AD%97%E7%AC%A6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>项目需求</p>
<p>request_time， upstream_response_time 等的数据类型需要改为float</p>
<h2 id="1、nginx配置json格式日志"><a href="#1、nginx配置json格式日志" class="headerlink" title="1、nginx配置json格式日志"></a>1、nginx配置json格式日志</h2><figure class="highlight scilab"><table><tr><td class="code"><pre><code class="hljs scilab">http &#123;<br>    log_format json <span class="hljs-string">&#x27;&#123;&quot;</span>@timestamp<span class="hljs-string">&quot;:&quot;</span>$time_iso8601<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>server_addr<span class="hljs-string">&quot;:&quot;</span>$server_addr<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>remote_addr<span class="hljs-string">&quot;:&quot;</span>$remote_addr<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>cookie_JSESSIONID<span class="hljs-string">&quot;:&quot;</span>$cookie_JSESSIONID<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>body_bytes_sent<span class="hljs-string">&quot;:$body_bytes_sent,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>request_uri<span class="hljs-string">&quot;:&quot;</span>$request_uri<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>request_method<span class="hljs-string">&quot;:&quot;</span>$request_method<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>server_protocol<span class="hljs-string">&quot;:&quot;</span>$server_protocol<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>scheme<span class="hljs-string">&quot;:&quot;</span>$scheme<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>request_time<span class="hljs-string">&quot;:$request_time,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>upstream_response_time<span class="hljs-string">&quot;:&quot;</span>$upstream_response_time<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>upstream_addr<span class="hljs-string">&quot;:&quot;</span>$upstream_addr<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>hostname<span class="hljs-string">&quot;:&quot;</span>$hostname<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>http_host<span class="hljs-string">&quot;:&quot;</span>$http_host<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>uri<span class="hljs-string">&quot;:&quot;</span>$uri<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>http_x_forwarded_for<span class="hljs-string">&quot;:&quot;</span>$http_x_forwarded_for<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>http_referer<span class="hljs-string">&quot;:&quot;</span>$http_referer<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>http_user_agent<span class="hljs-string">&quot;:&quot;</span>$http_user_agent<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>X-Forwarded-Proto<span class="hljs-string">&quot;:&quot;</span>$http_x_forwarded_proto<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>cookie<span class="hljs-string">&quot;:&quot;</span>$http_cookie<span class="hljs-string">&quot;,&#x27;</span><br>                     <span class="hljs-string">&#x27;&quot;</span>status<span class="hljs-string">&quot;:&quot;</span>$status<span class="hljs-string">&quot;&#125;&#x27;</span>;<br><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        access_log  logs/pc.access.<span class="hljs-built_in">log</span>  json;<br><br></code></pre></td></tr></table></figure>
<h2 id="2、filebeat收集日志"><a href="#2、filebeat收集日志" class="headerlink" title="2、filebeat收集日志"></a>2、filebeat收集日志</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filebeat.inputs:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/data/nginx/*.log</span><br>  <span class="hljs-attr">json.keys_under_root:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">json.overwrite_keys:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">encoding:</span> <span class="hljs-string">utf-8</span><br>  <span class="hljs-attr">fields:</span><br>    <span class="hljs-attr">document_type:</span> <span class="hljs-string">nginx_access_log</span><br><br><span class="hljs-attr">output.logstash:</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;localhost:5044&quot;</span>]<br><br><span class="hljs-comment">#输出到es中</span><br><span class="hljs-comment">#output.elasticsearch:</span><br><span class="hljs-comment">#  hosts: [&quot;192.168.1.30:9200&quot;]</span><br><span class="hljs-comment">#  index: &quot;nginx-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="hljs-comment">#setup.template.name: &quot;access&quot;</span><br><span class="hljs-comment">#setup.template.pattern: &quot;access-*&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="3、logstash配置"><a href="#3、logstash配置" class="headerlink" title="3、logstash配置"></a>3、logstash配置</h2><p>需java环境</p>
<p>配置startup.options文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">LS_HOME</span>=/opt/logstash-<span class="hljs-number">6.5</span>.<span class="hljs-number">3</span><br><span class="hljs-attr">LS_SETTINGS_DIR</span>=<span class="hljs-string">&quot;$&#123;LS_HOME&#125;/config&quot;</span><br><span class="hljs-attr">LS_OPTS</span>=<span class="hljs-string">&quot;--path.settings $&#123;LS_SETTINGS_DIR&#125;&quot;</span><br><span class="hljs-attr">LS_PIDFILE</span>=/var/run/logstash.pid<br><span class="hljs-attr">LS_USER</span>=elk<br><span class="hljs-attr">LS_GROUP</span>=elk<br><span class="hljs-attr">LS_GC_LOG_FILE</span>=/opt/logstash-<span class="hljs-number">6.5</span>.<span class="hljs-number">3</span>/logs/gc.log<br><span class="hljs-attr">LS_OPEN_FILES</span>=<span class="hljs-number">16384</span><br><span class="hljs-attr">LS_NICE</span>=<span class="hljs-number">19</span><br><span class="hljs-attr">SERVICE_NAME</span>=<span class="hljs-string">&quot;logstash&quot;</span><br><span class="hljs-attr">SERVICE_DESCRIPTION</span>=<span class="hljs-string">&quot;logstash&quot;</span><br></code></pre></td></tr></table></figure>
<p>配置template_nginxlog.json模板</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br><br>  <span class="hljs-attr">&quot;index_patterns&quot;</span> : [<span class="hljs-string">&quot;nginx-*&quot;</span>],<br><br>  <span class="hljs-attr">&quot;version&quot;</span> : <span class="hljs-number">60001</span>,<br><br>  <span class="hljs-attr">&quot;settings&quot;</span> : &#123;<br><br>    <span class="hljs-attr">&quot;index.refresh_interval&quot;</span> : <span class="hljs-string">&quot;5s&quot;</span>,<br><br>    <span class="hljs-attr">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span><br><br>  &#125;,<br><br>  <span class="hljs-attr">&quot;mappings&quot;</span> : &#123;<br><br>    <span class="hljs-attr">&quot;_doc&quot;</span> : &#123;<br><br>      <span class="hljs-attr">&quot;dynamic_templates&quot;</span> : [ &#123;<br><br>        <span class="hljs-attr">&quot;message_field&quot;</span> : &#123;<br><br>          <span class="hljs-attr">&quot;path_match&quot;</span> : <span class="hljs-string">&quot;message&quot;</span>,<br><br>          <span class="hljs-attr">&quot;match_mapping_type&quot;</span> : <span class="hljs-string">&quot;string&quot;</span>,<br><br>          <span class="hljs-attr">&quot;mapping&quot;</span> : &#123;<br><br>            <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br><br>            <span class="hljs-attr">&quot;norms&quot;</span> : <span class="hljs-literal">false</span><br><br>          &#125;<br><br>        &#125;<br><br>      &#125;, &#123;<br><br>        <span class="hljs-attr">&quot;string_fields&quot;</span> : &#123;<br><br>          <span class="hljs-attr">&quot;match&quot;</span> : <span class="hljs-string">&quot;*&quot;</span>,<br><br>          <span class="hljs-attr">&quot;match_mapping_type&quot;</span> : <span class="hljs-string">&quot;string&quot;</span>,<br><br>          <span class="hljs-attr">&quot;mapping&quot;</span> : &#123;<br><br>            <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-attr">&quot;norms&quot;</span> : <span class="hljs-literal">false</span>,<br><br>            <span class="hljs-attr">&quot;fields&quot;</span> : &#123;<br><br>              <span class="hljs-attr">&quot;keyword&quot;</span> : &#123; <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-attr">&quot;ignore_above&quot;</span>: <span class="hljs-number">2048</span> &#125;<br><br>            &#125;<br><br>          &#125;<br><br>        &#125;<br><br>      &#125; ],<br><br>      <span class="hljs-attr">&quot;properties&quot;</span> : &#123;<br><br>        <span class="hljs-attr">&quot;@timestamp&quot;</span>: &#123; <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>&#125;,<br><br>        <span class="hljs-attr">&quot;@version&quot;</span>: &#123; <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>&#125;,<br><br>        <span class="hljs-attr">&quot;geoip&quot;</span>  : &#123;<br><br>          <span class="hljs-attr">&quot;dynamic&quot;</span>: <span class="hljs-literal">true</span>,<br><br>          <span class="hljs-attr">&quot;properties&quot;</span> : &#123;<br><br>            <span class="hljs-attr">&quot;ip&quot;</span>: &#123; <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ip&quot;</span> &#125;,<br><br>            <span class="hljs-attr">&quot;location&quot;</span> : &#123; <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;geo_point&quot;</span> &#125;,<br><br>            <span class="hljs-attr">&quot;latitude&quot;</span> : &#123; <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;half_float&quot;</span> &#125;,<br><br>            <span class="hljs-attr">&quot;longitude&quot;</span> : &#123; <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;half_float&quot;</span> &#125;<br><br>          &#125;<br><br>        &#125;<br><br>      &#125;<br><br>    &#125;<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>编写conf配置文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart">input &#123;<br>  beats &#123;<br>    port =&gt; <span class="hljs-number">5044</span><br>  &#125;<br>&#125;<br><br><br>filter &#123;<br>  <span class="hljs-keyword">if</span> [fields][document_type] == <span class="hljs-string">&quot;nginx_access_log&quot;</span> &#123;<br>    mutate &#123;<br>      gsub =&gt; [<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;\\x&quot;</span>, <span class="hljs-string">&quot;\\\x&quot;</span>]<br>    &#125;<br>    json &#123;<br>      source =&gt; <span class="hljs-string">&quot;message&quot;</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-keyword">in</span> [upstream_response_time] &#123;<br>      mutate &#123;<br>        replace =&gt; &#123;<br>          <span class="hljs-string">&quot;upstream_response_time&quot;</span> =&gt; <span class="hljs-string">&quot;0&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br><br>    mutate &#123;<br>      convert =&gt; [ <span class="hljs-string">&quot;upstream_response_time&quot;</span>, <span class="hljs-string">&quot;float&quot;</span> ]<br>    &#125;<br>    mutate &#123;<br>      gsub =&gt; [<br>        <span class="hljs-string">&quot;cookie&quot;</span>, <span class="hljs-string">&quot;\\x22&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span><br>      ]<br>      gsub =&gt; [<br>        <span class="hljs-string">&quot;cookie&quot;</span>, <span class="hljs-string">&quot;\\x0A&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span><br>      ]<br>    &#125;<br>  &#125;<br> &#125;<br><br><br>output &#123;<br>  <span class="hljs-keyword">if</span> [fields][document_type] == <span class="hljs-string">&quot;nginx_access_log&quot;</span> &#123;<br>  elasticsearch &#123;<br>    hosts =&gt; [<span class="hljs-string">&quot;192.168.1.30:9200&quot;</span>]<br>    index =&gt; <span class="hljs-string">&#x27;nginx-%&#123;+YYYY-MM-dd&#125;&#x27;</span><br>    template =&gt; <span class="hljs-string">&quot;/opt/logstash-6.5.3/config/template_nginxlog.json&quot;</span><br>    #template_name =&gt; <span class="hljs-string">&quot;nginxlog&quot;</span><br>    template_overwrite =&gt; <span class="hljs-keyword">true</span><br>    document_type =&gt; <span class="hljs-string">&quot;_doc&quot;</span>   #es报错文件格式不匹配<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>es报错信息，文件格式不匹配</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">failed <span class="hljs-keyword">to</span> put mappings <span class="hljs-keyword">on</span> indices [[[nginx<span class="hljs-number">-2020</span><span class="hljs-number">-11</span><span class="hljs-number">-18</span>/ueZB7rY1QPilUWjk3S9ykg]]], <span class="hljs-keyword">type</span> [doc]java.lang.IllegalArgumentException: Rejecting <span class="hljs-keyword">mapping</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">to</span> [nginx<span class="hljs-number">-2020</span><span class="hljs-number">-11</span><span class="hljs-number">-18</span>] <span class="hljs-keyword">as</span> the final <span class="hljs-keyword">mapping</span> would have more than <span class="hljs-number">1</span> <span class="hljs-keyword">type</span>: [_doc, doc]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Elk</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s使用Jenkins发布版本</title>
    <url>/2021/03/16/k8s%E4%BD%BF%E7%94%A8Jenkins%E5%8F%91%E5%B8%83%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="1、安装Jenkins"><a href="#1、安装Jenkins" class="headerlink" title="1、安装Jenkins"></a>1、安装Jenkins</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#准备Java环境</span><br>tar xvf  jdk-<span class="hljs-number">8</span>u231-linux-x64.tar.gz -C <span class="hljs-regexp">/usr/</span>local/<br>cd <span class="hljs-regexp">/usr/</span>local/<br>ln -s jdk1.<span class="hljs-number">8.0</span>_231 java<br><br>cat  <span class="hljs-regexp">/etc/</span>profile.d/java<br>export JAVA_HOME=<span class="hljs-regexp">/usr/</span>local/java<br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><br>source  <span class="hljs-regexp">/etc/</span>profile.d/java<br>java  -version<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109091629813.png" alt="image-20200109091629813"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">yum -y install wget<br>wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/jenkins.repo http:/</span><span class="hljs-regexp">/pkg.jenkins-ci.org/</span>redhat/jenkins.repo<br>rpm --import https:<span class="hljs-regexp">//</span>jenkins-ci.org<span class="hljs-regexp">/redhat/</span>jenkins-ci.org.key<br>yum --showduplicates list jenkins | expand    <span class="hljs-comment">#查看需要安装的版本</span><br>yum -y install jenkins    <span class="hljs-comment">#默认安装最新的</span><br><br>vim <span class="hljs-regexp">/etc/</span>sysconfig/jenkins    <span class="hljs-comment">#根据自己需要修改Jenkins配置文件</span><br></code></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">systemctl  <span class="hljs-literal">start</span>  jenkins<br>ss -anutlp |grep <span class="hljs-number">8080</span>    <span class="hljs-comment">#查看是否已经启动</span><br></code></pre></td></tr></table></figure>
<h2 id="2、web界面设置"><a href="#2、web界面设置" class="headerlink" title="2、web界面设置"></a>2、web界面设置</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108164547200.png" alt="image-20200108164547200"></p>
<p>查看管理员密码：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cat  <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>secrets/initialAdminPassword<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108164709630.png" alt="image-20200108164709630"></p>
<p>复制粘贴过来即可。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108164821846.png" alt="image-20200108164821846"></p>
<p>这里选择推荐插件，根据自己需求选择。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108184005492.png" alt="image-20200108184005492"></p>
<p>安装时间有点长，如果有安装失败的，点击重新安装</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108201346568.png" alt="image-20200108201346568"></p>
<p>创建你的管理员账户，这里我是用admin账户登录</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108201530291.png" alt="image-20200108201530291"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108201556722.png" alt="image-20200108201556722"></p>
<p>从新设置admin用户的密码。</p>
<h2 id="3、安装插件"><a href="#3、安装插件" class="headerlink" title="3、安装插件"></a>3、安装插件</h2><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108201739175.png" alt="image-20200108201739175"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200108201905202.png" alt="image-20200108201905202"></p>
<p>需要下载的插件有：docker-build-step，docker，Maven Integration</p>
<h2 id="4、配置环境"><a href="#4、配置环境" class="headerlink" title="4、配置环境"></a>4、配置环境</h2><h3 id="4-1安装git"><a href="#4-1安装git" class="headerlink" title="4.1安装git"></a>4.1安装git</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">yum  -y  <span class="hljs-keyword">install</span>  git<br></code></pre></td></tr></table></figure>
<h3 id="4-2安装maven"><a href="#4-2安装maven" class="headerlink" title="4.2安装maven"></a>4.2安装maven</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/apache/m</span>aven<span class="hljs-regexp">/maven-3/</span><span class="hljs-number">3.6</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/binaries/</span>apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>-bin.tar.gz<br><br>tar xvf apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>-bin.tar.gz  -C  <span class="hljs-regexp">/usr/</span>local<br>ln -s apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span> maven<br><br>cat  <span class="hljs-regexp">/etc/</span>profile.d/maven<br>export MAVEN_HOME=<span class="hljs-regexp">/usr/</span>local/maven<br>export PATH=<span class="hljs-variable">$MAVEN_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br>source  <span class="hljs-regexp">/etc/</span>profile.d/maven<br>mvn  --version<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109092023584.png" alt="image-20200109092023584"></p>
<h3 id="4-3安装docker"><a href="#4-3安装docker" class="headerlink" title="4.3安装docker"></a>4.3安装docker</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">yum install -y yum-utils device-mapper-persistent-data lvm2<br>yum-config-manager --add-repo http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br>yum makecache fast<br>yum install -y docker-ce-<span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">3</span>.el7<br>systemctl start docker<br>systemctl status docker<br>chmod <span class="hljs-number">777</span> <span class="hljs-regexp">/var/</span>run/docker.sock<br></code></pre></td></tr></table></figure>
<h3 id="4-4配置setting文件"><a href="#4-4配置setting文件" class="headerlink" title="4.4配置setting文件"></a>4.4配置setting文件</h3><p>备注：这里我使用的是公司私服，需要配置setting文件，我的setting文件放在/opt/下</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109093436907.png" alt="image-20200109093436907"></p>
<h3 id="4-5-安装nodejs"><a href="#4-5-安装nodejs" class="headerlink" title="4.5  安装nodejs"></a>4.5  安装nodejs</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">tar xvf node-v12.<span class="hljs-number">14.0</span>-linux-x64.tar.xz -C <span class="hljs-regexp">/usr/</span>local/<br>cd <span class="hljs-regexp">/usr/</span>local/<br>ln -s node-v12.<span class="hljs-number">14.0</span>-linux-x64 nodejs<br>vim <span class="hljs-regexp">/etc/</span>profile.d/nodejs<br>export NODE_HOME=<span class="hljs-regexp">/usr/</span>local/nodejs<br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin<br>export NODE_PATH=<span class="hljs-variable">$NODE_HOME</span><span class="hljs-regexp">/lib/</span>node_modules:<span class="hljs-variable">$PATH</span><br><br>source <span class="hljs-regexp">/etc/</span>profile.d/nodejs<br>node --version<br>npm -v<br>npm install -g nrm<br>nrm ls<br>nrm add econage  http:<span class="hljs-regexp">//</span>nexus.econage.com:<span class="hljs-number">8081</span><span class="hljs-regexp">/repository/</span>npm/<br>nrm use econage<br></code></pre></td></tr></table></figure>
<h2 id="5、配置全局环境"><a href="#5、配置全局环境" class="headerlink" title="5、配置全局环境"></a>5、配置全局环境</h2><h3 id="5-1配置docker"><a href="#5-1配置docker" class="headerlink" title="5.1配置docker"></a>5.1配置docker</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094545424.png" alt="image-20200109094545424"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094729157.png" alt="image-20200109094729157"></p>
<p>拉到最下面选择创建一个云，设置名称，还有url</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094915957.png" alt="image-20200109094915957"></p>
<h3 id="5-2配置maven，jdk，git"><a href="#5-2配置maven，jdk，git" class="headerlink" title="5.2配置maven，jdk，git"></a>5.2配置maven，jdk，git</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109095046683.png" alt="image-20200109095046683"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109095202002.png" alt="image-20200109095202002"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109095231170.png" alt="image-20200109095231170"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109095305156.png" alt="image-20200109095305156"></p>
<p>配置完成后保存！</p>
<h2 id="6、配置项目"><a href="#6、配置项目" class="headerlink" title="6、配置项目"></a>6、配置项目</h2><p>选择构建maven项目</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109093621878.png" alt="image-20200109093621878"></p>
<p>选择git</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094015268.png" alt="image-20200109094015268"></p>
<p>这里需要创建一个远程克隆代码的用户，这个用户必须存在你的gitlab代码用户组中，而且有clone代码的权限</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094207003.png" alt="image-20200109094207003"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094301643.png" alt="image-20200109094301643"></p>
<p>然后选择刚才创建的用户即可，生产环境没有配置自动构建，需要的自行配置</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109094416853.png" alt="image-20200109094416853"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109095652155.png" alt="image-20200109095652155"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109095956958.png" alt="image-20200109095956958"></p>
<p>Dckerfile文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">registry</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">jdk</span><span class="hljs-selector-pseudo">:1.8_232</span>    #这里是我私仓自己的<span class="hljs-selector-tag">jdk</span>镜像<br><span class="hljs-selector-tag">ADD</span> ./<span class="hljs-selector-tag">target</span>/<span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span>  <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span><br><span class="hljs-selector-tag">CMD</span>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;java  -jar app.jar  -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;</span>]</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109100635066.png" alt="image-20200109100635066"></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#完整的命令，根据自己环境修改，制作示例，具体可查看kebectl  set  image命令的使用</span><br><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">192.16.6.89</span> <span class="hljs-string">&quot;kubectl set image deployment/hello hello=registry.cn-hangzhou.aliyuncs.com/helloworld/hello:<span class="hljs-variable">$&#123;BUILD_NUMBER&#125;</span> -n master&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="7、报错处理"><a href="#7、报错处理" class="headerlink" title="7、报错处理"></a>7、报错处理</h2><p>说明：这里是Jenkins用户去执行命令，会报错Host key verification failed，需要使用Jenkins用户创建密钥</p>
<p>解决办法：</p>
<p>​        在安装jenkins后,系统生成了jenkins这个普通用户,但是在/etc/passwd中,他的shell是/bin/false,所以他不能登录系统,也没有家目录;首先我们修改他的登录权限,将/bin/false改为/bin/bash,切换到jenkins用户,su - jenkins,他的终端显示为-bash-4.2$</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">jenkins:</span><span class="hljs-attr">x:</span><span class="hljs-number">997</span>:<span class="hljs-number">995</span>:Jenkins Automation <span class="hljs-attr">Server:</span><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins:/</span>bin/bash<br></code></pre></td></tr></table></figure>
<ol>
<li>生成jenkins用户密钥对</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">[root@bogon .ssh]<span class="hljs-comment"># su - jenkins</span><br>-bash-<span class="hljs-number">4.2</span>$ ssh-keygen -t rsa<br>回车<br><br>-bash-<span class="hljs-number">4.2</span>$ ssh-copy-id -i <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>.ssh/id_rsa.pub root@<span class="hljs-number">192.168</span>.<span class="hljs-number">75.12</span>&lt;k8s集群master节点的ip&gt;<br></code></pre></td></tr></table></figure>
<ol>
<li>使用sudo提升普通用户权限<br>用viduso去修改文件,命令和命令之间要用逗号,最后用visudo -c检查语法是否出错.</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">visudo<br>root    ALL=(ALL)       ALL  <span class="hljs-comment"># 原有的</span><br>jenkins ALL=(ALL)       NOPASSWD:<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ssh,/u</span>sr<span class="hljs-regexp">/bin/</span>rsync <span class="hljs-comment"># 新增的</span><br></code></pre></td></tr></table></figure>
<p>最后就能够在jenkins中使用command命令执行了</p>
<p>构建成功后</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200109101124234.png" alt="image-20200109101124234"></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>no module named yum有效解决办法</title>
    <url>/2021/01/20/no-module-named-yum%E6%9C%89%E6%95%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1、事件描述"><a href="#1、事件描述" class="headerlink" title="1、事件描述"></a>1、事件描述</h2><p>​        因误删系统python环境，导致yum不能使用，报错如下</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">There was a problem importing one <span class="hljs-keyword">of</span> the Python modules<br>required <span class="hljs-keyword">to</span> run yum. The error leading <span class="hljs-keyword">to</span> <span class="hljs-built_in">this</span> problem was:<br><br>   No <span class="hljs-built_in">module</span> named yum<br><br>Please install a package which provides <span class="hljs-built_in">this</span> <span class="hljs-built_in">module</span>, <span class="hljs-keyword">or</span><br>verify <span class="hljs-literal">that</span> the <span class="hljs-built_in">module</span> <span class="hljs-keyword">is</span> installed correctly.<br><br>It<span class="hljs-string">&#x27;s possible that the above module doesn&#x27;</span>t match the<br>current version <span class="hljs-keyword">of</span> Python, which is:<br><span class="hljs-number">2.7</span>.<span class="hljs-number">5</span> (<span class="hljs-keyword">default</span>, Apr  <span class="hljs-number">2</span> <span class="hljs-number">2020</span>, <span class="hljs-number">13</span>:<span class="hljs-number">16</span>:<span class="hljs-number">51</span>)<br>[GCC <span class="hljs-number">4.8</span>.<span class="hljs-number">5</span> <span class="hljs-number">20150623</span> (Red Hat <span class="hljs-number">4.8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">39</span>)]<br><br>If you cannot solve <span class="hljs-built_in">this</span> problem yourself, please go <span class="hljs-keyword">to</span><br>the yum faq at:<br>  http:<span class="hljs-regexp">//yum.baseurl.org/wiki/Faq</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200806112611007.png" alt="image-20200806112611007"></p>
<h2 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h2><h3 id="2-1卸载系统原有的yum安装包"><a href="#2-1卸载系统原有的yum安装包" class="headerlink" title="2.1卸载系统原有的yum安装包"></a>2.1卸载系统原有的yum安装包</h3><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">#强制删除系统安装程序yum包及其相关<br>rpm -qa|grep yum|xargs rpm -ev --allmatches --nodeps<br>#删除所有残余文件<br>whereis yum |xargs rm -frv  ##xargs，允许你对输出执行其他某些命令<br>#验证删除<br>whereis yum  ##验证删除，返回无结果<br></code></pre></td></tr></table></figure>
<h3 id="2-2下载python需要的rpm包"><a href="#2-2下载python需要的rpm包" class="headerlink" title="2.2下载python需要的rpm包"></a>2.2下载python需要的rpm包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">6</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-chardet-<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">6</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-libs-<span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">5</span>-<span class="hljs-number">88</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/libxml<span class="hljs-number">2</span>-python-<span class="hljs-number">2</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span>-<span class="hljs-number">6</span>.el<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/libsemanage-python-<span class="hljs-number">2</span>.<span class="hljs-number">5</span>-<span class="hljs-number">14</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/policycoreutils-python-<span class="hljs-number">2</span>.<span class="hljs-number">5</span>-<span class="hljs-number">34</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/libselinux-python-<span class="hljs-number">2</span>.<span class="hljs-number">5</span>-<span class="hljs-number">15</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-iniparse-<span class="hljs-number">0</span>.<span class="hljs-number">4</span>-<span class="hljs-number">9</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-schedutils-<span class="hljs-number">0</span>.<span class="hljs-number">4</span>-<span class="hljs-number">6</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-linux-procfs-<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">11</span>-<span class="hljs-number">4</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-urlgrabber-<span class="hljs-number">3</span>.<span class="hljs-number">10</span>-<span class="hljs-number">10</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/dbus-python-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>-<span class="hljs-number">9</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-firewall-<span class="hljs-number">0</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>-<span class="hljs-number">8</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-perf-<span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1127</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-kitchen-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>-<span class="hljs-number">5</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-<span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">5</span>-<span class="hljs-number">88</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-decorator-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/audit-libs-python-<span class="hljs-number">2</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">4</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-IPy-<span class="hljs-number">0</span>.<span class="hljs-number">75</span>-<span class="hljs-number">6</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-gobject-base-<span class="hljs-number">3</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>_<span class="hljs-number">4</span>.<span class="hljs-number">1</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-slip-<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/newt-python-<span class="hljs-number">0</span>.<span class="hljs-number">52</span>.<span class="hljs-number">15</span>-<span class="hljs-number">4</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-configobj-<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-<span class="hljs-number">7</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-pycurl-<span class="hljs-number">7</span>.<span class="hljs-number">19</span>.<span class="hljs-number">0</span>-<span class="hljs-number">19</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/rpm-python-<span class="hljs-number">4</span>.<span class="hljs-number">11</span>.<span class="hljs-number">3</span>-<span class="hljs-number">43</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-slip-dbus-<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span>  http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/python-pyudev-<span class="hljs-number">0</span>.<span class="hljs-number">15</span>-<span class="hljs-number">9</span>.el<span class="hljs-number">7</span>.noarch.rpm<br></code></pre></td></tr></table></figure>
<h3 id="2-3下载yum所需的rpm包"><a href="#2-3下载yum所需的rpm包" class="headerlink" title="2.3下载yum所需的rpm包"></a>2.3下载yum所需的rpm包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1810</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/yum-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>-<span class="hljs-number">161</span>.el<span class="hljs-number">7</span>.centos.noarch.rpm<br><span class="hljs-attribute">wget</span> http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1810</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/yum-metadata-parser-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>-<span class="hljs-number">10</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><span class="hljs-attribute">wget</span> http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1810</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/yum-plugin-aliases-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">31</span>-<span class="hljs-number">50</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span> http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1810</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/yum-plugin-fastestmirror-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">31</span>-<span class="hljs-number">50</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span> http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1810</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/yum-plugin-protectbase-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">31</span>-<span class="hljs-number">50</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><span class="hljs-attribute">wget</span> http://mirrors.<span class="hljs-number">163</span>.com/centos/<span class="hljs-number">7</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1810</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/yum-utils-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">31</span>-<span class="hljs-number">50</span>.el<span class="hljs-number">7</span>.noarch.rpm<br></code></pre></td></tr></table></figure>
<h3 id="2-4安装"><a href="#2-4安装" class="headerlink" title="2.4安装"></a>2.4安装</h3><p>​        进入到放rpm包的目录，使用下面命令安装</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">rpm -ivh <span class="hljs-params">--force</span> *<span class="hljs-string">.rpm</span> <span class="hljs-params">--nodeps</span><br></code></pre></td></tr></table></figure>
<h3 id="2-5验证"><a href="#2-5验证" class="headerlink" title="2.5验证"></a>2.5验证</h3><p>​        执行yum命令就能看到熟悉的界面了</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus对接钉钉</title>
    <url>/2021/03/22/prometheus%E5%AF%B9%E6%8E%A5%E9%92%89%E9%92%89/</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dingtalk</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">dingtalk</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">dingtalk</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">timonwong/prometheus-webhook-dingtalk:latest</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">args:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--ding.profile=webhook1=https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxx</span>        <span class="hljs-comment">#自己钉钉token的地址</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">dingtalk</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8060</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">50m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">50m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">capabilities:</span> &#123;&#125;<br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dingtalk</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8060</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8060</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">dingtalk</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><span class="hljs-attr">status:</span><br>  <span class="hljs-attr">loadBalancer:</span> &#123;&#125;<br><br><span class="hljs-string">https://github.com/timonwong/prometheus-webhook-dingtalk</span><br></code></pre></td></tr></table></figure>
<p>测试token是否能连通：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">curl <span class="hljs-symbol">&#x27;https</span>://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxx&#x27; \<br>   -H <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-keyword">Type</span>: application/json&#x27; \<br>   -d &#x27;&#123;<span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>: &#123;<span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;我就是我, 是不一样的烟火&quot;</span>&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure>
<p>能在钉钉群看到一下就说明成功了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200608160534812.png" alt="image-20200608160534812"></p>
<p>在alertmanager中配置连接钉钉</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">apiVersion</span>: v1<br><span class="hljs-attribute">data</span>:<br>  alertmanager.<span class="hljs-attribute">yml</span>: |<br>    <span class="hljs-attribute">global</span>:<br>      <span class="hljs-attribute">resolve_timeout</span>: <span class="hljs-number">5</span>m<br>    <span class="hljs-attribute">route</span>:<br>      <span class="hljs-attribute">group_by</span>: [alertname]<br>      <span class="hljs-attribute">group_wait</span>: <span class="hljs-number">30s</span><br>      <span class="hljs-attribute">group_interval</span>: <span class="hljs-number">5</span>m<br>      <span class="hljs-attribute">repeat_interval</span>: <span class="hljs-number">1</span>h<br>      <span class="hljs-attribute">receiver</span>: default<br>      <span class="hljs-attribute">routes</span>:<br>      - <span class="hljs-attribute">receiver</span>: default<br>        <span class="hljs-attribute">group_wait</span>: <span class="hljs-number">10s</span><br>        <span class="hljs-attribute">match_re</span>:<br>          <span class="hljs-attribute">alertname</span>: 内存使用率告警|磁盘使用率告警|CPU使用率告警<br>    <span class="hljs-attribute">receivers</span>:<br>    - <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;default&#x27;</span><br>      <span class="hljs-attribute">webhook_configs</span>:<br>      - <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://dingtalk.prometheus.svc.cluster.local:8060/dingtalk/webhook1/send&#x27;</span><br>        <span class="hljs-attribute">send_resolved</span>: true<br><span class="hljs-attribute">kind</span>: ConfigMap<br><span class="hljs-attribute">metadata</span>:<br>  <span class="hljs-attribute">labels</span>:<br>    <span class="hljs-attribute">app</span>: prometheus<br>    <span class="hljs-attribute">chart</span>: prometheus-<span class="hljs-number">11.3</span>.<span class="hljs-number">0</span><br>    <span class="hljs-attribute">component</span>: alertmanager<br>    <span class="hljs-attribute">heritage</span>: Helm<br>    <span class="hljs-attribute">release</span>: prometheus<br>  <span class="hljs-attribute">name</span>: prometheus-alertmanager<br>  <span class="hljs-attribute">namespace</span>: prometheus<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Rancher:v2.3安装创建K8s集群</title>
    <url>/2021/01/04/rancher-v2-3%E5%AE%89%E8%A3%85%E5%88%9B%E5%BB%BAK8s%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="1、rancher介绍"><a href="#1、rancher介绍" class="headerlink" title="1、rancher介绍"></a>1、rancher介绍</h3><p>每个团队都可以在他们选择的公共云或私有云上部署应用程序，Rancher 在 IT 和 DevOps 组织中扮演的角色如下：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125105835491.png" alt="image-20191125105835491"></p>
<p>同时具备多种功能：</p>
<ul>
<li>内置 CI/CD 流水线</li>
<li>告警和日志收集功能</li>
<li>多集群管理功能</li>
<li>集成 Rancher Kubernetes Engine (RKE)</li>
<li>与各云 Kubernetes 服务(如 GKE、EKS、AKS) 集成</li>
</ul>
<h3 id="2、安装要求"><a href="#2、安装要求" class="headerlink" title="2、安装要求"></a>2、安装要求</h3><h4 id="2-1操作系统和Docker要求"><a href="#2-1操作系统和Docker要求" class="headerlink" title="2.1操作系统和Docker要求"></a>2.1操作系统和Docker要求</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104210860.png" alt="image-20191125104210860"></p>
<h4 id="2-2硬件需求"><a href="#2-2硬件需求" class="headerlink" title="2.2硬件需求"></a>2.2硬件需求</h4><p>HA集群</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104545019.png" alt="image-20191125104545019"></p>
<p>单节点</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104610584.png" alt="image-20191125104610584"></p>
<h4 id="2-3Rancher与用户群集通信的端口要求"><a href="#2-3Rancher与用户群集通信的端口要求" class="headerlink" title="2.3Rancher与用户群集通信的端口要求"></a>2.3Rancher与用户群集通信的端口要求</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125104812067.png" alt="image-20191125104812067"></p>
<h3 id="3、单节点安装"><a href="#3、单节点安装" class="headerlink" title="3、单节点安装"></a>3、单节点安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">docker run -d --restart=unless-stopped \<br>  -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> \<br>  -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rancher:/u</span>sr<span class="hljs-regexp">/local/</span>rancher \<br>  rancher/rancher:latest<br></code></pre></td></tr></table></figure>
<h3 id="4、rancher的web界面"><a href="#4、rancher的web界面" class="headerlink" title="4、rancher的web界面"></a>4、rancher的web界面</h3><h4 id="4-1自定义集群"><a href="#4-1自定义集群" class="headerlink" title="4.1自定义集群"></a>4.1自定义集群</h4><p>通过宿主机的IP登录</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125110853326.png" alt="image-20191125110853326"></p>
<p>设置需要访问的URL地址</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125110956934.png" alt="image-20191125110956934"></p>
<p>设置中文字体</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111044885.png" alt="image-20191125111044885"></p>
<p>添加集群</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111137103.png" alt="image-20191125111137103"></p>
<p>生成自己的集群</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111225387.png" alt="image-20191125111225387"></p>
<p>可以自定义RKE集群，也可以导入自己已经建好的集群。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111408862.png" alt="image-20191125111408862"></p>
<p>设置自定义集群的名字 ，选择需要安装的集群的版本。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111607904.png" alt="image-20191125111607904"></p>
<p>选择需要的网络策略。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111641275.png" alt="image-20191125111641275"></p>
<p>自己私有仓库地址，以及账密。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111756334.png" alt="image-20191125111756334"></p>
<p>根据自己需求设置。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125111943481.png" alt="image-20191125111943481"></p>
<p>master节点选择后在你需要安装成master节点运行下面的命令</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125112055397.png" alt="image-20191125112055397"></p>
<p>在工作节点运行以下命令。</p>
<p>运行过程会去拉取所需镜像，时间视自己网络情况而定。</p>
<p>所有容器运行好之后可以看到以下界面，表示你的集群已经好了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125112358230.png" alt="image-20191125112358230"></p>
<p>复制kubeconfig文件在master节点下执行</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 添加Kubernetes的yum源</span><br><span class="hljs-variable">$ </span>cat &gt;&gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt;EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mirrors.aliyun.com/kubernetes</span><span class="hljs-regexp">/yum/repos</span><span class="hljs-regexp">/kubernetes-el7-x86_64/</span><br>enabled=<span class="hljs-number">1</span><br>gpgcheck=0<br>EOF<br><br><span class="hljs-comment"># 查看可安装的版本</span><br><span class="hljs-variable">$ </span>yum list kubectl –showduplicates<br><br><span class="hljs-comment"># yum方式安装kubectl</span><br><span class="hljs-variable">$ </span>yum install -y kubectl.x86_64<br><br>[root<span class="hljs-variable">@node1</span> ~]<span class="hljs-comment"># mkdir -p .kube</span><br>[root<span class="hljs-variable">@node1</span> ~]<span class="hljs-comment"># vim .kube/config</span><br></code></pre></td></tr></table></figure>
<p>即可在master节点通过命令行查看整个集群信息。</p>
<h4 id="4-2导入集群"><a href="#4-2导入集群" class="headerlink" title="4.2导入集群"></a>4.2导入集群</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125113210838.png" alt="image-20191125113210838"></p>
<p>随便定义一个集群名。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125113405043.png" alt="image-20191125113405043"></p>
<p>复制下面两条命令在master节点运行，运行第一条命令时，由于是自签证书会报x509错误，在执行下面一条命令跳过错误就好。</p>
<p>当在master节点看到</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191125113631090.png" alt="image-20191125113631090"></p>
<p>则表示集群导入成功，如果pod状态报错，根据报错信息处理即可。</p>
]]></content>
      <categories>
        <category>Rancher</category>
      </categories>
      <tags>
        <tag>Rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>Rancher流水线&lt;后端&gt;</title>
    <url>/2021/01/04/rancher%E6%B5%81%E6%B0%B4%E7%BA%BF-%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h3 id="1、Pipeline授权设置"><a href="#1、Pipeline授权设置" class="headerlink" title="1、Pipeline授权设置"></a>1、Pipeline授权设置</h3><p>Gitlab版本需要在9以上，授权账号必须是项目的Maintainer（gitlab 8 里面是master）,在gitlab中创建application，callbackurl在rancher上复制</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193027408.png" alt="image-20191214193027408"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193138485.png" alt="image-20191214193138485"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193217867.png" alt="image-20191214193217867"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193509071.png" alt="image-20191214193509071"></p>
<p>生成需要的ID和Key</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193835277.png" alt="image-20191214193835277"></p>
<p>将刚才生成的ID和Key填入，地址输入自己gitlab的URL</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214193949412.png" alt="image-20191214193949412"></p>
<p>授权完成后，给流水线的运行设置资源限制</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194027442.png" alt="image-20191214194027442"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194108099.png" alt="image-20191214194108099"></p>
<h3 id="2、配置流水线"><a href="#2、配置流水线" class="headerlink" title="2、配置流水线"></a>2、配置流水线</h3><p>现在就可以开始设置流水线了，先设置代码库，开启需要运行的代码库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194230120.png" alt="image-20191214194230120"></p>
<p>设置什么条件可以触发流水线</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194305401.png" alt="image-20191214194305401"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194325948.png" alt="image-20191214194325948"></p>
<p>开始配置流水线流程，选择你需要配置的分支</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194356585.png" alt="image-20191214194356585"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194421735.png" alt="image-20191214194421735"></p>
<h3 id="3、流水线配置"><a href="#3、流水线配置" class="headerlink" title="3、流水线配置"></a>3、流水线配置</h3><p>第一步是系统已经设定好的，我们只需要根据自己的需要设置后面的步骤</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194540875.png" alt="image-20191214194540875"></p>
<p>第二步 build，选择的类型是运行脚本，执行mvn clean package命令，选用的镜像是我自己打包maven3.6镜像。  公司有自己的maven私服，那么打包maven镜像的时候，可以设置好setting.xml文件，上传到前面配置的harbor仓库就可以了。如果不知道setting文件放到mvn镜像中的位置，就先运行 mvn  -X查看mvn读取配置文件的顺序，再把setting文件copy进去即可</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194705581.png" alt="image-20191214194705581"></p>
<p>这一步主要是用build构建后的包，根据代码中的Dockerfile打包成镜像，当前目录依然是git  clone后的目录，指定Dockerfile的相对位置，并命名打包后的惊醒名，其中镜像名中的:${CICD_GIT_COMMIT}是rancher提供的变量。这里Dockerfile路径和构建上下文路径是gitlab库中的dockerfile文件的路径。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194801709.png" alt="image-20191214194801709"></p>
<p>下面讲下dockerfile的配置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">registry</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">jdk</span><span class="hljs-selector-pseudo">:1.8_232</span>    #这里是我私仓自己的<span class="hljs-selector-tag">jdk</span>镜像<br><br><span class="hljs-selector-tag">ADD</span> ./<span class="hljs-selector-tag">target</span>/<span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span>  <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span><br><br><span class="hljs-selector-tag">CMD</span>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;java  -jar app.jar  -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;</span>]</span><br></code></pre></td></tr></table></figure>
<p>最后一步部署Deployment.yaml文件，yaml路径是你gitlab仓库中项目下的路径</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214194824641.png" alt="image-20191214194824641"></p>
<p>保存完成后就可以看到正在构建了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214195024989.png" alt="image-20191214195024989"></p>
<p>全部运行成功后，就可以在工作负载看到pod的运行状态</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20191214195120170.png" alt="image-20191214195120170"></p>
]]></content>
      <categories>
        <category>Rancher</category>
      </categories>
      <tags>
        <tag>Rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>sonarqube使用钉钉告警</title>
    <url>/2021/01/05/sonarqube%E4%BD%BF%E7%94%A8%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<p>说明：因项目需求，创建的是一个Jenkins自由项目，需要sonar代码扫描通过再继续maven构建、并且不发送钉钉告警，扫描不通过则停止构建、并发送钉钉告警。</p>
<h3 id="1、安装告警插件"><a href="#1、安装告警插件" class="headerlink" title="1、安装告警插件"></a>1、安装告警插件</h3><p>#下载release包 /releases/dingding-sonar-1.0-SNAPSHOT.jar</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/chejiangyi/</span>dingding-sonar<span class="hljs-regexp">/repository/</span>archive/master.zip<br><br>unzip master.zip<br></code></pre></td></tr></table></figure>
<p>#运行jar包 sonar.url为sonar安装地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dingding-sonar/releases<br></code></pre></td></tr></table></figure>
<p>#启动服务</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> java -jar dingding-sonar-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT.jar \ --server.port=<span class="hljs-number">8082</span> \ --sonar.url=http://<span class="hljs-number">192.168.0.129:9000</span> \ &gt; /dev/null <span class="hljs-number">2</span> &gt;&amp; <span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure>
<p>#检查部署成功 sonar-project-id 为sonar的项目id:task-dev</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">curl <span class="hljs-attr">http:</span><span class="hljs-comment">//&lt;your dingding-sonar-server IP&gt;:8082/?projectname=&#123;sonar-project-id&#125;</span><br></code></pre></td></tr></table></figure>
<p>#返回结果</p>
<p>bug:0,漏洞:0,坏味道:58,覆盖率:0.0,重复:0.0,状态:OK</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200305135649539.png" alt="image-20200305135649539"></p>
<h3 id="2、发送告警通知"><a href="#2、发送告警通知" class="headerlink" title="2、发送告警通知"></a>2、发送告警通知</h3><p>钉钉通知发布脚本内容示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#!/bin/bash</span><br>projectName=task<span class="hljs-literal">-dev</span><br>projectId=task<span class="hljs-literal">-dev</span><br>dingdingToken=a9c7f0dff01a01cefda6af09e5d0ec068a55d755008c2f559ec2598e9f377djl    <span class="hljs-comment">#钉钉群组创建一个自由的webhook的token</span><br>sonarreport=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">0.121</span>:<span class="hljs-number">8082</span>/?projectname=<span class="hljs-variable">$</span>&#123;projectName&#125;)<br>sonar=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">0.121</span>:<span class="hljs-number">8082</span>/?projectname=task<span class="hljs-literal">-dev</span> |awk <span class="hljs-operator">-F</span> <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-string">&#x27;&#123;print $7&#125;&#x27;</span>|<span class="hljs-built_in">tee</span> dev.txt)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$sonar</span>&quot;</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$sonar</span>&quot;</span> == <span class="hljs-string">&quot;ERROR&quot;</span> ]]<br>then<br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$</span>&#123;sonarreport&#125;<br>  <span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=<span class="hljs-variable">$</span>&#123;dingdingToken&#125;&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type: application/json&quot;</span>  <span class="hljs-literal">-d</span> <span class="hljs-string">&quot;&#123; \&quot;</span>msgtype\<span class="hljs-string">&quot;: \&quot;</span>markdown\<span class="hljs-string">&quot;, \&quot;</span>markdown\<span class="hljs-string">&quot;: &#123; \&quot;</span>title\<span class="hljs-string">&quot;:\&quot;</span>sonar代码<br>质量\<span class="hljs-string">&quot;, \&quot;</span>text\<span class="hljs-string">&quot;: \&quot;</span><span class="hljs-comment">## Sonar代码质量报告 \n</span><br>&gt;<span class="hljs-variable">$</span>&#123;projectName&#125; \n<br>&gt; [<span class="hljs-type">sonar</span>地址](http://<span class="hljs-number">192.168</span>.<span class="hljs-number">0.129</span>:<span class="hljs-number">9000</span>/dashboard?id=<span class="hljs-variable">$</span>&#123;projectId&#125;) \n<br>&gt; <span class="hljs-variable">$</span>&#123;sonarreport&#125; \n\<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;&quot;</span><br>  <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$</span>&#123;sonarreport&#125;<br>fi<br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://www.cnblogs.com/chejiangyi/p/10844232.html">https://www.cnblogs.com/chejiangyi/p/10844232.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Sonarqube</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制安装mariadb主从复制</title>
    <url>/2021/01/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85mariadb%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>官网地址：<a href="https://mariadb.com/downloads">https://mariadb.com/downloads</a></p>
<h3 id="1、安装MariaDB"><a href="#1、安装MariaDB" class="headerlink" title="1、安装MariaDB"></a>1、安装MariaDB</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> xvf mariadb-<span class="hljs-number">10</span>.<span class="hljs-number">4</span>.<span class="hljs-number">12</span>-linux-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.tar.gz -C /usr/local/<br><span class="hljs-attribute">cd</span> /usr/local<br><span class="hljs-attribute">ln</span> -s mariadb-<span class="hljs-number">10</span>.<span class="hljs-number">4</span>.<span class="hljs-number">12</span>-linux-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> mysql<br><span class="hljs-attribute">groupadd</span> mysql<br><span class="hljs-attribute">useradd</span> -g mysql mysql<br></code></pre></td></tr></table></figure>
<p>创建数据目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/my</span>sql/data<br>chown -R mysql.mysql <span class="hljs-regexp">/data/</span><br>chown -R mysql.mysql <span class="hljs-regexp">/usr/</span>local/mysql<br></code></pre></td></tr></table></figure>
<h3 id="2、安装配置"><a href="#2、安装配置" class="headerlink" title="2、安装配置"></a>2、安装配置</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local/mysql<br>.<span class="hljs-regexp">/scripts/my</span>sql_install_db --user=mysql --datadir=<span class="hljs-regexp">/data/my</span>sql/data    <span class="hljs-comment">#执行配置脚本</span><br></code></pre></td></tr></table></figure>
<p>修改/etc/my.cnf中的配置<master></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[mysqld]<br>slow_query_log = 1       #开启慢日志<br>slow_query_log_file = <span class="hljs-string">&quot;/data/log/mariadb/mariadb-slow.log&quot;</span>     #慢日志存放目录<br>long_query_time = 2      #查询时间超过 2 秒则定义为慢查询<br><span class="hljs-attribute">bind-address</span>=0.0.0.0     #一般建议全部绑定，因为 mysql 和 mariadb 不允许手动绑定指定<span class="hljs-built_in"> IP </span>地址<br>port = 3306<br>datadir = <span class="hljs-string">&quot;/data/mysql/data&quot;</span>     #后期同步的二进制修改信息会放在这里<br>log_error = <span class="hljs-string">&quot;/data/log/mariadb/error.log&quot;</span><br>socket = <span class="hljs-string">&quot;/var/lib/mysql/mysql.sock&quot;</span>         #用于支持本地访问的 socket 文件<br><span class="hljs-attribute">server-id</span>=1              #配置本机 mysql 的唯一 ID，多台 mysql 不能存在相同的 ID<br><span class="hljs-attribute">log-bin</span>=master-bin        #设置”主服务器需要同步的二进制日志”文件名前缀<br><span class="hljs-attribute">relay-log</span>=mysql-relay-bin   #设置”从服务器需要执行的中继日志”文件名前缀<br><span class="hljs-attribute">binlog_format</span>=row           #修改了复制格式为 mixed，mysql 一共有三种格式 mixed 和 statement 和 row ，默认是 row<br>expire_logs_days = 3        #设置”二进制修改信息”的保存时间，过期（三天后）清理<br><span class="hljs-attribute">autocommit</span>=0<br><span class="hljs-attribute">character_set_server</span>=utf8mb4<br><span class="hljs-attribute">collation_server</span>=utf8mb4_bin<br><span class="hljs-attribute">explicit_defaults_for_timestamp</span>=1<br><span class="hljs-attribute">transaction_isolation</span>=READ-COMMITTED<br><span class="hljs-attribute">tmp_table_size</span>=64M<br><span class="hljs-attribute">interactive_timeout</span>=1800<br><span class="hljs-attribute">wait_timeout</span>=1800<br><span class="hljs-attribute">max_connections</span>=200<br><span class="hljs-attribute">max_allowed_packet</span>=32M<br><span class="hljs-attribute">read_rnd_buffer_size</span>=8M<br><span class="hljs-attribute">sort_buffer_size</span>=8M<br><span class="hljs-attribute">join_buffer_size</span>=8M<br><span class="hljs-attribute">binlog_cache_size</span>=4M<br><span class="hljs-attribute">innodb_log_buffer_size</span>=16M<br><span class="hljs-attribute">innodb_flush_log_at_trx_commit</span>=1<br><span class="hljs-attribute">innodb_sort_buffer_size</span>=64M<br><span class="hljs-attribute">innodb_log_file_size</span>=512M<br><span class="hljs-attribute">innodb_print_all_deadlocks</span>=1<br><span class="hljs-attribute">innodb_buffer_pool_size</span>=【物理内存*0.6】<br><span class="hljs-attribute">lower_case_table_names</span>=1            #关闭大小写敏感<br>default-time_zone = <span class="hljs-string">&#x27;+8:00&#x27;</span><br><br>并添加如下配置：<br>[client]<br><span class="hljs-attribute">default-character-set</span>=utf8mb4<br></code></pre></td></tr></table></figure>
<p>修改/etc/my.cnf中的配置<slave></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">log-bin</span>=slave-bin<br></code></pre></td></tr></table></figure>
<h3 id="3、启动数据库"><a href="#3、启动数据库" class="headerlink" title="3、启动数据库"></a>3、启动数据库</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/my</span>sqld_safe --user=mysql --datadir=<span class="hljs-regexp">/data/my</span>sql/data &amp;<br>ln -s <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/my</span>sql.sock <span class="hljs-regexp">/tmp/my</span>sql.sock<br></code></pre></td></tr></table></figure>
<p>设置数据库root用户密码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/my</span>sqladmin -u root password <span class="hljs-string">&#x27;123456&#x27;</span>       <span class="hljs-comment">#设置root用户密码</span><br></code></pre></td></tr></table></figure>
<p>关闭数据库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/my</span>sqladmin -uroot -p shutdown<br></code></pre></td></tr></table></figure>
<h3 id="4、数据库连接、查询"><a href="#4、数据库连接、查询" class="headerlink" title="4、数据库连接、查询"></a>4、数据库连接、查询</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">./bin/mysql -uroot -p<br><span class="hljs-keyword">select</span> host,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;econage123&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br></code></pre></td></tr></table></figure>
<h3 id="5、创建主从连接的用户"><a href="#5、创建主从连接的用户" class="headerlink" title="5、创建主从连接的用户"></a>5、创建主从连接的用户<master></h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;admin&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;admin123&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">replication</span> slave <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;admin&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br><span class="hljs-keyword">show</span> master status;<br></code></pre></td></tr></table></figure>
<h3 id="6、进行关联master节点"><a href="#6、进行关联master节点" class="headerlink" title="6、进行关联master节点"></a>6、进行关联master节点<slave></h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">CHANGE MASTER <span class="hljs-keyword">TO</span><br>  <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;172.18.103.211&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;econage&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;econage&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_PORT</span>=3306,<br>  <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;mysql-bin.000003&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_LOG_POS</span>=1552;<br></code></pre></td></tr></table></figure>
<p>最后输入命令 show slave status\G 查看状态。（写 \G 是换行）</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200408164002241.png" alt="image-20200408164002241"></p>
<p>如果状态没有同步</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">stop</span>  <span class="hljs-literal">slave</span>;<br><span class="hljs-literal">start</span>  <span class="hljs-literal">slave</span>;<br>show <span class="hljs-literal">slave</span> status\G<br></code></pre></td></tr></table></figure>
<p>参考文章：<a href="https://www.landui.com/help/show-9902.html">https://www.landui.com/help/show-9902.html</a></p>
<p>​                    <a href="https://blog.csdn.net/yhld456/article/details/89020979">https://blog.csdn.net/yhld456/article/details/89020979</a></p>
]]></content>
      <categories>
        <category>关系型数据库</category>
      </categories>
      <tags>
        <tag>Mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Calico</title>
    <url>/2021/03/17/%E5%88%9D%E8%AF%86Calico/</url>
    <content><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>​        Calico是针对容器，虚拟机和基于主机的本机工作负载的开源网络和网络安全解决方案。Calico支持广泛的平台，包括Kubernetes，OpenShift，Docker EE，OpenStack和裸机服务。</p>
<p>​        Calico将灵活的网络功能与无处不在的安全性实施相结合，以提供具有本地Linux内核性能和真正的云原生可扩展性的解决方案。Calico为开发人员和集群运营商提供一致的体验和功能集，无论是在公共云中还是本地运行，在单个节点上还是在数千个节点集群中运行。</p>
<h2 id="2、关于Calico"><a href="#2、关于Calico" class="headerlink" title="2、关于Calico"></a>2、关于Calico</h2><p>​        Calico为容器和虚拟机工作负载提供一个安全的<a href="https://www.kubernetes.org.cn/tags/%E7%BD%91%E7%BB%9C">网络</a>连接。</p>
<p>​        Calico可以创建并管理一个3层平面网络，为每个工作负载分配一个完全可路由的IP地址。  工作负载可以在没有IP封装或网络地址转换的情况下进行通信，以实现裸机性能，简化故障排除和提供更好的互操作性。  在需要使用overlay网络的环境中，Calico提供了IP-in-IP隧道技术，或者也可以与flannel等其他overlay网络配合使用。</p>
<p>​        Calico还提供网络安全规则的动态配置。 使用Calico的简单策略语言，就可以实现对容器、虚拟机工作负载和裸机主机各节点之间通信的细粒度控制。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/Calico1.png" alt="https://www.kubernetes.org.cn/img/2018/12/Calico1.png"></p>
<h2 id="3、Calico-主要组件"><a href="#3、Calico-主要组件" class="headerlink" title="3、Calico 主要组件"></a>3、Calico 主要组件</h2><p>​        <a href="https://www.kubernetes.org.cn/tags/Calico">Calico</a>利用了Linux内核原生的路由和iptables防火墙功能。 进出各个容器、虚拟机和物理主机的所有流量都会在路由到目标之前遍历这些内核规则。</p>
<ul>
<li>Felix：主要的Calico代理agent，运行每台计算机上管理endpoints资源。</li>
<li>calicoctl：允许从命令行界面配置实现高级策略和网络。</li>
<li>orchestrator plugins：提供与各种流行的云计算编排工具的紧密集成和同步支持。</li>
<li>key/value store：存储Calico的策略配置和网络状态信息，目前主要使用etcdv3或k8s api。</li>
<li>calico/node：在每个主机上运行，从key/value存储中读取相关的策略和网络配置信息，并在Linux内核中实现它。</li>
<li>Dikastes/Envoy：可选的Kubernetes sidecars，可以通过相互TLS身份验证保护工作负载到工作负载的通信，并增加应用层控制策略。</li>
</ul>
<h3 id="3-1-Felix"><a href="#3-1-Felix" class="headerlink" title="3.1 Felix"></a>3.1 Felix</h3><p>​        Felix是一个守护程序，它在每个提供endpoints资源的计算机上运行。在大多数情况下，这意味着它需要在托管容器或VM的宿主机节点上运行。 Felix 负责编制路由和ACL规则以及在该主机上所需的任何其他内容，以便为该主机上的endpoints资源正常运行提供所需的网络连接。</p>
<p>根据特定的编排环境，Felix负责以下任务：</p>
<ul>
<li>管理网络接口，Felix将有关接口的一些信息编程到内核中，以使内核能够正确处理该endpoint发出的流量。  特别是，它将确保主机正确响应来自每个工作负载的ARP请求，并将为其管理的接口启用IP转发支持。它还监视网络接口的出现和消失，以便确保针对这些接口的编程得到了正确的应用。</li>
<li>编写路由，Felix负责将到其主机上endpoints的路由编写到Linux内核FIB（转发信息库）中。 这可以确保那些发往目标主机的endpoints的数据包被正确地转发。</li>
<li>编写ACLs，Felix还负责将ACLs编程到Linux内核中。 这些ACLs用于确保只能在endpoints之间发送有效的网络流量，并确保endpoints无法绕过Calico的安全措施。</li>
<li>报告状态，Felix负责提供有关网络健康状况的数据。 特别是，它将报告配置其主机时发生的错误和问题。 该数据会被写入etcd，以使其对网络中的其他组件和操作才可见。</li>
</ul>
<h3 id="3-2-Orchestrator-Plugin"><a href="#3-2-Orchestrator-Plugin" class="headerlink" title="3.2 Orchestrator Plugin"></a>3.2 Orchestrator Plugin</h3><p>​        每个主要的云编排平台都有单独的Calico网络插件（例如OpenStack，Kubernetes）。 这些插件的目的是将Calico更紧密地绑定到编排工具中，允许用户管理Calico网络，就像他们管理编排工具中内置的网络工具一样。</p>
<p>​        一个好的Orchestrator插件示例是Calico Neutron ML2 驱动程序。 该插件与Neutron的ML2插件集成，允许用户通过Neutron API调用来配置Calico网络，实现了与Neutron的无缝集成。</p>
<p>Orchestrator插件负责以下任务：</p>
<ul>
<li>API Translation，每个云编排工具都不可避免地拥有自己的一套用于管理网络的API接口规范，  Orchestrator插件的主要工作就是将这些API转换为Calico的数据模型，然后将其存储在Calico的数据存储区中。这种转换中的一些工作将非常简单，其他一部分可能更复杂，以便将单个复杂操作（例如，实时迁移）转换为Calico网络期望的一系列更简单的操作。</li>
<li>Feedback，如有需要，orchestrator插件将从Calico网络向编排器提供管理命令的反馈信息。 包括提供有关Felix存活的信息，以及如果网络配置失败则将某些endpoints标记为失败。</li>
</ul>
<h3 id="3-3-etcd"><a href="#3-3-etcd" class="headerlink" title="3.3 etcd"></a>3.3 etcd</h3><p>​        <a href="https://www.kubernetes.org.cn/tags/etcd">etcd</a>是一个分布式键值存储数据库，专注于实现数据存储一致性。 Calico使用etcd提供组件之间的数据通信，并作为可以保证一致性的数据存储，以确保Calico始终可以构建出一个准确的网络。</p>
<p>​        根据orchestrator插件的不同，etcd既可以是作为主数据存储使用，也可以是一个单独数据存储的轻量级镜像。例如，在OpenStack部署中，OpenStack数据库被认为是“真实配置信息的来源”，而etcd用于镜像其中有关网络配置的信息，并用于服务其他Calico组件。</p>
<p>etcd组件穿插在整个部署中。它可以被分为两组主机节点：核心集群和代理。</p>
<p>​        对于小型部署，核心集群可以是一个节点的etcd集群（通常与orchestrator插件组件位于同一节点上）。这种部署模型很简单但没有为etcd提供冗余。在etcd失败的情况下，orchstrator插件必须重建数据库，例如OpenStack，它需要插件从OpenStack数据库重新同步状态到etcd。</p>
<p>在较大的部署中，核心群集可以根据<a href="https://www.kubernetes.org.cn/4960.html#optimal-cluster-size">etcd管理指南</a>进行扩展。</p>
<p>​        此外，在运行Felix或orchstrator插件的每台计算机上，会运行一个etcd代理服务。这减少了etcd核心集群上的负载，并为主机节点屏蔽了etcd服务集群的细节。在etcd集群与orchstrator插件在同一台机器上都有成员的情况下，可以放弃在该机器上使用etcd代理。</p>
<p>etcd负责执行以下任务：</p>
<ul>
<li>Data Storage，etcd以分布式、一致和容错的方式存储Calico网络的数据（对于至少三个etcd节点的cluster大小）。  这确保Calico网络始终处于已知良好状态，同时允许运行etcd的个别机器节点失败或无法访问。Calico网络数据的这种分布式存储提高了Calico组件从数据库读取的能力。</li>
<li>Communication，etcd也用作组件之间的通信服务。 我们通过让非etcd组件监视键值空间中的某些点来确保他们看到已经做出的任何更改，从而允许他们及时响应这些更改。 该功能允许将状态信息提交到数据库，然后触发基于该状态数据的进一步网络配置管理。</li>
</ul>
<h2 id="4、Calico的IPIP与BGP模式"><a href="#4、Calico的IPIP与BGP模式" class="headerlink" title="4、Calico的IPIP与BGP模式"></a>4、Calico的IPIP与BGP模式</h2><ul>
<li>IPIP是一种将各Node的路由之间做一个tunnel，再把两个网络连接起来的模式。启用IPIP模式时，Calico将在各Node上创建一个名为”tunl0″的虚拟网络接口。如下图所示。</li>
<li>BGP模式则直接使用物理机作为虚拟路由路（vRouter），不再创建额外的tunnel。</li>
</ul>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/Calico2.png" alt="img"></p>
<h2 id="5、Calico的部署规模"><a href="#5、Calico的部署规模" class="headerlink" title="5、Calico的部署规模"></a>5、Calico的部署规模</h2><p>Calico BGP模式在小规模集群中可以直接互联，在大规模集群中可以通过额外的BGP route reflector来完成。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/Calico3.png" alt="img"></p>
<h3 id="5-1-BGP-Client-BIRD"><a href="#5-1-BGP-Client-BIRD" class="headerlink" title="5.1 BGP Client (BIRD)"></a>5.1 BGP Client (BIRD)</h3><p>Calico在每个运行Felix服务的节点上都部署一个BGP客户端。 BGP客户端的作用是读取Felix程序编写到内核中并在数据中心内分发的路由信息。</p>
<p>BGP客户端负责执行以下任务：</p>
<ul>
<li>路由信息分发，当Felix将路由插入Linux内核FIB时，BGP客户端将接收它们并将它们分发到集群中的其他工作节点。</li>
</ul>
<h3 id="5-2-BGP-Route-Reflector-BIRD"><a href="#5-2-BGP-Route-Reflector-BIRD" class="headerlink" title="5.2 BGP Route Reflector (BIRD)"></a>5.2 BGP Route Reflector (BIRD)</h3><p>对于较大规模的部署，简单的BGP可能成为限制因素，因为它要求每个BGP客户端连接到网状拓扑中的每一个其他BGP客户端。这需要越来越多的连接，迅速变得难以维护，甚至会让一些设备的路由表撑满。</p>
<p>因此，在较大规模的部署中，Calico建议部署BGP Route  Reflector。通常是在Internet中使用这样的组件充当BGP客户端连接的中心点，从而防止它们需要与群集中的每个BGP客户端进行通信。为了实现冗余，也可以同时部署多个BGP Route Reflector服务。Route Reflector仅仅是协助管理BGP网络，并没有endpoint数据会通过它们。</p>
<p>在Calico中，此BGP组件也是使用的最常见的BIRD，配置为Route Reflector运行，而不是标准BGP客户端。</p>
<p>BGP Route Reflector负责以下任务：</p>
<ul>
<li>集中式的路由信息分发，当Calico BGP客户端将路由从其FIB通告到Route Reflector时，Route Reflector会将这些路由通告给部署集群中的其他节点。</li>
</ul>
<h3 id="5-3-BIRD是什么"><a href="#5-3-BIRD是什么" class="headerlink" title="5.3 BIRD是什么"></a>5.3 BIRD是什么</h3><p>BIRD是布拉格查理大学数学与物理学院的一个学校项目，项目名是BIRD Internet Routing Daemon的缩写。 目前，它由CZ.NIC实验室开发和支持。</p>
<p>BIRD项目旨在开发一个功能齐全的动态IP路由守护进程，主要针对（但不限于）Linux，FreeBSD和其他类UNIX系统，并在GNU通用公共许可证下分发。详细信息参照官网<a href="https://bird.network.cz/%E3%80%82">https://bird.network.cz/。</a></p>
<p>作为一个开源的网络路由守护进程项目，BRID设计并支持了以下功能：</p>
<ul>
<li>both IPv4 and IPv6 protocols</li>
<li>multiple routing tables</li>
<li>the Border Gateway Protocol (BGPv4)</li>
<li>the Routing Information Protocol (RIPv2, RIPng)</li>
<li>the Open Shortest Path First protocol (OSPFv2, OSPFv3)</li>
<li>the Babel Routing Protocol</li>
<li>the Router Advertisements for IPv6 hosts</li>
<li>a virtual protocol for exchange of routes between different routing tables on a single host</li>
<li>a command-line interface allowing on-line control and inspection of status of the daemon</li>
<li>soft reconfiguration (no need to use complex online commands to  change the configuration, just edit the configuration file and notify  BIRD to re-read it and it will smoothly switch itself to the new  configuration, not disturbing routing protocols unless they are affected by the configuration changes)</li>
<li>a powerful language for route filtering</li>
</ul>
<p>参考文章：<a href="https://www.kubernetes.org.cn/4960.html">https://www.kubernetes.org.cn/4960.html</a></p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>安装MetalLB</title>
    <url>/2021/03/22/%E5%AE%89%E8%A3%85MetalLB/</url>
    <content><![CDATA[<h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><p>如果您在IPVS模式下使用kube-proxy，则从Kubernetes v1.14.2开始，必须启用严格的ARP模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">请注意，如果您将kube-router用作服务代理，则不需要此设置，因为默认情况下它会启用严格的arp。<br></code></pre></td></tr></table></figure>
<p>可以通过在当前集群中编辑kube-proxy配置来实现：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">edit</span> <span class="hljs-string">configmap</span> <span class="hljs-string">-n</span> <span class="hljs-string">kube-system</span> <span class="hljs-string">kube-proxy</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">&quot;ipvs&quot;</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">strictARP:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<p>也可以使用shell命令</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">get</span> configmap kube-proxy -n kube-<span class="hljs-built_in">system</span> -o yaml | \<br>sed -e <span class="hljs-string">&quot;s/strictARP: false/strictARP: true/&quot;</span> | \<br>kubectl <span class="hljs-built_in">diff</span> -f - -n kube-<span class="hljs-built_in">system</span><br><br>kubectl <span class="hljs-built_in">get</span> configmap kube-proxy -n kube-<span class="hljs-built_in">system</span> -o yaml | \<br>sed -e <span class="hljs-string">&quot;s/strictARP: false/strictARP: true/&quot;</span> | \<br>kubectl <span class="hljs-built_in">apply</span> -f - -n kube-<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure>
<h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/metallb/m</span>etallb<span class="hljs-regexp">/v0.9.3/m</span>anifests/namespace.yaml<br>kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/metallb/m</span>etallb<span class="hljs-regexp">/v0.9.3/m</span>anifests/metallb.yaml<br>kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=<span class="hljs-string">&quot;$(openssl rand -base64 128)&quot;</span><br></code></pre></td></tr></table></figure>
<p>这会将MetalLB部署到<code>metallb-system</code> 名称空间下的群集中。清单中的组件是：</p>
<ul>
<li>该<code>metallb-system/controller</code>部署。这是处理IP地址分配的群集范围的控制器。</li>
<li>该<code>metallb-system/speaker</code>daemonset。这是表明您选择的协议以使服务可访问的组件。</li>
<li>控制器和扬声器的服务帐户，以及组件需要运行的RBAC权限。</li>
</ul>
<p>安装清单不包括配置文件。MetalLB的组件仍将启动，但将保持空闲状态，直到您 <a href="https://metallb.universe.tf/configuration/">定义并部署配置图</a>。<code>memberlist</code>机密包含<code>secretkey</code>用于加密扬声器之间的通信以进行快速死点检测的密钥。</p>
<h2 id="3、支持的网络插件"><a href="#3、支持的网络插件" class="headerlink" title="3、支持的网络插件"></a>3、支持的网络插件</h2><table>
<thead>
<tr>
<th>兼容</th>
<th>网络插件</th>
</tr>
</thead>
<tbody><tr>
<td>calico</td>
<td>已知问题，使用BGP模式，IPIP模式不影响</td>
</tr>
<tr>
<td>canal</td>
<td>支持</td>
</tr>
<tr>
<td>Flannel</td>
<td>支持</td>
</tr>
</tbody></table>
<h2 id="4、二层配置IP地址池"><a href="#4、二层配置IP地址池" class="headerlink" title="4、二层配置IP地址池"></a>4、二层配置IP地址池</h2><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> metallb-system<br><span class="hljs-symbol">  name:</span> config<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  config:</span> |<br>    address-pools:<br>    - name: hello         <span class="hljs-meta">#svc中需要使用name</span><br><span class="hljs-symbol">      protocol:</span> layer2<br><span class="hljs-symbol">      addresses:</span><br>      - <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.200</span><span class="hljs-number">-192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.210</span>         <span class="hljs-meta">#这里的IP地址池范围需要跟集群实际情况相对应</span><br></code></pre></td></tr></table></figure>
<h2 id="5、完整实例"><a href="#5、完整实例" class="headerlink" title="5、完整实例"></a>5、完整实例</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.14-alpine</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">metallb.universe.tf/address-pool:</span> <span class="hljs-string">hello</span>          <span class="hljs-comment">#和configmap中的name对应</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span><br>  <span class="hljs-attr">externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span><br><span class="hljs-attr">status:</span><br>  <span class="hljs-attr">loadBalancer:</span> &#123;&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200714145400861.png" alt="image-20200714145400861"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200714145416862.png" alt="image-20200714145416862"></p>
<p>文章参考：<a href="https://blog.csdn.net/yevvzi/article/details/102967936">https://blog.csdn.net/yevvzi/article/details/102967936</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>MetalLB</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows上安装Go语言开发包</title>
    <url>/2021/04/07/%E5%9C%A8Windows%E4%B8%8A%E5%AE%89%E8%A3%85Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E5%8C%85/</url>
    <content><![CDATA[<h2 id="下载Go语言开发包"><a href="#下载Go语言开发包" class="headerlink" title="下载Go语言开发包"></a>下载Go语言开发包</h2><p>大家可以在Go语言官网（<a href="https://golang.google.cn/dl/%EF%BC%89%E4%B8%8B%E8%BD%BD">https://golang.google.cn/dl/）下载</a> Windows 系统下的Go语言开发包，如下图所示。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135250313.png" alt="image-20200706135250313"></p>
<h2 id="安装Go语言开发包"><a href="#安装Go语言开发包" class="headerlink" title="安装Go语言开发包"></a>安装Go语言开发包</h2><p>​        双击我们下载好的Go语言开发包即可启动安装程序，如下图所示，这是Go语言的用户许可协议，无需管它，直接勾选“I accept …”然后点击“Next”即可。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135403319.png" alt="image-20200706135403319"></p>
<p>​        在 Windows 系统下Go语言开发包会默认安装到 C 盘的 Go 目录下，推荐在这个目录下安装，使用起来较为方便。当然，你也可以选择其他的安装目录，确认无误后点击“Next”，如下图所示：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135447607.png" alt="image-20200706135447607"></p>
<p>Go语言开发包的安装没有其他需要设置的选项，点击“Install”即可开始安装，如下图所示：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135519708.png" alt="image-20200706135519708"></p>
<p>等待程序完成安装，然后点击“Finish”退出安装程序。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135629795.png" alt="image-20200706135629795"></p>
<p>安装完成后，在我们所设置的安装目录下将生成一些目录和文件，如下图所示：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135713475.png" alt="image-20200706135713475"></p>
<p>这个目录的结构遵守 GOPATH 规则，后面的章节会提到这个概念。目录中各个文件夹的含义如下表所示。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20200706135754644.png" alt="image-20200706135754644"></p>
<p>开发时，无须关注这些目录。如果读者希望深度了解底层原理，可以通过上面的介绍继续探索。</p>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>​        开发包安装完成后，我们还需要配置一下<code>GOPATH </code>环境变量，之后才可以使用Go语言进行开发。GOPATH 是一个路径，用来存放开发中需要用到的代码包。</p>
<p>​         在桌面或者资源管理器右键“此电脑”（或者“我的电脑”）→“属性”→“高级系统设置”→“环境变量”，如下图所示。</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/4-191105164245402.gif" alt="设置环境变量"></p>
<p>​        在弹出的菜单里找到 GOPATH 对应的选项点击编辑之后就可以修改了，没有的话可以选择新建，并将变量名填写为 GOPATH，变量值设置为任意目录均可（尽量选择空目录），例如 ：</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20210305114708207.png" alt="image-20210305114708207"></p>
<p>提示：填写完成后，每个打开的窗口都需要点击“确定”来保存设置。</p>
<p>​        其它的环境变量安装包均会进行自动设置。在默认情况下，Go 将会被安装在目录 c:\go 下，但如果你在安装过程中修改安装目录，则可能需要手动修改所有的环境变量的值。</p>
<p>​        环境变量设置好后，可以通过<code>go env </code>命令来进行测试。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">C:\Users\lst&gt;go env<br><span class="hljs-builtin-name">set</span> GO111MODULE=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOARCH</span>=amd64<br><span class="hljs-builtin-name">set</span> GOBIN=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOCACHE</span>=C:\Users\lst\AppData\Local\go-build<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOENV</span>=C:\Users\lst\AppData\Roaming\go\env<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOEXE</span>=.exe<br><span class="hljs-builtin-name">set</span> GOFLAGS=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOHOSTARCH</span>=amd64<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOHOSTOS</span>=windows<br><span class="hljs-builtin-name">set</span> GOINSECURE=<br><span class="hljs-builtin-name">set</span> GONOPROXY=<br><span class="hljs-builtin-name">set</span> GONOSUMDB=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOOS</span>=windows<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOPATH</span>=C:\Users\lst\go<br><span class="hljs-builtin-name">set</span> GOPRIVATE=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOPROXY</span>=https://proxy.golang.org,direct<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOROOT</span>=c:\go<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOSUMDB</span>=sum.golang.org<br><span class="hljs-builtin-name">set</span> GOTMPDIR=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GOTOOLDIR</span>=c:\go\pkg\tool\windows_amd64<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">GCCGO</span>=gccgo<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">AR</span>=ar<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CC</span>=gcc<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CXX</span>=g++<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CGO_ENABLED</span>=1<br><span class="hljs-builtin-name">set</span> GOMOD=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CGO_CFLAGS</span>=-g -O2<br><span class="hljs-builtin-name">set</span> CGO_CPPFLAGS=<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CGO_CXXFLAGS</span>=-g -O2<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CGO_FFLAGS</span>=-g -O2<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">CGO_LDFLAGS</span>=-g -O2<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">PKG_CONFIG</span>=pkg-config<br>。。。<br></code></pre></td></tr></table></figure>
<p>上面只显示了部分结果，如果执行<code>go env </code>命令后，出现类似上面的结果，说明我们的Go开发包已经安装成功了。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Calicoctl</title>
    <url>/2021/03/17/%E5%AE%89%E8%A3%85Calicoctl/</url>
    <content><![CDATA[<h2 id="1、二进制安装calicoctl"><a href="#1、二进制安装calicoctl" class="headerlink" title="1、二进制安装calicoctl"></a>1、二进制安装calicoctl</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">curl -O -L  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/projectcalico/</span>calicoctl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.13.3/</span>calicoctl<br>mv calicoctl <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>chmod +x calicoctl<br></code></pre></td></tr></table></figure>
<h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2><p>​        默认情况下，<code>calicoctl</code>将在上查找配置文件<code>/etc/calico/calicoctl.cfg</code>。您可以使用<code>--config</code>带有需要数据存储访问权限的命令的选项来覆盖此选项。</p>
<p>​        如果<code>calicoctl</code>无法找到，读取或访问配置文件，它将检查一组特定的环境变量</p>
<h2 id="3、配置calicoctl以连接到Kubernetes-API数据存储"><a href="#3、配置calicoctl以连接到Kubernetes-API数据存储" class="headerlink" title="3、配置calicoctl以连接到Kubernetes API数据存储"></a>3、配置calicoctl以连接到Kubernetes API数据存储</h2><p>Kubernetes API连接配置的完整列表，请查看官网：</p>
<p><a href="https://docs.projectcalico.org/getting-started/calicoctl/configure/kdd">https://docs.projectcalico.org/getting-started/calicoctl/configure/kdd</a></p>
<p>通过命令行设置calicoctl所需的环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">DATASTORE_TYPE</span>=kubernetes <span class="hljs-attribute">KUBECONFIG</span>=~/.kube/config calicoctl <span class="hljs-builtin-name">get</span> nodes<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CALICO_DATASTORE_TYPE</span>=kubernetes<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CALICO_KUBECONFIG</span>=~/.kube/config<br>calicoctl <span class="hljs-builtin-name">get</span> workloadendpoints<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200506112145074.png" alt="image-20200506112145074"></p>
<p>命令使用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">calicoctl  -h</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200507143342250.png" alt="image-20200507143342250"></p>
]]></content>
      <categories>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Hexo个人博客</title>
    <url>/2020/12/30/%E5%AE%89%E8%A3%85Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><p>nodejs: 包含俩个命令 node<code> </code>npm</p>
<p>hexo: 快速、简洁且高效的博客框架,支持markdown 插件和扩展性很好</p>
<p>git：需要安装git 通过git 命令来操作github</p>
<p>github账号：申请注册一个github账号，github提供了一个github pages功能可以支持站点软件版本</p>
<h2 id="windows安装git"><a href="#windows安装git" class="headerlink" title="windows安装git"></a>windows安装git</h2><p>1、打开Git的官方网站：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>2、找到下载页：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>3、找到Windows版本下载页面：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<h2 id="windows安装nodejs"><a href="#windows安装nodejs" class="headerlink" title="windows安装nodejs"></a>windows安装nodejs</h2><p>官网下载地址：<a href="https://npm.taobao.org/mirrors/node/v14.15.3/node-v14.15.3-x64.msi">https://npm.taobao.org/mirrors/node/v14.15.3/node-v14.15.3-x64.msi</a></p>
<p>运行msi文件，按照提示一直走下去，安装完成后通过命令行检测结果</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span>  -v<br></code></pre></td></tr></table></figure>
<p>临时更换npm 源 (为了后面快速下载安装hexo，更换为国内的源)</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br>npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry<br><br>#看看终端显示信息，如果看到这行信息，说明配置成功: https:<span class="hljs-comment">//registry.npm.taobao.org/</span><br></code></pre></td></tr></table></figure>
<p>备注：按照系统默认安装，不要修改或设置config文件路径，否则会在安装hexo找不到命令</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="windows初始化hexo"><a href="#windows初始化hexo" class="headerlink" title="windows初始化hexo"></a>windows初始化hexo</h3><p>通过npm来安装hexo，下面前俩个命令安装需要一点时间，blog目录就是博客目录，根据自己情况选择目录</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-cli -g<br>hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword">cd </span><span class="hljs-keyword">blog</span><br><span class="hljs-keyword">npm </span><span class="hljs-keyword">install</span><br><span class="hljs-keyword">hexo </span>server<br></code></pre></td></tr></table></figure>
<p>终端显示如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  Validating config<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure>
<p>在本地浏览器访问<a href="http://localhost:4000/">http://localhost:4000</a></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228134458558-1609204893841.png" alt="image-20201228134458558"></p>
<h2 id="Github准备"><a href="#Github准备" class="headerlink" title="Github准备"></a>Github准备</h2><p>1、注册账号并登录 <a href="https://github.com/">https://github.com</a></p>
<p>2、新建一个仓库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228135107663-1609204887387.png" alt="image-20201228135107663"></p>
<p><strong>注意： 创建repository之前，点击settings更改下默认仓库分支名字 由 main 改为master</strong></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140042861-1609204885284.png" alt="image-20201228140042861"></p>
<p>然后打开仓库创建一个 index.html 文件，并随意先写点内容，比如: 你能看到我 说明部署成功~</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140248390-1609204879899.png" alt="image-20201228140248390"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140336250.png" alt="image-20201228140336250"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140351507-1609204877084.png" alt="image-20201228140351507"></p>
<p>现在打开http://[用户名].github.io就能看到自己的站点了</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228140625169-1609204875332.png" alt="image-20201228140625169"></p>
<h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH  key"></a>配置SSH  key</h2><p>执行以下命令全局配置一下本地账户</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;用户名&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>
<p>生成一对密钥 SSH key</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228141002999-1609204872669.png" alt="image-20201228141002999"></p>
<p>然后登录github 在github 上添加刚刚生成的ssh key 把公钥复制粘贴上去</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228145139217-1609204870370.png" alt="image-20201228145139217"></p>
<p>创建一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认创建，搞定！！这样在你的 SSH keys 列表里就会看到你刚刚添加的密钥</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228145222267-1609204868175.png" alt="image-20201228145222267"></p>
<p>首次使用还需要确认并添加主机到本机ssh 信任列表 下面可以看到success 返回成功</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228145421096-1609204866268.png" alt="image-20201228145421096"></p>
<h2 id="将hexo部署到github仓库"><a href="#将hexo部署到github仓库" class="headerlink" title="将hexo部署到github仓库"></a>将hexo部署到github仓库</h2><p>​        这个时候我们把本地hexo 和github pages部署已经完成了，接下来我们要把本地的hexo静态站点部署到github pages中，然后通过github pages 我们就可以在互联网上浏览到博客了。</p>
<h3 id="部署之前需要更改hexo-配置-和安装部署插件"><a href="#部署之前需要更改hexo-配置-和安装部署插件" class="headerlink" title="部署之前需要更改hexo 配置 和安装部署插件"></a>部署之前需要更改hexo 配置 和安装部署插件</h3><p>第一: 进入blog 目录，打开仓库_config.yml 配置文件，拉到文件末尾，填上如下配置（也可同时部署到多个仓库，比如也可以支持gitee ）</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  branch:</span> master<br><span class="hljs-symbol">  repo:</span><br><span class="hljs-symbol">    github:</span> git@github.com:yangpiqiulaotou/yangpiqiulaotou.github.io.git <span class="hljs-meta">#仓库名字改成自己的</span><br></code></pre></td></tr></table></figure>
<p>第二: 要安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>
<p>第三: 最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228150622519-1609204863417.png" alt="image-20201228150622519"></p>
<p>稍等一会，在浏览器访问网址： <a href="https://你的用户名.github.io/">https://你的用户名.github.io</a> 就会看到你的博客</p>
<h4 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>hexo clean</td>
<td>清除所有生成的页面文件</td>
</tr>
<tr>
<td>hexo g</td>
<td>生成页面</td>
</tr>
<tr>
<td>hexo deploy</td>
<td>推送部署到远程服务器</td>
</tr>
<tr>
<td>hexo n xxx</td>
<td>新建一篇名为xxx的文章</td>
</tr>
</tbody></table>
<h4 id="命令行测试发布博客"><a href="#命令行测试发布博客" class="headerlink" title="命令行测试发布博客"></a>命令行测试发布博客</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228150806161-1609204859471.png" alt="image-20201228150806161"></p>
<p>编辑完成保存，然后进行发布，注意： 一定要在blog目录下执行命令，然后通过域名进行访问</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/blog</span><br>hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201228170456678-1609204857122.png" alt="image-20201228170456678"></p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>主题官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd ~/blog<br>git@github.com:fluid-dev<span class="hljs-regexp">/hexo-theme-fluid.git themes/</span>fluid<br></code></pre></td></tr></table></figure>
<p>在_config.yml 配置文件中，替换theme 参数，我们 把原来的注释掉加#，然后新增一行theme:  next</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta">#theme: landscape</span><br><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN   <span class="hljs-meta">#修改为中文</span><br></code></pre></td></tr></table></figure>
<h3 id="配置主题fluid"><a href="#配置主题fluid" class="headerlink" title="配置主题fluid"></a>配置主题fluid</h3><p>fluid官网：<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE</a></p>
<p>根据官网修改自己的需求选项，比如博客名称、个人简介、自己狂拽酷帅吊炸天的昵称…</p>
<p>修改页面图片</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229150548121-1609225775674.png" alt="image-20201229150548121"></p>
<p>将自己选好的图片放到这个文件夹下，图片格式为xx.png类型，然后在主题下面的_config.yaml配置文件中修改图片名称，比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">/<span class="hljs-selector-tag">avatar</span><span class="hljs-selector-class">.png</span>     #然后改成<span class="hljs-selector-tag">ss</span><span class="hljs-selector-class">.png</span><br></code></pre></td></tr></table></figure>
<p>新建about 关于页面</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure>
<p>更新到github</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g -d</span><br></code></pre></td></tr></table></figure>
<p>最后效果图</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/image-20201229150931869.png" alt="image-20201229150931869"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装部署Helm3</title>
    <url>/2021/03/25/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Helm3/</url>
    <content><![CDATA[<h3 id="1、新的功能"><a href="#1、新的功能" class="headerlink" title="1、新的功能"></a>1、新的功能</h3><p>Helm 3具有许多新功能，但其中一些功能应在此处重点介绍：</p>
<ul>
<li>版本以新格式存储</li>
<li>没有群集内（分iller）组件</li>
<li>Helm 3包括对新版Helm图表的支持（图表v2）</li>
<li>Helm 3还支持库图表-图表主要用作其他图表的资源。</li>
<li>用于在OCI注册表中存储Helm图表的实验支持（例如<a href="https://github.com/docker/distribution">Docker Distribution</a>）可以进行测试。</li>
<li>现在在升级Kubernetes资源时将应用3向战略合并补丁。</li>
<li>现在可以根据JSON模式验证图表提供的值</li>
<li>为了使Helm更安全，可用和健壮，已进行了许多小的改进。</li>
</ul>
<h3 id="2、-Helm3-的内部实现已从-Helm2-发生了很大变化，使其与-Helm2-不兼容"><a href="#2、-Helm3-的内部实现已从-Helm2-发生了很大变化，使其与-Helm2-不兼容" class="headerlink" title="2、 Helm3 的内部实现已从 Helm2 发生了很大变化，使其与 Helm2 不兼容"></a>2、 <code>Helm3 </code>的内部实现已从 <code>Helm2 </code>发生了很大变化，使其与 <code>Helm2 </code>不兼容</h3><p><strong>该版本主要变化如下：</strong></p>
<p>1、最明显的变化是 <code>Tiller </code>的删除</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master/img/640.webp" alt="img"></p>
<p><strong>2、</strong><code>Release</code> 不再是全局资源，而是存储在各自命名空间内</p>
<p>3、<code>Values </code>支持<code> JSON Schema</code>校验器，自动检查所有输入的变量格式</p>
<p>4、移除了用于本地临时搭建 <code>Chart Repository </code>的 <code>helm serve</code> 命令。</p>
<p>5、<code>helm install</code> 不再默认生成一个 Release 的名称，除非指定了 <code>--generate-name</code> 。</p>
<p><strong>6、</strong><code>Helm CLI </code>个别更名</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">helm <span class="hljs-keyword">delete</span><span class="hljs-symbol">` 更名为 `</span>helm uninstall<br>helm inspect<span class="hljs-symbol">` 更名为 `</span>helm <span class="hljs-keyword">show</span><br>helm <span class="hljs-keyword">fetch</span><span class="hljs-symbol">` 更名为 `</span>helm pull<br></code></pre></td></tr></table></figure>
<p>但以上旧的命令当前仍能使用。</p>
<h3 id="3、先决条件"><a href="#3、先决条件" class="headerlink" title="3、先决条件"></a>3、先决条件</h3><p>要成功且正确地确保使用Helm，必须满足以下先决条件。</p>
<ol>
<li>Kubernetes集群</li>
<li>确定要应用于安装的安全性配置（如果有）</li>
<li>安装和配置Helm。</li>
</ol>
<h3 id="4、安装Kubernetes或有权访问集群"><a href="#4、安装Kubernetes或有权访问集群" class="headerlink" title="4、安装Kubernetes或有权访问集群"></a>4、安装Kubernetes或有权访问集群</h3><ul>
<li>您必须安装Kubernetes。对于Helm的最新版本，我们建议使用Kubernetes的最新稳定版本，在大多数情况下，它是第二最新的次要版本。</li>
<li>您还应该具有的本地配置副本<code>kubectl</code>。</li>
</ul>
<p>注意：1.6之前的Kubernetes版本对基于角色的访问控制（RBAC）的支持有限或不支持。</p>
<h3 id="5、-从二进制版本"><a href="#5、-从二进制版本" class="headerlink" title="5、 从二进制版本"></a>5、 从二进制版本</h3><p>每一个<a href="https://github.com/helm/helm/releases">版本</a>helm提供多种操作系统的二进制版本。这些二进制版本可以手动下载和安装。</p>
<ol>
<li>下载<a href="https://github.com/helm/helm/releases">所需版本</a></li>
<li>打开包装（<code>tar -zxvf helm-v3.0.0-linux-amd64.tgz</code>）</li>
<li><code>helm</code>在解压后的目录中找到二进制文件，然后将其移至所需的目标位置（<code>mv linux-amd64/helm /usr/local/bin/helm</code>）</li>
</ol>
<p>从那里，您应该能够运行客户端：<code>helm help</code>。</p>
<h3 id="6、从脚本"><a href="#6、从脚本" class="headerlink" title="6、从脚本"></a>6、从脚本</h3><p>Helm现在具有一个安装程序脚本，该脚本将自动获取最新版本的Helm并将<a href="https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3">其本地安装</a>。</p>
<p>您可以获取该脚本，然后在本地执行它。它有充分的文档记录，因此您可以在运行它之前通读它并了解它在做什么。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &gt; get_helm.sh</span><br><span class="hljs-meta">$</span><span class="bash"> chmod 700 get_helm.sh</span><br><span class="hljs-meta">$</span><span class="bash"> ./get_helm.sh</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个Go语言程序</title>
    <url>/2021/04/07/%E7%AC%AC%E4%B8%80%E4%B8%AAGo%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p> 在控制台输出“Hello World!”非常简单，仅需要几行代码就可以搞定，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// hello project main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>大家也许不明白这些代码的含义，没关系，下面就来一一介绍。</p>
<h4 id="package（创建包）"><a href="#package（创建包）" class="headerlink" title="package（创建包）"></a>package（创建包）</h4><p>​        Go语言以“包”作为管理单位，每个 Go 源文件必须先声明它所属的包，所以我们会看到每个 Go 源文件的开头都是一个 package 声明，格式如下：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">name</span><br></code></pre></td></tr></table></figure>
<p>其中 package 是声明包名的关键字，name 为包的名字。</p>
<p> Go语言的包与文件夹是一一对应的，它具有以下几点特性：</p>
<ul>
<li>一个目录下的同级文件属于同一个包。</li>
<li>包名可以与其目录名不同。</li>
<li>main 包是Go语言程序的入口包，一个Go语言程序必须<strong>有且仅有一个</strong> main 包。如果一个程序没有 main 包，那么编译时将会出错，无法生成可执行文件。</li>
</ul>
<h4 id="import（导入包）"><a href="#import（导入包）" class="headerlink" title="import（导入包）"></a>import（导入包）</h4><p>在包声明之后，是 import 语句，用于导入程序中所依赖的包，导入的包名使用双引号<code>&quot;&quot;</code>包围，格式如下：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure>
<p>其中 import 是导入包的关键字，name 为所导入包的名字。</p>
<p>​         代码第 4 行导入了 fmt 包，这行代码会告诉 Go 编译器，我们需要用到 fmt 包中的函数或者变量等，fmt  包是Go语言标准库为我们提供的，用于格式化输入输出的内容（类似于C语言中的 stdio.h 头文件），类似的还有 os 包、io  包等，后面我们会详细介绍。</p>
<p>​         另外有一点需要注意，导入的包中不能含有代码中没有使用到的包，否则Go编译器会报编译错误，例如<code> imported and not used: &quot;xxx&quot;</code>，”xxx” 表示包名。</p>
<p>​         也可以使用一个 import 关键字导入多个包，此时需要用括号<code>( )</code>将包的名字包围起来，并且每个包名占用一行，也就是写成下面的样子：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">import</span>(</span><br><span class="hljs-function">   <span class="hljs-string">&quot;name1&quot;</span></span><br><span class="hljs-function">   <span class="hljs-string">&quot;name2&quot;</span></span><br><span class="hljs-function"> )</span><br></code></pre></td></tr></table></figure>
<h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><p>​        代码的第 7 行创建了一个 main 函数，它是Go语言程序的入口函数，也即程序启动后运行的第一个函数。main 函数只能声明在 main 包中，不能声明在其他包中，并且，一个 main 包中也必须有且仅有一个 main 函数。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">C<span class="hljs-regexp">/[C++](http:/</span><span class="hljs-regexp">/c.biancheng.net/</span>cplus<span class="hljs-regexp">/) 程序的入口函数也是 main()，一个 C/</span>C++ 程序有且只能有一个 main() 函数。<br></code></pre></td></tr></table></figure>
<p>main 函数是自定义函数的一种，在Go语言中，所有函数都以关键字 func 开头的，定义格式如下所示：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名 <span class="hljs-params">(参数列表)</span> <span class="hljs-params">(返回值列表)</span>&#123;</span><br>   函数体<br> &#125;<br></code></pre></td></tr></table></figure>
<p>格式说明如下：</p>
<ul>
<li>函数名：由字母、数字、下画线<code>_</code>组成，其中，函数名的第一个字母不能为数字，并且，在同一个包内，函数名称不能重名。</li>
<li>参数列表：一个参数由参数变量和参数类型组成，例如<code> func foo( a int, b string )</code>。</li>
<li>返回值列表：可以是返回值类型列表，也可以是参数列表那样变量名与类型的组合，函数有返回值时，必须在函数体中使用 return 语句返回。</li>
<li>函数体：能够被重复调用的代码片段。</li>
</ul>
<p> 注意：Go语言函数的左大括号<code>&#123;</code>必须和函数名称在同一行，否则会报错。</p>
<h4 id="打印-Hello-World"><a href="#打印-Hello-World" class="headerlink" title="打印 Hello World"></a>打印 Hello World</h4><p>​        代码的第 8 行<code>fmt.Println(&quot;Hello World!&quot;)</code>中，Println 是 fmt 包中的一个函数，它用来格式化输出数据，比如字符串、整数、小数等，类似于C语言中的 printf 函数。这里我们使用 Println 函数来打印字符串，也就是<code>( )</code>里面使用<code>&quot;&quot;</code>包裹的部分。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">注意，Println 函数打印完成后会自动换行，<span class="hljs-built_in">ln</span>是 <span class="hljs-keyword">line</span> 的缩写。<br></code></pre></td></tr></table></figure>
<p>点号<code>.</code>是Go语言运算符的一种，这里表示调用 fmt 包中的 Println 函数。</p>
<p>​         另外，代码<code>fmt.Println(&quot;Hello World!&quot;)</code>的结尾，不需要使用<code>;</code>来作为结束符，Go 编译器会自动帮我们添加，当然，在这里加上<code>;</code>也是可以的。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>无人机Drone运行pipeline</title>
    <url>/2021/03/16/%E6%97%A0%E4%BA%BA%E6%9C%BADrone%E8%BF%90%E8%A1%8Cpipeline/</url>
    <content><![CDATA[<h3 id="1、pipeline类型"><a href="#1、pipeline类型" class="headerlink" title="1、pipeline类型"></a>1、pipeline类型</h3><p>​        无人机支持不同类型的管道执行环境，其中每种类型都有自己的自定义yaml规范。kind和type属性定义管道的类型和目标执行环境。</p>
<h4 id="1-1-Docker管道"><a href="#1-1-Docker管道" class="headerlink" title="1.1  Docker管道"></a>1.1  Docker管道</h4><p>​        在隔离的Docker容器内执行管道命令。一个docker管道是一个管道来执行壳Docker容器内部的命令。Docker容器提供隔离，可在同一台机器上安全地执行并发管道。容器管道的主要好处是能够以Docker镜像的形式带来自己的构建环境。无人机会在运行时自动下载docker镜像</p>
<p><a href="https://docker-runner.docs.drone.io/configuration/overview/">https://docker-runner.docs.drone.io/configuration/overview/</a></p>
<h4 id="1-2-Kubernetes管道"><a href="#1-2-Kubernetes管道" class="headerlink" title="1.2  Kubernetes管道"></a>1.2  Kubernetes管道</h4><p>​        在pod内执行管道命令，其中每个管道步骤都由pod中的容器表示。一个kubernetes管道执行管道作为Kubernetes吊舱内的容器几步之遥。容器提供隔离，可以安全地在同一台计算机上执行并发管道。基于容器的管道的主要优点是能够以Docker镜像的形式带来自己的构建环境。无人机会在运行时自动下载docker镜像。</p>
<h6 id="请注意，Kubernetes管道不是Docker管道的直接替代。配置和运行时行为可能有所不同。"><a href="#请注意，Kubernetes管道不是Docker管道的直接替代。配置和运行时行为可能有所不同。" class="headerlink" title="请注意，Kubernetes管道不是Docker管道的直接替代。配置和运行时行为可能有所不同。"></a>请注意，Kubernetes管道不是Docker管道的直接替代。配置和运行时行为可能有所不同。</h6><p><a href="https://kube-runner.docs.drone.io/configuration/overview/">https://kube-runner.docs.drone.io/configuration/overview/</a></p>
<h4 id="1-3-SSH管道"><a href="#1-3-SSH管道" class="headerlink" title="1.3  SSH管道"></a>1.3  SSH管道</h4><p>​        使用SSH协议在远程计算机上执行管道命令，需要直接在主机上运行或不太适合在容器内部执行的工作负载很有用。</p>
<p><a href="https://ssh-runner.docs.drone.io/configuration/overview/">https://ssh-runner.docs.drone.io/configuration/overview/</a></p>
<h3 id="2、Docker与Kubernetes的区别"><a href="#2、Docker与Kubernetes的区别" class="headerlink" title="2、Docker与Kubernetes的区别"></a>2、Docker与Kubernetes的区别</h3><p>Kubernetes管道和Docker管道具有许多相似之处，但不应将它们视为彼此的直接替代。在配置语法和运行时行为方面存在一些显着差异。</p>
<ul>
<li>Kubernetes管道计划在同一Pod中执行，因此共享同一网络。这意味着可以通过<code>localhost</code>地址而不是自定义主机名访问服务。</li>
<li>Kubernetes管道由Kubernetes调度，它提供了高级的亲和力选项。Kubernetes运行器使用该node_selector属性向管道公开节点选择器功能。</li>
<li>Kubernetes容器会自动将服务帐户凭据安装到<code>/var/run/secrets/kubernetes.io/serviceaccount</code>。这可能会带来安全隐患，并可能影响与Kubernetes集成的插件。</li>
</ul>
<h3 id="3、GitLib安装Drone服务器"><a href="#3、GitLib安装Drone服务器" class="headerlink" title="3、GitLib安装Drone服务器"></a>3、GitLib安装Drone服务器</h3><h4 id="3-1创建一个GitLab-OAuth应用程序"><a href="#3-1创建一个GitLab-OAuth应用程序" class="headerlink" title="3.1创建一个GitLab OAuth应用程序"></a>3.1创建一个GitLab OAuth应用程序</h4><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102105951929.png" alt="image-20200102105951929"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102142822011.png" alt="image-20200102142822011"></p>
<h4 id="3-2创建共享秘密"><a href="#3-2创建共享秘密" class="headerlink" title="3.2创建共享秘密"></a>3.2创建共享秘密</h4><p>创建一个共享密钥，以验证跑步者与中央Drone服务器之间的通信。</p>
<p>您可以使用openssl生成共享机密：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl">openssl <span class="hljs-keyword">rand</span> -<span class="hljs-keyword">hex</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102105012955.png" alt="image-20200102105012955"></p>
<h4 id="3-3启动服务器"><a href="#3-3启动服务器" class="headerlink" title="3.3启动服务器"></a>3.3启动服务器</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> \<br>  <span class="hljs-attribute">--volume</span>=/var/lib/drone:/data \<br>  <span class="hljs-attribute">--env</span>=DRONE_AGENTS_ENABLED=true \<br>  <span class="hljs-attribute">--env</span>=DRONE_GITLAB_SERVER=http://gitlab.econage.com \<br>  <span class="hljs-attribute">--env</span>=DRONE_GITLAB_CLIENT_ID=b6f0a6323c57da1ade470546b5b3f07817ec12ca4dcc964b626affd0dfbb46e3 \<br>  <span class="hljs-attribute">--env</span>=DRONE_GITLAB_CLIENT_SECRET=76b6f5159f158337cd637ff120ff3f15206ad5b3aeb40b6d6da6469c40242dd1 \<br>  <span class="hljs-attribute">--env</span>=DRONE_RPC_SECRET=5c2a265111e08953de1028451ae866d7 \<br>  <span class="hljs-attribute">--env</span>=DRONE_SERVER_HOST=192.168.10.14 \<br>  <span class="hljs-attribute">--env</span>=DRONE_GIT_ALWAYS_AUTH=true \<br>  <span class="hljs-attribute">--env</span>=DRONE_USER_CREATE=username:docker,admin:true \<br>  <span class="hljs-attribute">--env</span>=DRONE_SERVER_PROTO=http \<br>  <span class="hljs-attribute">--publish</span>=80:80 \<br>  <span class="hljs-attribute">--restart</span>=always \<br>  <span class="hljs-attribute">--detach</span>=<span class="hljs-literal">true</span> \<br>  <span class="hljs-attribute">--name</span>=drone \<br>  drone/drone<br></code></pre></td></tr></table></figure>
<h4 id="3-4配置"><a href="#3-4配置" class="headerlink" title="3.4配置"></a>3.4配置</h4><ul>
<li>DRONE_GITLAB_CLIENT_ID<br>必需的字符串值提供您的GitLab oauth客户端ID。</li>
<li>DRONE_GITLAB_CLIENT_SECRET<br>必需的字符串值提供您的GitLab oauth客户端密钥。</li>
<li>DRONE_GITLAB_SERVER<br>选项字符串值提供您的GitLab服务器网址。默认值为的gitlab.com服务器地址<a href="https://gitlab.com./">https://gitlab.com。</a></li>
<li>DRONE_GIT_ALWAYS_AUTH<br>可选的布尔值将Drone配置为在克隆公共存储库时进行身份验证。仅在将自托管的GitLab与私有模式启用一起使用时，才应启用此功能。</li>
<li>DRONE_RPC_SECRET<br>必需的字符串值提供了无人机共享机密。这用于验证到服务器的rpc连接。必须为服务器和代理提供相同的秘密值。</li>
<li>DRONE_SERVER_HOST<br>必需的字符串值提供您的外部主机名或IP地址。如果使用IP地址，则可以包括端口。</li>
<li>DRONE_SERVER_PROTO<br>必需的字符串值提供了您的外部协议方案。此值应设置为http或https。如果您配置ssl或acme，则此字段默认为https。</li>
</ul>
<h3 id="4、安装Docker-Runner"><a href="#4、安装Docker-Runner" class="headerlink" title="4、安装Docker Runner"></a>4、安装Docker Runner</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">docker run -d <span class="hljs-string">\</span><br>  -v /<span class="hljs-keyword">var</span>/run/docker.sock:/<span class="hljs-keyword">var</span>/run/docker.sock <span class="hljs-string">\</span><br>  -e DRONE_RPC_PROTO=http <span class="hljs-string">\</span><br>  -e DRONE_RPC_HOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span> <span class="hljs-string">\</span><br>  -e DRONE_RPC_SECRET=<span class="hljs-number">3ab</span>0479b9718d8337e111796c445eefe <span class="hljs-string">\</span><br>  -e DRONE_RUNNER_CAPACITY=<span class="hljs-number">2</span> <span class="hljs-string">\</span><br>  -e DRONE_RUNNER_NAME=$&#123;HOSTNAME&#125; <span class="hljs-string">\</span><br>  -p <span class="hljs-number">3000</span>:<span class="hljs-number">3000</span> <span class="hljs-string">\</span><br>  --restart always <span class="hljs-string">\</span><br>  --name runner <span class="hljs-string">\</span><br>  drone/drone-runner-docker<br></code></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DRONE_RPC_HOST</span><br></code></pre></td></tr></table></figure>
<p>提供您的Drone服务器的主机名（和可选端口）。运行程序在主机地址连接到服务器，以接收执行管线。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DRONE_RPC_PROTO</span><br></code></pre></td></tr></table></figure>
<p>提供用于连接到Drone服务器的协议。该值必须是http或https。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DRONE_RPC_SECRET</span><br></code></pre></td></tr></table></figure>
<p>提供用于与您的Drone服务器进行身份验证的共享密钥。这必须与您的Drone服务器配置中定义的机密匹配。</p>
<h3 id="5、访问web界面"><a href="#5、访问web界面" class="headerlink" title="5、访问web界面"></a>5、访问web界面</h3><p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102120147875.png" alt="image-20200102120147875"></p>
<p>同意后就能看到界面</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102120321933.png" alt="image-20200102120321933"></p>
<p>设置你想要开启得库</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102134133266.png" alt="image-20200102134133266"></p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102134245163.png" alt="image-20200102134245163"></p>
<p>这里最主要的是需要.drone.yaml文件，下面是应用于K8s集群的yaml文件，由于我们公司环境复杂，所以使用了ssh模块，k8s模块功能比较单一</p>
<p>k8s模块地址：<a href="http://plugins.drone.io/mactynow/drone-kubernetes/">http://plugins.drone.io/mactynow/drone-kubernetes/</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">base</span><br><br><span class="hljs-comment">#主要是缓存maven依赖包，可不用变化，直接使用</span><br><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">restore-cache</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">drillster/drone-volume-cache</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">restore:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">mount:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./repository</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/cache</span><br>    <span class="hljs-attr">when:</span><br>      <span class="hljs-attr">event:</span> <span class="hljs-string">push</span>     <span class="hljs-comment">#push事件的时候触发</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mvn</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.hello.com/maven:3-jdk-8</span>    <span class="hljs-comment">#harbor仓库maven镜像</span><br>    <span class="hljs-attr">commands:</span><br><span class="hljs-comment">#maven打包命令，公司使用的是自己的私服，需要指明setting文件地址</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">package</span> <span class="hljs-string">-Dmaven.test.skip=true</span> <span class="hljs-string">-Dmaven.repo.local=./repository</span> <span class="hljs-string">-s</span> <span class="hljs-string">/root/.m2/settings.xml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mv</span> <span class="hljs-string">helloworld/target/helloworld-*.jar</span> <span class="hljs-string">helloworld/target/app.jar</span><br><span class="hljs-comment">#改名是为了Dockerfile文件方便构建镜像</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rebuild-cache</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">drillster/drone-volume-cache</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">rebuild:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">mount:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./repository</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/cache</span><br>    <span class="hljs-attr">when:</span><br>      <span class="hljs-attr">event:</span> <span class="hljs-string">push</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-build</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker</span><br>    <span class="hljs-attr">commands:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">login</span> <span class="hljs-string">-u</span> <span class="hljs-string">admin</span> <span class="hljs-string">-p</span> <span class="hljs-string">hello.123</span> <span class="hljs-string">registry.hello.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">build</span> <span class="hljs-string">-t</span> <span class="hljs-string">registry.hello.com/helloworld:$DRONE_COMMIT</span> <span class="hljs-string">./helloworld</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">push</span> <span class="hljs-string">registry.hello.com/helloworld:$DRONE_COMMIT</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">deamon</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/docker.sock</span><br>    <span class="hljs-attr">when:</span><br>      <span class="hljs-attr">event:</span> <span class="hljs-string">push</span><br>      <span class="hljs-attr">branch:</span> [<span class="hljs-string">dev</span>]<br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">deploy-k8s</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">appleboy/drone-ssh</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>    <span class="hljs-comment">#k8s集群master节点的ip</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span><br>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">ssh_password</span>   <span class="hljs-comment">#在web界面中设置密码</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">envs:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_BRANCH</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_COMMIT</span><br>      <span class="hljs-attr">script:</span><br><span class="hljs-comment">#替换deoloy中的镜像</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">set</span> <span class="hljs-string">image</span> <span class="hljs-string">deployment/helloworld</span> <span class="hljs-string">helloworld=registry.hello.com/helloworld:$DRONE_COMMIT</span> <span class="hljs-string">-n</span> <span class="hljs-string">$DRONE_BRANCH</span><br>    <span class="hljs-attr">when:</span><br>      <span class="hljs-attr">event:</span> <span class="hljs-string">push</span><br>      <span class="hljs-attr">branch:</span> [<span class="hljs-string">dev</span>]<br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">deamon</span><br>    <span class="hljs-attr">host:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/docker.sock</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span><br>    <span class="hljs-attr">host:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/drone/cache</span><br></code></pre></td></tr></table></figure>
<p>支持的变量有：</p>
<p><a href="https://autoscale.drone.io/reference/">https://autoscale.drone.io/reference/</a></p>
<p>Dockerfile文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">registry</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">jdk</span><span class="hljs-selector-pseudo">:1.8_232</span><br><br><span class="hljs-selector-tag">ADD</span> ./<span class="hljs-selector-tag">target</span>/<span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span>  <span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.jar</span><br><br><span class="hljs-selector-tag">CMD</span> <span class="hljs-selector-attr">[<span class="hljs-string">&quot;java -jar app.jar -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;</span>]</span><br></code></pre></td></tr></table></figure>
<p>设置远程连接k8s中master节点的密钥</p>
<p><img src="https://gitee.com/jianshen-bao/blog-img/raw/master//img/image-20200102141822239.png" alt="image-20200102141822239"></p>
<p>设置前端node的打包，只需更换打包基础镜像和命令即可</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">- name: npm<br>  image: registry.hello.com/<span class="hljs-keyword">node</span><span class="hljs-title">:6</span>.<span class="hljs-number">11</span><br>  commands:<br>  - npm install --unsafe-perm<br>  - npm run build<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Drone</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言数据类型</title>
    <url>/2021/04/07/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>​        Go语言的数值类型分为以下几种：整数、浮点数、复数，其中每一种都包含了不同大小的数值类型，例如有符号整数包含 int8、int16、int32、int64 等，每种数值类型都决定了对应的大小范围和是否支持正负符号。本节我们主要介绍一下整数类型。</p>
<p>​         Go语言同时提供了有符号和无符号的整数类型，其中包括 int8、int16、int32 和 int64  四种大小截然不同的有符号整数类型，分别对应 8、16、32、64 bit（二进制位）大小的有符号整数，与此对应的是  uint8、uint16、uint32 和 uint64 四种无符号整数类型。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">此外还有两种整数类型 int 和 uint，它们分别对应特定 CPU 平台的字长（机器字大小），其中 int  表示有符号整数，应用最为广泛，uint 表示无符号整数。实际开发中由于编译器和计算机硬件的不同，int 和 uint 所能表示的整数大小会在  32bit 或 64bit 之间变化。<br><br>大多数情况下，我们只需要 int 一种整型即可，它可以用于循环计数器（for 循环中控制循环次数的变量）、数组和切片的索引，以及任何通用目的的整型运算符，通常 int 类型的处理速度也是最快的。<br></code></pre></td></tr></table></figure>
<p>​         用来表示 Unicode 字符的 rune 类型和 int32 类型是等价的，通常用于表示一个 Unicode 码点。这两个名称可以互换使用。同样，byte 和 uint8 也是等价类型，byte 类型一般用于强调数值是一个原始的数据而不是一个小的整数。</p>
<p>​         最后，还有一种无符号的整数类型 uintptr，它没有指定具体的 bit 大小但是足以容纳指针。uintptr 类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。</p>
<pre><code>     尽管在某些特定的运行环境下 int、uint 和 uintptr 的大小可能相等，但是它们依然是不同的类型，比如 int 和 int32，虽然  int 类型的大小也可能是 32 bit，但是在需要把 int 类型当做 int32 类型使用的时候必须显示的对类型进行转换，反之亦然。</code></pre>
<p>​         Go语言中有符号整数采用 2 的补码形式表示，也就是最高 bit 位用来表示符号位，一个 n-bit 的有符号数的取值范围是从 -2(n-1) 到 2(n-1)-1。无符号整数的所有 bit 位都用于表示非负数，取值范围是 0 到 2n-1。例如，int8 类型整数的取值范围是从 -128 到 127，而 uint8 类型整数的取值范围是从 0 到 255。</p>
<h3 id="哪些情况下使用-int-和-uint"><a href="#哪些情况下使用-int-和-uint" class="headerlink" title="哪些情况下使用 int 和 uint"></a>哪些情况下使用 int 和 uint</h3><p>​        程序逻辑对整型范围没有特殊需求。例如，对象的长度使用内建 len() 函数返回，这个长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用 int 来表示。</p>
<pre><code>     反之，在二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用 int 和 uint。</code></pre>
<h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>​        Go语言提供了两种精度的浮点数 float32 和 float64，它们的算术规范由 IEEE754 浮点数国际标准定义，该浮点数规范被所有现代的 CPU 支持。</p>
<p> 这些浮点数类型的取值范围可以从很微小到很巨大。浮点数取值范围的极限值可以在 math 包中找到：</p>
<ul>
<li>常量 math.MaxFloat32 表示 float32 能取到的最大数值，大约是 3.4e38；</li>
<li>常量 math.MaxFloat64 表示 float64 能取到的最大数值，大约是 1.8e308；</li>
<li>float32 和 float64 能表示的最小值分别为 1.4e-45 和 4.9e-324。</li>
</ul>
<p> 一个 float32 类型的浮点数可以提供大约 6 个十进制数的精度，而 float64 则可以提供约 15 个十进制数的精度，通常应该优先使用 float64 类型，因为 float32 类型的累计计算误差很容易扩散，并且 float32 能精确表示的正整数并不是很大。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> f float<span class="hljs-number">32</span> = <span class="hljs-number">16777216</span> // <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span><br><span class="hljs-attribute">fmt</span>.Println(f == f+<span class="hljs-number">1</span>)    // <span class="hljs-string">&quot;true&quot;</span>!<br></code></pre></td></tr></table></figure>
<p>浮点数在声明的时候可以只写整数部分或者小数部分，像下面这样：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> e = .<span class="hljs-number">71828</span> // <span class="hljs-number">0</span>.<span class="hljs-number">71828</span><br><span class="hljs-attribute">const</span> f = <span class="hljs-number">1</span>.     // <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>很小或很大的数最好用科学计数法书写，通过 e 或 E 来指定指数部分：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> Avogadro = <span class="hljs-number">6</span>.<span class="hljs-number">02214129</span>e<span class="hljs-number">23</span>  // 阿伏伽德罗常数<br><span class="hljs-attribute">const</span> Planck   = <span class="hljs-number">6</span>.<span class="hljs-number">62606957</span>e-<span class="hljs-number">34</span> // 普朗克常数<br></code></pre></td></tr></table></figure>
<p>用 Printf 函数打印浮点数时可以使用“%f”来控制保留几位小数</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><code class="hljs swift">package main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%f<span class="hljs-subst">\n</span>&quot;</span>, math.<span class="hljs-type">Pi</span>)<br>    fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%.2f<span class="hljs-subst">\n</span>&quot;</span>, math.<span class="hljs-type">Pi</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">141593</span><br><span class="hljs-attribute">3</span>.<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure>
<h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>​        在计算机中，复数是由两个浮点数表示的，其中一个表示实部（real），一个表示虚部（imag）。</p>
<p>​         Go语言中复数的类型有两种，分别是 complex128（64 位实数和虚数）和 complex64（32 位实数和虚数），其中 complex128 为复数的默认类型。</p>
<p>​         复数的值由三部分组成 RE + IMi，其中 RE 是实数部分，IM 是虚数部分，RE 和 IM 均为 float 类型，而最后的 i 是虚数单位。</p>
<p> 声明复数的语法格式如下所示：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">var</span> name complex128 = complex(<span class="hljs-symbol">x</span>, <span class="hljs-symbol">y</span>)<br></code></pre></td></tr></table></figure>
<p>​        其中 name 为复数的变量名，complex128 为复数的类型，“=”后面的 complex 为Go语言的内置函数用于为复数赋值，x、y 分别表示构成该复数的两个 float64 类型的数值，x 为实部，y 为虚部。</p>
<p> 上面的声明语句也可以简写为下面的形式：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">name</span> := <span class="hljs-keyword">complex</span>(x, y)<br></code></pre></td></tr></table></figure>
<p>​        对于一个复数<code>z := complex(x, y)</code>，可以通过Go语言的内置函数<code>real(z) </code>来获得该复数的实部，也就是 x；通过<code>imag(z) </code>获得该复数的虚部，也就是 y。</p>
<p> 【示例】使用内置的 complex 函数构建复数，并使用 real 和 imag 函数返回复数的实部和虚部：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">var</span> <span class="hljs-symbol">x</span> complex128 = complex(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 1+2i</span><br><span class="hljs-keyword">var</span> <span class="hljs-symbol">y</span> complex128 = complex(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 3+4i</span><br>fmt.Println(<span class="hljs-symbol">x</span>*<span class="hljs-symbol">y</span>)                 <span class="hljs-comment">// &quot;(-5+10i)&quot;</span><br>fmt.Println(<span class="hljs-built_in">real</span>(<span class="hljs-symbol">x</span>*<span class="hljs-symbol">y</span>))           <span class="hljs-comment">// &quot;-5&quot;</span><br>fmt.Println(imag(<span class="hljs-symbol">x</span>*<span class="hljs-symbol">y</span>))           <span class="hljs-comment">// &quot;10&quot;</span><br></code></pre></td></tr></table></figure>
<p>​         如果大家对复数的运算法则不是很了解，可以查阅《<a href="https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/2568041?fr=aladdin">复数运算法则</a>》，其中详细的讲解了复数的加减乘除操作。</p>
<p>​         复数也可以用<code>==</code>和<code>!=</code>进行相等比较，只有两个复数的实部和虚部都相等的时候它们才是相等的。</p>
<p>​         Go语言内置的 math/cmplx 包中提供了很多操作复数的公共方法，实际操作中建议大家使用复数默认的 complex128 类型，因为这些内置的包中都使用 complex128 类型作为参数。</p>
<h2 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h2><p>​        一个布尔类型的值只有两种：true 或 false。if 和 for 语句的条件部分都是布尔类型的值，并且<code>==</code>和<code>&lt;</code>等比较操作也会产生布尔型的值。</p>
<p>​         一元操作符<code>!</code>对应逻辑非操作，因此<code>!true</code>的值为 false，更复杂一些的写法是<code>(!true==false) ==true</code>，实际开发中我们应尽量采用比较简洁的布尔表达式，就像用 x 来表示<code>x==true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">var</span> <span class="hljs-string">aVar</span> <span class="hljs-string">=</span> <span class="hljs-number">10</span><br><span class="hljs-string">aVar</span> <span class="hljs-string">==</span> <span class="hljs-number">5</span>  <span class="hljs-string">//</span> <span class="hljs-literal">false</span><br><span class="hljs-string">aVar</span> <span class="hljs-string">==</span> <span class="hljs-number">10</span> <span class="hljs-string">//</span> <span class="hljs-literal">true</span><br><span class="hljs-string">aVar</span> <span class="hljs-type">!=</span> <span class="hljs-number">5</span>  <span class="hljs-string">//</span> <span class="hljs-literal">true</span><br><span class="hljs-string">aVar</span> <span class="hljs-type">!=</span> <span class="hljs-number">10</span> <span class="hljs-string">//</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<p>​        Go语言对于值之间的比较有非常严格的限制，只有两个相同类型的值才可以进行比较，如果值的类型是接口（interface），那么它们也必须都实现了相同的接口。如果其中一个值是常量，那么另外一个值可以不是常量，但是类型必须和该常量类型相同。如果以上条件都不满足，则必须将其中一个值的类型转换为和另外一个值的类型相同之后才可以进行比较。</p>
<pre><code>     布尔值可以和 &amp;&amp;（AND）和 ||（OR）操作符结合，并且有短路行为，如果运算符左边的值已经可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值，因此下面的表达式总是安全的：</code></pre>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><code class="hljs erlang-repl">s != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;x&#x27;</span><br></code></pre></td></tr></table></figure>
<p>其中 s[0] 操作如果应用于空字符串将会导致 panic 异常。</p>
<p> 因为<code>&amp;&amp;</code>的优先级比<code>||</code>高（&amp;&amp; 对应逻辑乘法，|| 对应逻辑加法，乘法比加法优先级要高），所以下面的布尔表达式可以不加小括号：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= c <span class="hljs-variable">&amp;&amp;</span> c &lt;= <span class="hljs-string">&#x27;z&#x27;</span> ||<br>    <span class="hljs-string">&#x27;A&#x27;</span> &lt;= c <span class="hljs-variable">&amp;&amp;</span> c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> ||<br>    <span class="hljs-string">&#x27;0&#x27;</span> &lt;= c <span class="hljs-variable">&amp;&amp;</span> c &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &#123;<br>    // ...ASCII字母或数字...<br>&#125;<br></code></pre></td></tr></table></figure>
<p>布尔值并不会隐式转换为数字值 0 或 1，反之亦然，必须使用 if 语句显式的进行转换：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">i</span> := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">b</span> &#123;<br>    <span class="hljs-selector-tag">i</span> = <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果需要经常做类似的转换，可以将转换的代码封装成一个函数，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 如果b为真，btoi返回1；如果为假，btoi返回0</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">btoi</span><span class="hljs-params">(b <span class="hljs-keyword">bool</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> b &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>数字到布尔型的逆转换非常简单，不过为了保持对称，我们也可以封装一个函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// itob报告是否为非零。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">itob</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123; <span class="hljs-keyword">return</span> i != <span class="hljs-number">0</span> &#125;<br></code></pre></td></tr></table></figure>
<p>Go语言中不允许将整型强制转换为布尔型，代码如下</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">var</span> <span class="hljs-built_in">n</span> bool<br>fmt.Println(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">n</span>) * <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>
<p>编译错误，输出如下：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">cannot <span class="hljs-built_in">convert</span> <span class="hljs-built_in">n</span> (<span class="hljs-built_in">type</span> bool) to <span class="hljs-built_in">type</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure>
<p><strong>布尔型无法参与数值运算，也无法与其他类型进行转换。</strong></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>​        一个字符串是一个不可改变的字节序列，字符串可以包含任意的数据，但是通常是用来包含可读的文本，字符串是 UTF-8 字符的一个序列（当字符为 ASCII 码表上的字符时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。</p>
<p>​         UTF-8 是一种被广泛使用的编码格式，是文本文件的标准编码，其中包括 XML 和 JSON 在内也都使用该编码。由于该编码对占用字节长度的不定性，在Go语言中字符串也可能根据需要占用 1 至 4 个字节，这与其它编程语言如 <a href="http://c.biancheng.net/cplus/">C++</a>、<a href="http://c.biancheng.net/java/">Java</a> 或者 <a href="http://c.biancheng.net/python/">Python</a> 不同（Java 始终使用 2 个字节）。Go语言这样做不仅减少了内存和硬盘空间占用，同时也不用像其它语言那样需要对使用 UTF-8 字符集的文本进行编码和解码。</p>
<pre><code>     字符串是一种值类型，且值不可变，即创建某个文本后将无法再次修改这个文本的内容，更深入地讲，字符串是字节的定长数组。</code></pre>
<h3 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h3><p>可以使用双引号<code>&quot;&quot;</code>来定义字符串，字符串中可以使用转义字符来实现换行、缩进等效果，常用的转义字符包括：</p>
<ul>
<li>\n：换行符</li>
<li>\r：回车符</li>
<li>\t：tab 键</li>
<li>\u 或 \U：Unicode 字符</li>
<li>\：反斜杠自身</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;C语言中文网\nGo语言教程&quot;</span><br>    fmt.Println(str)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果为：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">C</span>语言中文网<br><span class="hljs-variable">Go</span>语言教程<br></code></pre></td></tr></table></figure>
<p>​        一般的比较运算符（==、!=、&lt;、&lt;=、&gt;=、&gt;）是通过在内存中按字节比较来实现字符串比较的，因此比较的结果是字符串自然编码的顺序。字符串所占的字节长度可以通过函数 len() 来获取，例如 len(str)。</p>
<p> 字符串的内容（纯字节）可以通过标准索引法来获取，在方括号<code>[ ]</code>内写入索引，索引从 0 开始计数：</p>
<ul>
<li>字符串 str 的第 1 个字节：str[0]</li>
<li>第 i 个字节：str[i - 1]</li>
<li>最后 1 个字节：str[len(str)-1]</li>
</ul>
<p> 需要注意的是，这种转换方案只对纯 ASCII 码的字符串有效。</p>
<blockquote>
<p>注意：获取字符串中某个字节的地址属于非法行为，例如 &amp;str[i]。</p>
</blockquote>
<h3 id="字符串拼接符“-”"><a href="#字符串拼接符“-”" class="headerlink" title="字符串拼接符“+”"></a>字符串拼接符“+”</h3><p>两个字符串 s1 和 s2 可以通过 s := s1 + s2 拼接在一起。将 s2 追加到 s1 尾部并生成一个新的字符串 s。</p>
<p> 可以通过下面的方式来对代码中多行的字符串进行拼接：</p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><code class="hljs smalltalk">str := <span class="hljs-comment">&quot;Beginning of the string &quot;</span> +<br><span class="hljs-comment">&quot;second part of the string&quot;</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>提示：因为编译器会在行尾自动补全分号，所以拼接字符串用的加号“+”必须放在第一行末尾。</p>
</blockquote>
<p>也可以使用“+=”来对字符串进行拼接：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">s := <span class="hljs-string">&quot;hel&quot;</span> + <span class="hljs-string">&quot;lo,&quot;</span><br>s += <span class="hljs-string">&quot;world!&quot;</span><br>fmt.Println(s) <span class="hljs-regexp">//</span>输出 “hello, world!”<br></code></pre></td></tr></table></figure>
<h3 id="字符串实现基于-UTF-8-编码"><a href="#字符串实现基于-UTF-8-编码" class="headerlink" title="字符串实现基于 UTF-8 编码"></a>字符串实现基于 UTF-8 编码</h3><p>​        Go语言中字符串的内部实现使用 UTF-8 编码，通过 rune 类型，可以方便地对每个 UTF-8 字符进行访问。当然，Go语言也支持按照传统的 ASCII 码方式逐字符进行访问。</p>
<p> 关于字符串的 UTF-8 字符访问的详细方法，后面的章节将会详细介绍。</p>
<h3 id="定义多行字符串"><a href="#定义多行字符串" class="headerlink" title="定义多行字符串"></a>定义多行字符串</h3><p>​        在Go语言中，使用双引号书写字符串的方式是字符串常见表达方式之一，被称为字符串字面量（string literal），这种双引号字面量不能跨行，如果想要在源码中嵌入一个多行字符串时，就必须使用```反引号，代码如下：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">const</span> <span class="hljs-built_in">str</span> = `第一行<br>第二行<br>第三行<br>\r\n<br>`<br>fmt.Println(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure>
<p>代码运行结果：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><code class="hljs taggerscript">第一行<br>第二行<br>第三行<br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure>
<p>​    反引号```，是键盘上 1 键左边的键，两个反引号间的字符串将被原样赋值到 str 变量中。</p>
<p>​    在这种方式下，反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>
<p> 多行字符串一般用于内嵌源码和内嵌数据等，代码如下：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">const codeTemplate = `// Generated by github.com/davyxu/cellnet/</span><br><span class="xml">protoc-gen-msg</span><br><span class="xml">// DO NOT EDIT!</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> .Protos&#125;&#125;</span><br><span class="xml">// Source: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.Name</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><br><br><span class="xml">package </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.PackageName</span>&#125;&#125;</span><br><br><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> gt .TotalMessages <span class="hljs-number">0</span>&#125;&#125;</span><br><span class="xml">import (</span><br><span class="xml">    &quot;github.com/davyxu/cellnet&quot;</span><br><span class="xml">    &quot;reflect&quot;</span><br><span class="xml">    _ &quot;github.com/davyxu/cellnet/codec/pb&quot;</span><br><span class="xml">)</span><br><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><br><br><span class="xml">func init() &#123;</span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> .Protos&#125;&#125;</span><br><span class="xml">    // </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.Name</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> .Messages&#125;&#125;</span><br><span class="xml">    cellnet.RegisterMessageMeta(&quot;pb&quot;,&quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.FullName</span>&#125;&#125;</span><span class="xml">&quot;, reflect.TypeOf((*</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.Name</span>&#125;&#125;</span><span class="xml">)(nil)).Elem(), </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.MsgID</span>&#125;&#125;</span><span class="xml">)    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><br><span class="xml">&#125;</span><br><span class="xml">`</span><br></code></pre></td></tr></table></figure>
<p>​        这段代码只定义了一个常量 codeTemplate，类型为字符串，使用```定义，字符串的内容为一段代码生成中使用到的 Go 源码格式。</p>
<p> 在```间的所有代码均不会被编译器识别，而只是作为字符串的一部分。</p>
<p> 字符串类型在业务中的应用可以说是最广泛的，读者需要详细了解字符串的常见用法，请猛击下面的文章：</p>
<ul>
<li><a href="http://c.biancheng.net/view/36.html">Go语言计算字符串长度——len()和RuneCountInString()</a></li>
<li><a href="http://c.biancheng.net/view/37.html">Go语言遍历字符串——获取每一个字符串元素</a></li>
<li><a href="http://c.biancheng.net/view/38.html">Go语言字符串截取（获取字符串的某一段字符）</a></li>
<li><a href="http://c.biancheng.net/view/39.html">Go语言修改字符串</a></li>
<li><a href="http://c.biancheng.net/view/40.html">Go语言字符串拼接（连接）</a></li>
<li><a href="http://c.biancheng.net/view/41.html">Go语言fmt.Sprintf（格式化输出）</a></li>
<li><a href="http://c.biancheng.net/view/42.html">Go语言Base64编码——电子邮件的基础编码格式</a></li>
</ul>
<h1 id="字符类型（byte和rune）"><a href="#字符类型（byte和rune）" class="headerlink" title="字符类型（byte和rune）"></a>字符类型（byte和rune）</h1><p>字符串中的每一个元素叫做“字符”，在遍历或者单个获取字符串元素时可以获得字符。</p>
<p> Go语言的字符有以下两种：</p>
<ul>
<li>一种是 uint8 类型，或者叫 byte 型，代表了 ASCII 码的一个字符。</li>
<li>另一种是 rune 类型，代表一个 UTF-8 字符，当需要处理中文、日文或者其他复合字符时，则需要用到 rune 类型。rune 类型等价于 int32 类型。</li>
</ul>
<p> byte 类型是 uint8 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题，例如 var ch byte = ‘A’，字符使用单引号括起来。</p>
<p> 在 ASCII 码表中，A 的值是 65，使用 16 进制表示则为 41，所以下面的写法是等效的：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> ch <span class="hljs-built_in">byte</span> = <span class="hljs-number">65</span> 或 <span class="hljs-built_in">var</span> ch <span class="hljs-built_in">byte</span> = <span class="hljs-string">&#x27;\x41&#x27;</span>   <span class="hljs-comment">//（\x 总是紧跟着长度为 2 的 16 进制数）</span><br></code></pre></td></tr></table></figure>
<p>另外一种可能的写法是<code> \</code>后面紧跟着长度为 3 的八进制数，例如 \377。</p>
<p>​         Go语言同样支持 Unicode（UTF-8），因此字符同样称为 Unicode 代码点或者 runes，并在内存中使用 int 来表示。在文档中，一般使用格式 U+hhhh 来表示，其中 h 表示一个 16 进制数。</p>
<p>​         在书写 Unicode 字符时，需要在 16 进制数之前加上前缀<code>\u</code>或者<code>\U</code>。因为 Unicode 至少占用 2 个字节，所以我们使用 int16 或者 int 类型来表示。如果需要使用到 4 字节，则使用<code>\u</code>前缀，如果需要使用到 8 个字节，则使用<code>\U</code>前缀。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">var ch <span class="hljs-built_in">int</span> = <span class="hljs-character">&#x27;\u0041&#x27;</span><br>var ch2 <span class="hljs-built_in">int</span> = <span class="hljs-character">&#x27;\u03B2&#x27;</span><br>var ch3 <span class="hljs-built_in">int</span> = <span class="hljs-character">&#x27;\U00101234&#x27;</span><br>fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%d - %d - %d\n&quot;</span>, <span class="hljs-params">ch</span>, <span class="hljs-params">ch2</span>, <span class="hljs-params">ch3</span>)</span> <span class="hljs-comment">// integer</span><br>fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%c - %c - %c\n&quot;</span>, <span class="hljs-params">ch</span>, <span class="hljs-params">ch2</span>, <span class="hljs-params">ch3</span>)</span> <span class="hljs-comment">// character</span><br>fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%X - %X - %X\n&quot;</span>, <span class="hljs-params">ch</span>, <span class="hljs-params">ch2</span>, <span class="hljs-params">ch3</span>)</span> <span class="hljs-comment">// UTF-8 bytes</span><br>fmt.<span class="hljs-constructor">Printf(<span class="hljs-string">&quot;%U - %U - %U&quot;</span>, <span class="hljs-params">ch</span>, <span class="hljs-params">ch2</span>, <span class="hljs-params">ch3</span>)</span>   <span class="hljs-comment">// UTF-8 code point</span><br></code></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">65</span> - <span class="hljs-number">946</span> - <span class="hljs-number">1053236</span><br>A - β - r<br><span class="hljs-number">41</span> - <span class="hljs-number">3B2</span> - <span class="hljs-number">101234</span><br>U+<span class="hljs-number">0041</span> - U+<span class="hljs-number">03B2</span> - U+<span class="hljs-number">101234</span><br></code></pre></td></tr></table></figure>
<p>​        格式化说明符<code>%c</code>用于表示字符，当和字符配合使用时，<code>%v</code>或<code>%d</code>会输出用于表示该字符的整数，<code>%U </code>输出格式为 U+hhhh 的字符串。</p>
<p> Unicode 包中内置了一些用于测试字符的函数，这些函数的返回值都是一个布尔值，如下所示（其中 ch 代表字符）：</p>
<ul>
<li>判断是否为字母：unicode.IsLetter(ch)</li>
<li>判断是否为数字：unicode.IsDigit(ch)</li>
<li>判断是否为空白符号：unicode.IsSpace(ch)</li>
</ul>
<h3 id="UTF-8-和-Unicode-有何区别？"><a href="#UTF-8-和-Unicode-有何区别？" class="headerlink" title="UTF-8 和 Unicode 有何区别？"></a>UTF-8 和 Unicode 有何区别？</h3><p>Unicode 与 ASCII 类似，都是一种字符集。</p>
<p>​         字符集为每个字符分配一个唯一的 ID，我们使用到的所有字符在 Unicode 字符集中都有一个唯一的 ID，例如上面例子中的 a 在  Unicode 与 ASCII 中的编码都是 97。汉字“你”在 Unicode 中的编码为 20320，在不同国家的字符集中，字符所对应的  ID 也会不同。而无论任何情况下，Unicode 中的字符的 ID 都是不会变化的。</p>
<p>​         UTF-8 是编码规则，将 Unicode 中字符的 ID 以某种方式进行编码，UTF-8 的是一种变长编码规则，从 1 到 4 个字节不等。编码规则如下：</p>
<ul>
<li>0xxxxxx 表示文字符号 0～127，兼容 ASCII 字符集。</li>
<li>从 128 到 0x10ffff 表示其他字符。</li>
</ul>
<p> 根据这个规则，拉丁文语系的字符编码一般情况下每个字符占用一个字节，而中文每个字符占用 3 个字节。</p>
<p> 广义的 Unicode 指的是一个标准，它定义了字符集及编码规则，即 Unicode 字符集和 UTF-8、UTF-16 编码等。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
</search>
